
LwIPTest_ownBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000137e0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d94  08013a80  08013a80  00023a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08016814  08016814  00026814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08016818  08016818  00026818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000090  24000000  0801681c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000bf0c  24000090  080168ac  00030090  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400bf9c  080168ac  0003bf9c  2**0
                  ALLOC
  8 .lwip_sec     00040200  30000000  30000000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300be  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002f504  00000000  00000000  00030101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00007243  00000000  00000000  0005f605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000020a8  00000000  00000000  00066848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000019b6  00000000  00000000  000688f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000467b1  00000000  00000000  0006a2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00031f3f  00000000  00000000  000b0a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017fb07  00000000  00000000  000e2996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008ea0  00000000  00000000  002624a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0026b340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013a68 	.word	0x08013a68

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	08013a68 	.word	0x08013a68

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <vApplicationGetIdleTaskMemory+0x2c>)
 80003a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	4a06      	ldr	r2, [pc, #24]	; (80003c0 <vApplicationGetIdleTaskMemory+0x30>)
 80003a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2280      	movs	r2, #128	; 0x80
 80003ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80003ae:	bf00      	nop
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	240000ac 	.word	0x240000ac
 80003c0:	2400014c 	.word	0x2400014c

080003c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80003cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80003d4:	f003 0301 	and.w	r3, r3, #1
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d013      	beq.n	8000404 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80003dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80003e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d00b      	beq.n	8000404 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80003ec:	e000      	b.n	80003f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80003ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80003f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0f9      	beq.n	80003ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80003fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	b2d2      	uxtb	r2, r2
 8000402:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000404:	687b      	ldr	r3, [r7, #4]
}
 8000406:	4618      	mov	r0, r3
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr

08000412 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*console Debugging JPB*/
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b086      	sub	sp, #24
 8000416:	af00      	add	r7, sp, #0
 8000418:	60f8      	str	r0, [r7, #12]
 800041a:	60b9      	str	r1, [r7, #8]
 800041c:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 800041e:	2300      	movs	r3, #0
 8000420:	617b      	str	r3, [r7, #20]
 8000422:	e009      	b.n	8000438 <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	1c5a      	adds	r2, r3, #1
 8000428:	60ba      	str	r2, [r7, #8]
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ffc9 	bl	80003c4 <ITM_SendChar>
    for (int i = 0; i < len; i++)
 8000432:	697b      	ldr	r3, [r7, #20]
 8000434:	3301      	adds	r3, #1
 8000436:	617b      	str	r3, [r7, #20]
 8000438:	697a      	ldr	r2, [r7, #20]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	429a      	cmp	r2, r3
 800043e:	dbf1      	blt.n	8000424 <_write+0x12>
    }
    return len;
 8000440:	687b      	ldr	r3, [r7, #4]
}
 8000442:	4618      	mov	r0, r3
 8000444:	3718      	adds	r7, #24
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800044c:	b5b0      	push	{r4, r5, r7, lr}
 800044e:	b08a      	sub	sp, #40	; 0x28
 8000450:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000452:	4b3e      	ldr	r3, [pc, #248]	; (800054c <main+0x100>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800045a:	2b00      	cmp	r3, #0
 800045c:	d11b      	bne.n	8000496 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800045e:	f3bf 8f4f 	dsb	sy
}
 8000462:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000464:	f3bf 8f6f 	isb	sy
}
 8000468:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800046a:	4b38      	ldr	r3, [pc, #224]	; (800054c <main+0x100>)
 800046c:	2200      	movs	r2, #0
 800046e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000472:	f3bf 8f4f 	dsb	sy
}
 8000476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000478:	f3bf 8f6f 	isb	sy
}
 800047c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800047e:	4b33      	ldr	r3, [pc, #204]	; (800054c <main+0x100>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a32      	ldr	r2, [pc, #200]	; (800054c <main+0x100>)
 8000484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000488:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800048a:	f3bf 8f4f 	dsb	sy
}
 800048e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000490:	f3bf 8f6f 	isb	sy
}
 8000494:	e000      	b.n	8000498 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000496:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000498:	4b2c      	ldr	r3, [pc, #176]	; (800054c <main+0x100>)
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d138      	bne.n	8000516 <main+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004a4:	4b29      	ldr	r3, [pc, #164]	; (800054c <main+0x100>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004ac:	f3bf 8f4f 	dsb	sy
}
 80004b0:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80004b2:	4b26      	ldr	r3, [pc, #152]	; (800054c <main+0x100>)
 80004b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004b8:	627b      	str	r3, [r7, #36]	; 0x24
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004bc:	0b5b      	lsrs	r3, r3, #13
 80004be:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004c2:	623b      	str	r3, [r7, #32]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c6:	08db      	lsrs	r3, r3, #3
 80004c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004cc:	61fb      	str	r3, [r7, #28]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004ce:	6a3b      	ldr	r3, [r7, #32]
 80004d0:	015a      	lsls	r2, r3, #5
 80004d2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80004d6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80004d8:	69fa      	ldr	r2, [r7, #28]
 80004da:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004dc:	491b      	ldr	r1, [pc, #108]	; (800054c <main+0x100>)
 80004de:	4313      	orrs	r3, r2
 80004e0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80004e4:	69fb      	ldr	r3, [r7, #28]
 80004e6:	1e5a      	subs	r2, r3, #1
 80004e8:	61fa      	str	r2, [r7, #28]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d1ef      	bne.n	80004ce <main+0x82>
    } while(sets-- != 0U);
 80004ee:	6a3b      	ldr	r3, [r7, #32]
 80004f0:	1e5a      	subs	r2, r3, #1
 80004f2:	623a      	str	r2, [r7, #32]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d1e5      	bne.n	80004c4 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80004f8:	f3bf 8f4f 	dsb	sy
}
 80004fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <main+0x100>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a12      	ldr	r2, [pc, #72]	; (800054c <main+0x100>)
 8000504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000508:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800050a:	f3bf 8f4f 	dsb	sy
}
 800050e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000510:	f3bf 8f6f 	isb	sy
}
 8000514:	e000      	b.n	8000518 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000516:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fcd0 	bl	8000ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f81c 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f894 	bl	800064c <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <main+0x104>)
 8000526:	463c      	mov	r4, r7
 8000528:	461d      	mov	r5, r3
 800052a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000536:	463b      	mov	r3, r7
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f004 fed2 	bl	80052e4 <osThreadCreate>
 8000540:	4603      	mov	r3, r0
 8000542:	4a04      	ldr	r2, [pc, #16]	; (8000554 <main+0x108>)
 8000544:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000546:	f004 feb6 	bl	80052b6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054a:	e7fe      	b.n	800054a <main+0xfe>
 800054c:	e000ed00 	.word	0xe000ed00
 8000550:	08013a8c 	.word	0x08013a8c
 8000554:	2400034c 	.word	0x2400034c

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b09c      	sub	sp, #112	; 0x70
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000562:	224c      	movs	r2, #76	; 0x4c
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f012 fb7d 	bl	8012c66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2220      	movs	r2, #32
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f012 fb77 	bl	8012c66 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000578:	2002      	movs	r0, #2
 800057a:	f002 fd0d 	bl	8002f98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057e:	2300      	movs	r3, #0
 8000580:	603b      	str	r3, [r7, #0]
 8000582:	4b30      	ldr	r3, [pc, #192]	; (8000644 <SystemClock_Config+0xec>)
 8000584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000586:	4a2f      	ldr	r2, [pc, #188]	; (8000644 <SystemClock_Config+0xec>)
 8000588:	f023 0301 	bic.w	r3, r3, #1
 800058c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800058e:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <SystemClock_Config+0xec>)
 8000590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	4b2b      	ldr	r3, [pc, #172]	; (8000648 <SystemClock_Config+0xf0>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a2a      	ldr	r2, [pc, #168]	; (8000648 <SystemClock_Config+0xf0>)
 800059e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b28      	ldr	r3, [pc, #160]	; (8000648 <SystemClock_Config+0xf0>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005b0:	bf00      	nop
 80005b2:	4b25      	ldr	r3, [pc, #148]	; (8000648 <SystemClock_Config+0xf0>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005be:	d1f8      	bne.n	80005b2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	2302      	movs	r3, #2
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 80005d6:	2340      	movs	r3, #64	; 0x40
 80005d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005da:	2302      	movs	r3, #2
 80005dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80005e2:	2304      	movs	r3, #4
 80005e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80005e6:	230c      	movs	r3, #12
 80005e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fd08 	bl	800300c <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000602:	f000 f8d1 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	233f      	movs	r3, #63	; 0x3f
 8000608:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2303      	movs	r3, #3
 800060c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000612:	2308      	movs	r3, #8
 8000614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000616:	2340      	movs	r3, #64	; 0x40
 8000618:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800061a:	2340      	movs	r3, #64	; 0x40
 800061c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800061e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000622:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000624:	2340      	movs	r3, #64	; 0x40
 8000626:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f003 f947 	bl	80038c0 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000638:	f000 f8b6 	bl	80007a8 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3770      	adds	r7, #112	; 0x70
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	58000400 	.word	0x58000400
 8000648:	58024800 	.word	0x58024800

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b087      	sub	sp, #28
 8000650:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <MX_GPIO_Init+0xa8>)
 8000654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000658:	4a26      	ldr	r2, [pc, #152]	; (80006f4 <MX_GPIO_Init+0xa8>)
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000662:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <MX_GPIO_Init+0xa8>)
 8000664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000670:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <MX_GPIO_Init+0xa8>)
 8000672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000676:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <MX_GPIO_Init+0xa8>)
 8000678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800067c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_GPIO_Init+0xa8>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_GPIO_Init+0xa8>)
 8000690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000694:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <MX_GPIO_Init+0xa8>)
 8000696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800069a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_GPIO_Init+0xa8>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_GPIO_Init+0xa8>)
 80006ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <MX_GPIO_Init+0xa8>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_GPIO_Init+0xa8>)
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_GPIO_Init+0xa8>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d0:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <MX_GPIO_Init+0xa8>)
 80006d2:	f043 0302 	orr.w	r3, r3, #2
 80006d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_GPIO_Init+0xa8>)
 80006dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e0:	f003 0302 	and.w	r3, r3, #2
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e8:	bf00      	nop
 80006ea:	371c      	adds	r7, #28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	58024400 	.word	0x58024400

080006f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b087      	sub	sp, #28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000700:	f003 ff70 	bl	80045e4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* modified by JPB 20231023*/
  const char* message = "Hello UDP message!\n\r";
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <StartDefaultTask+0x84>)
 8000706:	617b      	str	r3, [r7, #20]

  osDelay(1000);
 8000708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800070c:	f004 fe36 	bl	800537c <osDelay>

  ip_addr_t PC_IPADDR;
  IP_ADDR4(&PC_IPADDR, 192, 168, 1, 1);
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <StartDefaultTask+0x88>)
 8000712:	60bb      	str	r3, [r7, #8]

  struct udp_pcb* my_udp = udp_new();
 8000714:	f00f fd00 	bl	8010118 <udp_new>
 8000718:	6138      	str	r0, [r7, #16]
  udp_connect(my_udp, &PC_IPADDR, 55151);
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	f24d 726f 	movw	r2, #55151	; 0xd76f
 8000722:	4619      	mov	r1, r3
 8000724:	6938      	ldr	r0, [r7, #16]
 8000726:	f00f fc89 	bl	801003c <udp_connect>
  struct pbuf* udp_buffer = NULL;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  /*end mod JPB*/

  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 800072e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000732:	f004 fe23 	bl	800537c <osDelay>
    /* !! PBUF_RAM is critical for correct operation !! */
    udp_buffer = pbuf_alloc(PBUF_TRANSPORT, strlen(message), PBUF_RAM);
 8000736:	6978      	ldr	r0, [r7, #20]
 8000738:	f7ff fdd2 	bl	80002e0 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	b29b      	uxth	r3, r3
 8000740:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000744:	4619      	mov	r1, r3
 8000746:	2036      	movs	r0, #54	; 0x36
 8000748:	f008 ffde 	bl	8009708 <pbuf_alloc>
 800074c:	60f8      	str	r0, [r7, #12]

    if (udp_buffer != NULL) {
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d0ec      	beq.n	800072e <StartDefaultTask+0x36>
      memcpy(udp_buffer->payload, message, strlen(message));
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	685c      	ldr	r4, [r3, #4]
 8000758:	6978      	ldr	r0, [r7, #20]
 800075a:	f7ff fdc1 	bl	80002e0 <strlen>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	6979      	ldr	r1, [r7, #20]
 8000764:	4620      	mov	r0, r4
 8000766:	f012 fb49 	bl	8012dfc <memcpy>
      udp_send(my_udp, udp_buffer);
 800076a:	68f9      	ldr	r1, [r7, #12]
 800076c:	6938      	ldr	r0, [r7, #16]
 800076e:	f00f f9f3 	bl	800fb58 <udp_send>
      pbuf_free(udp_buffer);
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f009 faaa 	bl	8009ccc <pbuf_free>
    osDelay(500);
 8000778:	e7d9      	b.n	800072e <StartDefaultTask+0x36>
 800077a:	bf00      	nop
 800077c:	08013aa8 	.word	0x08013aa8
 8000780:	0101a8c0 	.word	0x0101a8c0

08000784 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d101      	bne.n	800079a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000796:	f000 fbcd 	bl	8000f34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40001000 	.word	0x40001000

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <HAL_MspInit+0x38>)
 80007bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007c0:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <HAL_MspInit+0x38>)
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <HAL_MspInit+0x38>)
 80007cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007d0:	f003 0302 	and.w	r3, r3, #2
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	210f      	movs	r1, #15
 80007dc:	f06f 0001 	mvn.w	r0, #1
 80007e0:	f000 fca0 	bl	8001124 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	58024400 	.word	0x58024400

080007f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b090      	sub	sp, #64	; 0x40
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b0f      	cmp	r3, #15
 80007fc:	d827      	bhi.n	800084e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80007fe:	2200      	movs	r2, #0
 8000800:	6879      	ldr	r1, [r7, #4]
 8000802:	2036      	movs	r0, #54	; 0x36
 8000804:	f000 fc8e 	bl	8001124 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000808:	2036      	movs	r0, #54	; 0x36
 800080a:	f000 fca5 	bl	8001158 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800080e:	4a29      	ldr	r2, [pc, #164]	; (80008b4 <HAL_InitTick+0xc4>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000814:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <HAL_InitTick+0xc8>)
 8000816:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800081a:	4a27      	ldr	r2, [pc, #156]	; (80008b8 <HAL_InitTick+0xc8>)
 800081c:	f043 0310 	orr.w	r3, r3, #16
 8000820:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000824:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <HAL_InitTick+0xc8>)
 8000826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800082a:	f003 0310 	and.w	r3, r3, #16
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000832:	f107 0210 	add.w	r2, r7, #16
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4611      	mov	r1, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fbb5 	bl	8003fac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000844:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000848:	2b00      	cmp	r3, #0
 800084a:	d106      	bne.n	800085a <HAL_InitTick+0x6a>
 800084c:	e001      	b.n	8000852 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e02b      	b.n	80008aa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000852:	f003 fb95 	bl	8003f80 <HAL_RCC_GetPCLK1Freq>
 8000856:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000858:	e004      	b.n	8000864 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800085a:	f003 fb91 	bl	8003f80 <HAL_RCC_GetPCLK1Freq>
 800085e:	4603      	mov	r3, r0
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000866:	4a15      	ldr	r2, [pc, #84]	; (80008bc <HAL_InitTick+0xcc>)
 8000868:	fba2 2303 	umull	r2, r3, r2, r3
 800086c:	0c9b      	lsrs	r3, r3, #18
 800086e:	3b01      	subs	r3, #1
 8000870:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <HAL_InitTick+0xd0>)
 8000874:	4a13      	ldr	r2, [pc, #76]	; (80008c4 <HAL_InitTick+0xd4>)
 8000876:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_InitTick+0xd0>)
 800087a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800087e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000880:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <HAL_InitTick+0xd0>)
 8000882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000884:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_InitTick+0xd0>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_InitTick+0xd0>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000892:	480b      	ldr	r0, [pc, #44]	; (80008c0 <HAL_InitTick+0xd0>)
 8000894:	f003 fbcc 	bl	8004030 <HAL_TIM_Base_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d104      	bne.n	80008a8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800089e:	4808      	ldr	r0, [pc, #32]	; (80008c0 <HAL_InitTick+0xd0>)
 80008a0:	f003 fc28 	bl	80040f4 <HAL_TIM_Base_Start_IT>
 80008a4:	4603      	mov	r3, r0
 80008a6:	e000      	b.n	80008aa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80008a8:	2301      	movs	r3, #1
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3740      	adds	r7, #64	; 0x40
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	24000008 	.word	0x24000008
 80008b8:	58024400 	.word	0x58024400
 80008bc:	431bde83 	.word	0x431bde83
 80008c0:	24000350 	.word	0x24000350
 80008c4:	40001000 	.word	0x40001000

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <TIM6_DAC_IRQHandler+0x10>)
 80008fa:	f003 fc73 	bl	80041e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	24000350 	.word	0x24000350

08000908 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <ETH_IRQHandler+0x10>)
 800090e:	f000 fff5 	bl	80018fc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	24004d84 	.word	0x24004d84

0800091c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return 1;
 8000920:	2301      	movs	r3, #1
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <_kill>:

int _kill(int pid, int sig)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <_kill+0x20>)
 8000938:	2216      	movs	r2, #22
 800093a:	601a      	str	r2, [r3, #0]
  return -1;
 800093c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000940:	4618      	mov	r0, r3
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	2400bf8c 	.word	0x2400bf8c

08000950 <_exit>:

void _exit (int status)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000958:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff ffe5 	bl	800092c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000962:	e7fe      	b.n	8000962 <_exit+0x12>

08000964 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	e00a      	b.n	800098c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000976:	f3af 8000 	nop.w
 800097a:	4601      	mov	r1, r0
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	60ba      	str	r2, [r7, #8]
 8000982:	b2ca      	uxtb	r2, r1
 8000984:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	3301      	adds	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	429a      	cmp	r2, r3
 8000992:	dbf0      	blt.n	8000976 <_read+0x12>
  }

  return len;
 8000994:	687b      	ldr	r3, [r7, #4]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <_close>:
  }
  return len;
}

int _close(int file)
{
 800099e:	b480      	push	{r7}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009c6:	605a      	str	r2, [r3, #4]
  return 0;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <_isatty>:

int _isatty(int file)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b087      	sub	sp, #28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a10:	4a14      	ldr	r2, [pc, #80]	; (8000a64 <_sbrk+0x5c>)
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <_sbrk+0x60>)
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d102      	bne.n	8000a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <_sbrk+0x64>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <_sbrk+0x68>)
 8000a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d205      	bcs.n	8000a44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <_sbrk+0x6c>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a42:	e009      	b.n	8000a58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <_sbrk+0x64>)
 8000a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a56:	68fb      	ldr	r3, [r7, #12]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	371c      	adds	r7, #28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	24080000 	.word	0x24080000
 8000a68:	00000400 	.word	0x00000400
 8000a6c:	2400039c 	.word	0x2400039c
 8000a70:	2400bfa0 	.word	0x2400bfa0
 8000a74:	2400bf8c 	.word	0x2400bf8c

08000a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a7e:	4b3f      	ldr	r3, [pc, #252]	; (8000b7c <SystemInit+0x104>)
 8000a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a84:	4a3d      	ldr	r2, [pc, #244]	; (8000b7c <SystemInit+0x104>)
 8000a86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a8e:	4b3c      	ldr	r3, [pc, #240]	; (8000b80 <SystemInit+0x108>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 030f 	and.w	r3, r3, #15
 8000a96:	2b06      	cmp	r3, #6
 8000a98:	d807      	bhi.n	8000aaa <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a9a:	4b39      	ldr	r3, [pc, #228]	; (8000b80 <SystemInit+0x108>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f023 030f 	bic.w	r3, r3, #15
 8000aa2:	4a37      	ldr	r2, [pc, #220]	; (8000b80 <SystemInit+0x108>)
 8000aa4:	f043 0307 	orr.w	r3, r3, #7
 8000aa8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aaa:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <SystemInit+0x10c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a35      	ldr	r2, [pc, #212]	; (8000b84 <SystemInit+0x10c>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab6:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <SystemInit+0x10c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000abc:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <SystemInit+0x10c>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4930      	ldr	r1, [pc, #192]	; (8000b84 <SystemInit+0x10c>)
 8000ac2:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <SystemInit+0x110>)
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac8:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <SystemInit+0x108>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f003 0308 	and.w	r3, r3, #8
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d007      	beq.n	8000ae4 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ad4:	4b2a      	ldr	r3, [pc, #168]	; (8000b80 <SystemInit+0x108>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f023 030f 	bic.w	r3, r3, #15
 8000adc:	4a28      	ldr	r2, [pc, #160]	; (8000b80 <SystemInit+0x108>)
 8000ade:	f043 0307 	orr.w	r3, r3, #7
 8000ae2:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ae4:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <SystemInit+0x10c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000aea:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <SystemInit+0x10c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <SystemInit+0x10c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af6:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <SystemInit+0x10c>)
 8000af8:	4a24      	ldr	r2, [pc, #144]	; (8000b8c <SystemInit+0x114>)
 8000afa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <SystemInit+0x10c>)
 8000afe:	4a24      	ldr	r2, [pc, #144]	; (8000b90 <SystemInit+0x118>)
 8000b00:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <SystemInit+0x10c>)
 8000b04:	4a23      	ldr	r2, [pc, #140]	; (8000b94 <SystemInit+0x11c>)
 8000b06:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b08:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <SystemInit+0x10c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <SystemInit+0x10c>)
 8000b10:	4a20      	ldr	r2, [pc, #128]	; (8000b94 <SystemInit+0x11c>)
 8000b12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <SystemInit+0x10c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <SystemInit+0x10c>)
 8000b1c:	4a1d      	ldr	r2, [pc, #116]	; (8000b94 <SystemInit+0x11c>)
 8000b1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <SystemInit+0x10c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <SystemInit+0x10c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <SystemInit+0x10c>)
 8000b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <SystemInit+0x10c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <SystemInit+0x120>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <SystemInit+0x124>)
 8000b3e:	4013      	ands	r3, r2
 8000b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b44:	d202      	bcs.n	8000b4c <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <SystemInit+0x128>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <SystemInit+0x10c>)
 8000b4e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000b52:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <SystemInit+0x10c>)
 8000b54:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000b58:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <SystemInit+0x10c>)
 8000b5e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000b62:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8000b64:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <SystemInit+0x12c>)
 8000b68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b6c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00
 8000b80:	52002000 	.word	0x52002000
 8000b84:	58024400 	.word	0x58024400
 8000b88:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b8c:	02020200 	.word	0x02020200
 8000b90:	01ff0000 	.word	0x01ff0000
 8000b94:	01010280 	.word	0x01010280
 8000b98:	5c001000 	.word	0x5c001000
 8000b9c:	ffff0000 	.word	0xffff0000
 8000ba0:	51008108 	.word	0x51008108
 8000ba4:	52004000 	.word	0x52004000

08000ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bac:	f7ff ff64 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb2:	490d      	ldr	r1, [pc, #52]	; (8000be8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc8:	4c0a      	ldr	r4, [pc, #40]	; (8000bf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f012 f8eb 	bl	8012db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bda:	f7ff fc37 	bl	800044c <main>
  bx  lr
 8000bde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000be4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000be8:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8000bec:	0801681c 	.word	0x0801681c
  ldr r2, =_sbss
 8000bf0:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8000bf4:	2400bf9c 	.word	0x2400bf9c

08000bf8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC3_IRQHandler>

08000bfa <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00b      	beq.n	8000c22 <LAN8742_RegisterBusIO+0x28>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d007      	beq.n	8000c22 <LAN8742_RegisterBusIO+0x28>
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <LAN8742_RegisterBusIO+0x28>
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d102      	bne.n	8000c28 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c26:	e014      	b.n	8000c52 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	691a      	ldr	r2, [r3, #16]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d17c      	bne.n	8000d78 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d002      	beq.n	8000c8c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2220      	movs	r2, #32
 8000c90:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	e01c      	b.n	8000cd2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	f107 0208 	add.w	r2, r7, #8
 8000ca0:	2112      	movs	r1, #18
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	4798      	blx	r3
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	da03      	bge.n	8000cb4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000cac:	f06f 0304 	mvn.w	r3, #4
 8000cb0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000cb2:	e00b      	b.n	8000ccc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	f003 031f 	and.w	r3, r3, #31
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d105      	bne.n	8000ccc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
         break;
 8000cca:	e005      	b.n	8000cd8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	2b1f      	cmp	r3, #31
 8000cd6:	d9df      	bls.n	8000c98 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b1f      	cmp	r3, #31
 8000cde:	d902      	bls.n	8000ce6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000ce0:	f06f 0302 	mvn.w	r3, #2
 8000ce4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d145      	bne.n	8000d78 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	6810      	ldr	r0, [r2, #0]
 8000cf4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4798      	blx	r3
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	db37      	blt.n	8000d72 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	6810      	ldr	r0, [r2, #0]
 8000d0a:	f107 0208 	add.w	r2, r7, #8
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4798      	blx	r3
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db28      	blt.n	8000d6a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4798      	blx	r3
 8000d1e:	4603      	mov	r3, r0
 8000d20:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d22:	e01c      	b.n	8000d5e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4798      	blx	r3
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d36:	d80e      	bhi.n	8000d56 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	695b      	ldr	r3, [r3, #20]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	6810      	ldr	r0, [r2, #0]
 8000d40:	f107 0208 	add.w	r2, r7, #8
 8000d44:	2100      	movs	r1, #0
 8000d46:	4798      	blx	r3
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	da07      	bge.n	8000d5e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000d4e:	f06f 0304 	mvn.w	r3, #4
 8000d52:	613b      	str	r3, [r7, #16]
                 break;
 8000d54:	e010      	b.n	8000d78 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000d56:	f06f 0301 	mvn.w	r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]
               break;
 8000d5c:	e00c      	b.n	8000d78 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1dd      	bne.n	8000d24 <LAN8742_Init+0xc6>
 8000d68:	e006      	b.n	8000d78 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000d6a:	f06f 0304 	mvn.w	r3, #4
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	e002      	b.n	8000d78 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000d72:	f06f 0303 	mvn.w	r3, #3
 8000d76:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d112      	bne.n	8000da4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4798      	blx	r3
 8000d84:	4603      	mov	r3, r0
 8000d86:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000d88:	bf00      	nop
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	4798      	blx	r3
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d9c:	d9f5      	bls.n	8000d8a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2201      	movs	r2, #1
 8000da2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000da4:	693b      	ldr	r3, [r7, #16]
 }
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b084      	sub	sp, #16
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	6810      	ldr	r0, [r2, #0]
 8000dc2:	f107 020c 	add.w	r2, r7, #12
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4798      	blx	r3
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	da02      	bge.n	8000dd6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000dd0:	f06f 0304 	mvn.w	r3, #4
 8000dd4:	e06e      	b.n	8000eb4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	6810      	ldr	r0, [r2, #0]
 8000dde:	f107 020c 	add.w	r2, r7, #12
 8000de2:	2101      	movs	r1, #1
 8000de4:	4798      	blx	r3
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	da02      	bge.n	8000df2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000dec:	f06f 0304 	mvn.w	r3, #4
 8000df0:	e060      	b.n	8000eb4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d101      	bne.n	8000e00 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e059      	b.n	8000eb4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	6810      	ldr	r0, [r2, #0]
 8000e08:	f107 020c 	add.w	r2, r7, #12
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4798      	blx	r3
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	da02      	bge.n	8000e1c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e16:	f06f 0304 	mvn.w	r3, #4
 8000e1a:	e04b      	b.n	8000eb4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d11b      	bne.n	8000e5e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d006      	beq.n	8000e3e <LAN8742_GetLinkState+0x90>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e03a      	b.n	8000eb4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e033      	b.n	8000eb4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e56:	2304      	movs	r3, #4
 8000e58:	e02c      	b.n	8000eb4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	e02a      	b.n	8000eb4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	6810      	ldr	r0, [r2, #0]
 8000e66:	f107 020c 	add.w	r2, r7, #12
 8000e6a:	211f      	movs	r1, #31
 8000e6c:	4798      	blx	r3
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	da02      	bge.n	8000e7a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000e74:	f06f 0304 	mvn.w	r3, #4
 8000e78:	e01c      	b.n	8000eb4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000e84:	2306      	movs	r3, #6
 8000e86:	e015      	b.n	8000eb4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 031c 	and.w	r3, r3, #28
 8000e8e:	2b18      	cmp	r3, #24
 8000e90:	d101      	bne.n	8000e96 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e92:	2302      	movs	r3, #2
 8000e94:	e00e      	b.n	8000eb4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f003 031c 	and.w	r3, r3, #28
 8000e9c:	2b08      	cmp	r3, #8
 8000e9e:	d101      	bne.n	8000ea4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e007      	b.n	8000eb4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 031c 	and.w	r3, r3, #28
 8000eaa:	2b14      	cmp	r3, #20
 8000eac:	d101      	bne.n	8000eb2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	e000      	b.n	8000eb4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000eb2:	2305      	movs	r3, #5
    }				
  }
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec2:	2003      	movs	r0, #3
 8000ec4:	f000 f923 	bl	800110e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ec8:	f002 feb0 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_Init+0x68>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	0a1b      	lsrs	r3, r3, #8
 8000ed4:	f003 030f 	and.w	r3, r3, #15
 8000ed8:	4913      	ldr	r1, [pc, #76]	; (8000f28 <HAL_Init+0x6c>)
 8000eda:	5ccb      	ldrb	r3, [r1, r3]
 8000edc:	f003 031f 	and.w	r3, r3, #31
 8000ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_Init+0x68>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <HAL_Init+0x6c>)
 8000ef0:	5cd3      	ldrb	r3, [r2, r3]
 8000ef2:	f003 031f 	and.w	r3, r3, #31
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8000efc:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <HAL_Init+0x70>)
 8000efe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f00:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <HAL_Init+0x74>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f06:	200f      	movs	r0, #15
 8000f08:	f7ff fc72 	bl	80007f0 <HAL_InitTick>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e002      	b.n	8000f1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f16:	f7ff fc4d 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	58024400 	.word	0x58024400
 8000f28:	080165ec 	.word	0x080165ec
 8000f2c:	24000004 	.word	0x24000004
 8000f30:	24000000 	.word	0x24000000

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	2400000c 	.word	0x2400000c
 8000f58:	240003a0 	.word	0x240003a0

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	240003a0 	.word	0x240003a0

08000f74 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetREVID+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	0c1b      	lsrs	r3, r3, #16
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	5c001000 	.word	0x5c001000

08000f8c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000f9c:	4904      	ldr	r1, [pc, #16]	; (8000fb0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	604b      	str	r3, [r1, #4]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	58000400 	.word	0x58000400

08000fb4 <__NVIC_SetPriorityGrouping>:
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00
 8000ff8:	05fa0000 	.word	0x05fa0000

08000ffc <__NVIC_GetPriorityGrouping>:
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <__NVIC_EnableIRQ+0x38>)
 8001032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_SetPriority>:
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	; (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ff4c 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001132:	f7ff ff63 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001136:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	68b9      	ldr	r1, [r7, #8]
 800113c:	6978      	ldr	r0, [r7, #20]
 800113e:	f7ff ffb3 	bl	80010a8 <NVIC_EncodePriority>
 8001142:	4602      	mov	r2, r0
 8001144:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff82 	bl	8001054 <__NVIC_SetPriority>
}
 8001150:	bf00      	nop
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff56 	bl	8001018 <__NVIC_EnableIRQ>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e0cf      	b.n	8001326 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800118c:	2b00      	cmp	r3, #0
 800118e:	d106      	bne.n	800119e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2223      	movs	r2, #35	; 0x23
 8001194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f003 fe0d 	bl	8004db8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	4b64      	ldr	r3, [pc, #400]	; (8001330 <HAL_ETH_Init+0x1bc>)
 80011a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011a4:	4a62      	ldr	r2, [pc, #392]	; (8001330 <HAL_ETH_Init+0x1bc>)
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011ae:	4b60      	ldr	r3, [pc, #384]	; (8001330 <HAL_ETH_Init+0x1bc>)
 80011b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7a1b      	ldrb	r3, [r3, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d103      	bne.n	80011cc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff fee1 	bl	8000f8c <HAL_SYSCFG_ETHInterfaceSelect>
 80011ca:	e003      	b.n	80011d4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80011cc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80011d0:	f7ff fedc 	bl	8000f8c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80011d4:	4b57      	ldr	r3, [pc, #348]	; (8001334 <HAL_ETH_Init+0x1c0>)
 80011d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6812      	ldr	r2, [r2, #0]
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011f0:	f7ff feb4 	bl	8000f5c <HAL_GetTick>
 80011f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80011f6:	e011      	b.n	800121c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80011f8:	f7ff feb0 	bl	8000f5c <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001206:	d909      	bls.n	800121c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2204      	movs	r2, #4
 800120c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	22e0      	movs	r2, #224	; 0xe0
 8001214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e084      	b.n	8001326 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1e4      	bne.n	80011f8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 ff28 	bl	8002084 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001234:	f002 fe74 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 8001238:	4603      	mov	r3, r0
 800123a:	4a3f      	ldr	r2, [pc, #252]	; (8001338 <HAL_ETH_Init+0x1c4>)
 800123c:	fba2 2303 	umull	r2, r3, r2, r3
 8001240:	0c9a      	lsrs	r2, r3, #18
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3a01      	subs	r2, #1
 8001248:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f001 f921 	bl	8002494 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800125a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800125e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	6812      	ldr	r2, [r2, #0]
 8001266:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800126a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800126e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d009      	beq.n	8001292 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	22e0      	movs	r2, #224	; 0xe0
 800128a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e049      	b.n	8001326 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800129a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800129e:	4b27      	ldr	r3, [pc, #156]	; (800133c <HAL_ETH_Init+0x1c8>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6952      	ldr	r2, [r2, #20]
 80012a6:	0051      	lsls	r1, r2, #1
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	430b      	orrs	r3, r1
 80012ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012b2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f001 f989 	bl	80025ce <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f001 f9cf 	bl	8002660 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	3305      	adds	r3, #5
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	021a      	lsls	r2, r3, #8
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	3304      	adds	r3, #4
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	3303      	adds	r3, #3
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	061a      	lsls	r2, r3, #24
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	3302      	adds	r3, #2
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	041b      	lsls	r3, r3, #16
 80012f4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	3301      	adds	r3, #1
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001300:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800130e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001310:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2210      	movs	r2, #16
 8001320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	58024400 	.word	0x58024400
 8001334:	58000400 	.word	0x58000400
 8001338:	431bde83 	.word	0x431bde83
 800133c:	ffff8001 	.word	0xffff8001

08001340 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800134e:	2b10      	cmp	r3, #16
 8001350:	d179      	bne.n	8001446 <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2223      	movs	r2, #35	; 0x23
 8001356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b38      	ldr	r3, [pc, #224]	; (8001450 <HAL_ETH_Start_IT+0x110>)
 800136e:	430b      	orrs	r3, r1
 8001370:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b34      	ldr	r3, [pc, #208]	; (8001454 <HAL_ETH_Start_IT+0x114>)
 8001382:	430b      	orrs	r3, r1
 8001384:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2204      	movs	r2, #4
 800138c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f9eb 	bl	800176a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0202 	orr.w	r2, r2, #2
 80013a2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0201 	orr.w	r2, r2, #1
 80013b2:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 0201 	orr.w	r2, r2, #1
 80013c4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013e0:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013fc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001408:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001414:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001418:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001424:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 8001430:	430b      	orrs	r3, r1
 8001432:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001436:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2223      	movs	r2, #35	; 0x23
 800143e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	e000      	b.n	8001448 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
  }
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	0c020060 	.word	0x0c020060
 8001454:	0c20c000 	.word	0x0c20c000

08001458 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001466:	2b23      	cmp	r3, #35	; 0x23
 8001468:	d165      	bne.n	8001536 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2223      	movs	r2, #35	; 0x23
 800146e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800147a:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <HAL_ETH_Stop_IT+0xec>)
 8001484:	400b      	ands	r3, r1
 8001486:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800148a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001496:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014a6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014c2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0201 	bic.w	r2, r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0201 	orr.w	r2, r2, #1
 80014e6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0202 	bic.w	r2, r2, #2
 80014f8:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	e00e      	b.n	800151e <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	3212      	adds	r2, #18
 8001506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150a:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	3301      	adds	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b03      	cmp	r3, #3
 8001522:	d9ed      	bls.n	8001500 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2210      	movs	r2, #16
 800152e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e000      	b.n	8001538 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
  }
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	ffff2f3e 	.word	0xffff2f3e

08001548 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d109      	bne.n	800156c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155e:	f043 0201 	orr.w	r2, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e03a      	b.n	80015e2 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001572:	2b23      	cmp	r3, #35	; 0x23
 8001574:	d134      	bne.n	80015e0 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800157e:	2201      	movs	r2, #1
 8001580:	6839      	ldr	r1, [r7, #0]
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f001 f8ca 	bl	800271c <ETH_Prepare_Tx_Descriptors>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d009      	beq.n	80015a2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001594:	f043 0202 	orr.w	r2, r3, #2
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e01f      	b.n	80015e2 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80015a2:	f3bf 8f4f 	dsb	sy
}
 80015a6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d904      	bls.n	80015c4 <HAL_ETH_Transmit_IT+0x7c>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	1f1a      	subs	r2, r3, #4
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3106      	adds	r1, #6
 80015d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015d8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	e000      	b.n	80015e2 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
  }
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b088      	sub	sp, #32
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d109      	bne.n	8001616 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001608:	f043 0201 	orr.w	r2, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e0a5      	b.n	8001762 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800161c:	2b23      	cmp	r3, #35	; 0x23
 800161e:	d001      	beq.n	8001624 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e09e      	b.n	8001762 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001628:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	3212      	adds	r2, #18
 8001630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001634:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800163a:	f1c3 0304 	rsb	r3, r3, #4
 800163e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001640:	e067      	b.n	8001712 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d007      	beq.n	800165e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d103      	bne.n	8001672 <HAL_ETH_ReadData+0x88>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800166e:	2b00      	cmp	r3, #0
 8001670:	d03d      	beq.n	80016ee <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00d      	beq.n	80016b8 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016c8:	461a      	mov	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	f003 fd55 	bl	800517c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	441a      	add	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3301      	adds	r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d902      	bls.n	8001700 <HAL_ETH_ReadData+0x116>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b04      	subs	r3, #4
 80016fe:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	3212      	adds	r2, #18
 8001706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800170a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	3301      	adds	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001716:	2b00      	cmp	r3, #0
 8001718:	db06      	blt.n	8001728 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	429a      	cmp	r2, r3
 8001720:	d202      	bcs.n	8001728 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d08c      	beq.n	8001642 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	441a      	add	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f814 	bl	800176a <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d108      	bne.n	8001760 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	e000      	b.n	8001762 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
}
 8001762:	4618      	mov	r0, r3
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b088      	sub	sp, #32
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001776:	2301      	movs	r3, #1
 8001778:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800177e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	3212      	adds	r2, #18
 8001786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178a:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001790:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001792:	e03b      	b.n	800180c <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d112      	bne.n	80017c2 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 fcbb 	bl	800511c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	74fb      	strb	r3, [r7, #19]
 80017b0:	e007      	b.n	80017c2 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	461a      	mov	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	461a      	mov	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80017c2:	7cfb      	ldrb	r3, [r7, #19]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d021      	beq.n	800180c <ETH_UpdateDescriptor+0xa2>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80017c8:	f3bf 8f5f 	dmb	sy
}
 80017cc:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d004      	beq.n	80017e0 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	e003      	b.n	80017e8 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 80017e6:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	3301      	adds	r3, #1
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d902      	bls.n	80017fa <ETH_UpdateDescriptor+0x90>
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	3b04      	subs	r3, #4
 80017f8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69fa      	ldr	r2, [r7, #28]
 80017fe:	3212      	adds	r2, #18
 8001800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001804:	617b      	str	r3, [r7, #20]
      desccount--;
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	3b01      	subs	r3, #1
 800180a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <ETH_UpdateDescriptor+0xae>
 8001812:	7cfb      	ldrb	r3, [r7, #19]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1bd      	bne.n	8001794 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	429a      	cmp	r2, r3
 8001820:	d00d      	beq.n	800183e <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800182a:	461a      	mov	r2, r3
 800182c:	2300      	movs	r3, #0
 800182e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800183e:	bf00      	nop
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3318      	adds	r3, #24
 8001852:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001864:	e03f      	b.n	80018e6 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001866:	2301      	movs	r3, #1
 8001868:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3b01      	subs	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	3304      	adds	r3, #4
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d106      	bne.n	800188e <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	3301      	adds	r3, #1
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800188e:	7bbb      	ldrb	r3, [r7, #14]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d028      	beq.n	80018e6 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68d9      	ldr	r1, [r3, #12]
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db1b      	blt.n	80018e2 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	3304      	adds	r3, #4
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 fcc8 	bl	800524c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	3304      	adds	r3, #4
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	2200      	movs	r2, #0
 80018c8:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	3301      	adds	r3, #1
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
 80018e0:	e001      	b.n	80018e6 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <HAL_ETH_ReleaseTxPacket+0xac>
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1b9      	bne.n	8001866 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001914:	2b40      	cmp	r3, #64	; 0x40
 8001916:	d115      	bne.n	8001944 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001920:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001928:	2b40      	cmp	r3, #64	; 0x40
 800192a:	d10b      	bne.n	8001944 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001934:	461a      	mov	r2, r3
 8001936:	f248 0340 	movw	r3, #32832	; 0x8040
 800193a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f002 ffa0 	bl	8004884 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800194c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d115      	bne.n	8001984 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001960:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b01      	cmp	r3, #1
 800196a:	d10b      	bne.n	8001984 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001974:	461a      	mov	r2, r3
 8001976:	f248 0301 	movw	r3, #32769	; 0x8001
 800197a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f002 ff90 	bl	80048a4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800198c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001998:	d153      	bne.n	8001a42 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80019a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019ae:	d148      	bne.n	8001a42 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b6:	f043 0208 	orr.w	r2, r3, #8
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80019cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019d4:	d11e      	bne.n	8001a14 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019de:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80019e2:	f241 1302 	movw	r3, #4354	; 0x1102
 80019e6:	4013      	ands	r3, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a06:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	22e0      	movs	r2, #224	; 0xe0
 8001a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001a12:	e013      	b.n	8001a3c <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001a20:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a32:	461a      	mov	r2, r3
 8001a34:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001a38:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f002 ff41 	bl	80048c4 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001a4a:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d104      	bne.n	8001a60 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d019      	beq.n	8001a94 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a66:	f043 0210 	orr.w	r2, r3, #16
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	22e0      	movs	r2, #224	; 0xe0
 8001a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f002 ff1c 	bl	80048c4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b10      	cmp	r3, #16
 8001aa2:	d10f      	bne.n	8001ac4 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001aac:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f830 	bl	8001b1c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	2b20      	cmp	r3, #32
 8001ad2:	d10f      	bne.n	8001af4 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001adc:	f003 020f 	and.w	r2, r3, #15
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f822 	bl	8001b30 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <HAL_ETH_IRQHandler+0x21c>)
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_ETH_IRQHandler+0x21c>)
 8001b02:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f81b 	bl	8001b44 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	58000080 	.word	0x58000080

08001b1c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e03e      	b.n	8001bf8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b82:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	055b      	lsls	r3, r3, #21
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	041b      	lsls	r3, r3, #16
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f043 030c 	orr.w	r3, r3, #12
 8001ba6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001bba:	f7ff f9cf 	bl	8000f5c <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001bc0:	e009      	b.n	8001bd6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001bc2:	f7ff f9cb 	bl	8000f5c <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bd0:	d901      	bls.n	8001bd6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e010      	b.n	8001bf8 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1ed      	bne.n	8001bc2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e03c      	b.n	8001c9c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c2a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	055b      	lsls	r3, r3, #21
 8001c36:	4313      	orrs	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	041b      	lsls	r3, r3, #16
 8001c44:	4313      	orrs	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f023 030c 	bic.w	r3, r3, #12
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <HAL_ETH_WritePHYRegister+0xa4>)
 8001c62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001c66:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <HAL_ETH_WritePHYRegister+0xa4>)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001c6e:	f7ff f975 	bl	8000f5c <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001c74:	e009      	b.n	8001c8a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001c76:	f7ff f971 	bl	8000f5c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c84:	d901      	bls.n	8001c8a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e008      	b.n	8001c9c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1ed      	bne.n	8001c76 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40028000 	.word	0x40028000

08001ca8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e1c3      	b.n	8002044 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 020c 	and.w	r2, r3, #12
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	bf14      	ite	ne
 8001cd8:	2301      	movne	r3, #1
 8001cda:	2300      	moveq	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	bf0c      	ite	eq
 8001d02:	2301      	moveq	r3, #1
 8001d04:	2300      	movne	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	bf14      	ite	ne
 8001d1e:	2301      	movne	r3, #1
 8001d20:	2300      	moveq	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bf0c      	ite	eq
 8001d38:	2301      	moveq	r3, #1
 8001d3a:	2300      	movne	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf14      	ite	ne
 8001d6c:	2301      	movne	r3, #1
 8001d6e:	2300      	moveq	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	bf14      	ite	ne
 8001da2:	2301      	movne	r3, #1
 8001da4:	2300      	moveq	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf0c      	ite	eq
 8001dd6:	2301      	moveq	r3, #1
 8001dd8:	2300      	movne	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf14      	ite	ne
 8001df0:	2301      	movne	r3, #1
 8001df2:	2300      	moveq	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf14      	ite	ne
 8001e0a:	2301      	movne	r3, #1
 8001e0c:	2300      	moveq	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf14      	ite	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	2300      	moveq	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001e36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bf14      	ite	ne
 8001e3e:	2301      	movne	r3, #1
 8001e40:	2300      	moveq	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf14      	ite	ne
 8001e66:	2301      	movne	r3, #1
 8001e68:	2300      	moveq	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf14      	ite	ne
 8001eb8:	2301      	movne	r3, #1
 8001eba:	2300      	moveq	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8001ecc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf14      	ite	ne
 8001ed4:	2301      	movne	r3, #1
 8001ed6:	2300      	moveq	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bf14      	ite	ne
 8001ef0:	2301      	movne	r3, #1
 8001ef2:	2300      	moveq	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	0e5b      	lsrs	r3, r3, #25
 8001f06:	f003 021f 	and.w	r2, r3, #31
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf14      	ite	ne
 8001f1c:	2301      	movne	r3, #1
 8001f1e:	2300      	moveq	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 020f 	and.w	r2, r3, #15
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	bf14      	ite	ne
 8001f46:	2301      	movne	r3, #1
 8001f48:	2300      	moveq	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bf0c      	ite	eq
 8001f62:	2301      	moveq	r3, #1
 8001f64:	2300      	movne	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	0c1b      	lsrs	r3, r3, #16
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bf14      	ite	ne
 8001f9c:	2301      	movne	r3, #1
 8001f9e:	2300      	moveq	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	bf14      	ite	ne
 8001fba:	2301      	movne	r3, #1
 8001fbc:	2300      	moveq	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001fd0:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001fe0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf14      	ite	ne
 8001ff8:	2301      	movne	r3, #1
 8001ffa:	2300      	moveq	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	2b00      	cmp	r3, #0
 8002014:	bf14      	ite	ne
 8002016:	2301      	movne	r3, #1
 8002018:	2300      	moveq	r3, #0
 800201a:	b2db      	uxtb	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002030:	2b00      	cmp	r3, #0
 8002032:	bf0c      	ite	eq
 8002034:	2301      	moveq	r3, #1
 8002036:	2300      	movne	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e00b      	b.n	800207c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800206a:	2b10      	cmp	r3, #16
 800206c:	d105      	bne.n	800207a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800206e:	6839      	ldr	r1, [r7, #0]
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f86d 	bl	8002150 <ETH_SetMACConfig>

    return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e000      	b.n	800207c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
  }
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002094:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800209c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800209e:	f001 ff3f 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 80020a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4a1e      	ldr	r2, [pc, #120]	; (8002120 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d908      	bls.n	80020be <HAL_ETH_SetMDIOClockRange+0x3a>
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d804      	bhi.n	80020be <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	e027      	b.n	800210e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	4a18      	ldr	r2, [pc, #96]	; (8002124 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d908      	bls.n	80020d8 <HAL_ETH_SetMDIOClockRange+0x54>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4a17      	ldr	r2, [pc, #92]	; (8002128 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d204      	bcs.n	80020d8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	e01a      	b.n	800210e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4a13      	ldr	r2, [pc, #76]	; (8002128 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d303      	bcc.n	80020e8 <HAL_ETH_SetMDIOClockRange+0x64>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d911      	bls.n	800210c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4a10      	ldr	r2, [pc, #64]	; (800212c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d908      	bls.n	8002102 <HAL_ETH_SetMDIOClockRange+0x7e>
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4a0f      	ldr	r2, [pc, #60]	; (8002130 <HAL_ETH_SetMDIOClockRange+0xac>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d804      	bhi.n	8002102 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	e005      	b.n	800210e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	e000      	b.n	800210e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800210c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	01312cff 	.word	0x01312cff
 8002124:	02160ebf 	.word	0x02160ebf
 8002128:	03938700 	.word	0x03938700
 800212c:	05f5e0ff 	.word	0x05f5e0ff
 8002130:	08f0d17f 	.word	0x08f0d17f

08002134 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002162:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	791b      	ldrb	r3, [r3, #4]
 8002168:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800216a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	7b1b      	ldrb	r3, [r3, #12]
 8002170:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002172:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	7b5b      	ldrb	r3, [r3, #13]
 8002178:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800217a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	7b9b      	ldrb	r3, [r3, #14]
 8002180:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002182:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	7bdb      	ldrb	r3, [r3, #15]
 8002188:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800218a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	7c12      	ldrb	r2, [r2, #16]
 8002190:	2a00      	cmp	r2, #0
 8002192:	d102      	bne.n	800219a <ETH_SetMACConfig+0x4a>
 8002194:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002198:	e000      	b.n	800219c <ETH_SetMACConfig+0x4c>
 800219a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800219c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	7c52      	ldrb	r2, [r2, #17]
 80021a2:	2a00      	cmp	r2, #0
 80021a4:	d102      	bne.n	80021ac <ETH_SetMACConfig+0x5c>
 80021a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021aa:	e000      	b.n	80021ae <ETH_SetMACConfig+0x5e>
 80021ac:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80021ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	7c9b      	ldrb	r3, [r3, #18]
 80021b4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80021b6:	431a      	orrs	r2, r3
               macconf->Speed |
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80021bc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80021c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	7f1b      	ldrb	r3, [r3, #28]
 80021c8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80021ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	7f5b      	ldrb	r3, [r3, #29]
 80021d0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80021d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	7f92      	ldrb	r2, [r2, #30]
 80021d8:	2a00      	cmp	r2, #0
 80021da:	d102      	bne.n	80021e2 <ETH_SetMACConfig+0x92>
 80021dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e0:	e000      	b.n	80021e4 <ETH_SetMACConfig+0x94>
 80021e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80021e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	7fdb      	ldrb	r3, [r3, #31]
 80021ea:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80021ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80021f4:	2a00      	cmp	r2, #0
 80021f6:	d102      	bne.n	80021fe <ETH_SetMACConfig+0xae>
 80021f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021fc:	e000      	b.n	8002200 <ETH_SetMACConfig+0xb0>
 80021fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002200:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002206:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800220e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002210:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b56      	ldr	r3, [pc, #344]	; (800237c <ETH_SetMACConfig+0x22c>)
 8002222:	4013      	ands	r3, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	68f9      	ldr	r1, [r7, #12]
 800222a:	430b      	orrs	r3, r1
 800222c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002232:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800223a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800223c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002244:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002246:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800224e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002250:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002258:	2a00      	cmp	r2, #0
 800225a:	d102      	bne.n	8002262 <ETH_SetMACConfig+0x112>
 800225c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002260:	e000      	b.n	8002264 <ETH_SetMACConfig+0x114>
 8002262:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002264:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800226a:	4313      	orrs	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4b42      	ldr	r3, [pc, #264]	; (8002380 <ETH_SetMACConfig+0x230>)
 8002276:	4013      	ands	r3, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	68f9      	ldr	r1, [r7, #12]
 800227e:	430b      	orrs	r3, r1
 8002280:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002288:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	4b3a      	ldr	r3, [pc, #232]	; (8002384 <ETH_SetMACConfig+0x234>)
 800229a:	4013      	ands	r3, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	68f9      	ldr	r1, [r7, #12]
 80022a2:	430b      	orrs	r3, r1
 80022a4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80022ac:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80022ba:	2a00      	cmp	r2, #0
 80022bc:	d101      	bne.n	80022c2 <ETH_SetMACConfig+0x172>
 80022be:	2280      	movs	r2, #128	; 0x80
 80022c0:	e000      	b.n	80022c4 <ETH_SetMACConfig+0x174>
 80022c2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80022c4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ca:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022d6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80022da:	4013      	ands	r3, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	68f9      	ldr	r1, [r7, #12]
 80022e2:	430b      	orrs	r3, r1
 80022e4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80022ec:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80022f4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	f023 0103 	bic.w	r1, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	430a      	orrs	r2, r1
 800230e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800231a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002336:	2a00      	cmp	r2, #0
 8002338:	d101      	bne.n	800233e <ETH_SetMACConfig+0x1ee>
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	e000      	b.n	8002340 <ETH_SetMACConfig+0x1f0>
 800233e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002340:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002348:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800234a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002352:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002354:	4313      	orrs	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002360:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	430a      	orrs	r2, r1
 800236c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	00048083 	.word	0x00048083
 8002380:	c0f88000 	.word	0xc0f88000
 8002384:	fffffef0 	.word	0xfffffef0

08002388 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b38      	ldr	r3, [pc, #224]	; (8002480 <ETH_SetDMAConfig+0xf8>)
 800239e:	4013      	ands	r3, r2
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	6811      	ldr	r1, [r2, #0]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	430b      	orrs	r3, r1
 80023aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023ae:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	791b      	ldrb	r3, [r3, #4]
 80023b4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023ba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	7b1b      	ldrb	r3, [r3, #12]
 80023c0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	4b2c      	ldr	r3, [pc, #176]	; (8002484 <ETH_SetDMAConfig+0xfc>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	68f9      	ldr	r1, [r7, #12]
 80023da:	430b      	orrs	r3, r1
 80023dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023e0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	7b5b      	ldrb	r3, [r3, #13]
 80023e6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80023fc:	4b22      	ldr	r3, [pc, #136]	; (8002488 <ETH_SetDMAConfig+0x100>)
 80023fe:	4013      	ands	r3, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	68f9      	ldr	r1, [r7, #12]
 8002406:	430b      	orrs	r3, r1
 8002408:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800240c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	7d1b      	ldrb	r3, [r3, #20]
 8002418:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800241a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	7f5b      	ldrb	r3, [r3, #29]
 8002420:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <ETH_SetDMAConfig+0x104>)
 8002434:	4013      	ands	r3, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	68f9      	ldr	r1, [r7, #12]
 800243c:	430b      	orrs	r3, r1
 800243e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002442:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	7f1b      	ldrb	r3, [r3, #28]
 800244a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002450:	4313      	orrs	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <ETH_SetDMAConfig+0x108>)
 8002462:	4013      	ands	r3, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	68f9      	ldr	r1, [r7, #12]
 800246a:	430b      	orrs	r3, r1
 800246c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002470:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	ffff87fd 	.word	0xffff87fd
 8002484:	ffff2ffe 	.word	0xffff2ffe
 8002488:	fffec000 	.word	0xfffec000
 800248c:	ffc0efef 	.word	0xffc0efef
 8002490:	7fc0ffff 	.word	0x7fc0ffff

08002494 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b0a4      	sub	sp, #144	; 0x90
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800249c:	2301      	movs	r3, #1
 800249e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024a2:	2300      	movs	r3, #0
 80024a4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80024b2:	2301      	movs	r3, #1
 80024b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80024b8:	2301      	movs	r3, #1
 80024ba:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80024be:	2301      	movs	r3, #1
 80024c0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024d4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80024dc:	2300      	movs	r3, #0
 80024de:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80024ec:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80024f0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80024f8:	2300      	movs	r3, #0
 80024fa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800250e:	2300      	movs	r3, #0
 8002510:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002512:	2300      	movs	r3, #0
 8002514:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002516:	2300      	movs	r3, #0
 8002518:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002526:	2301      	movs	r3, #1
 8002528:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800252c:	2320      	movs	r3, #32
 800252e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002532:	2301      	movs	r3, #1
 8002534:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800253e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002544:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002548:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800254a:	2300      	movs	r3, #0
 800254c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002550:	2302      	movs	r3, #2
 8002552:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002568:	2301      	movs	r3, #1
 800256a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800256e:	2300      	movs	r3, #0
 8002570:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002572:	2301      	movs	r3, #1
 8002574:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002578:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800257c:	4619      	mov	r1, r3
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff fde6 	bl	8002150 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002584:	2301      	movs	r3, #1
 8002586:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002588:	2301      	movs	r3, #1
 800258a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800259e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025ac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80025b4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	4619      	mov	r1, r3
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff fee1 	bl	8002388 <ETH_SetDMAConfig>
}
 80025c6:	bf00      	nop
 80025c8:	3790      	adds	r7, #144	; 0x90
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b085      	sub	sp, #20
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	e01d      	b.n	8002618 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68d9      	ldr	r1, [r3, #12]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2200      	movs	r2, #0
 80025f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	3206      	adds	r2, #6
 800260e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3301      	adds	r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b03      	cmp	r3, #3
 800261c:	d9de      	bls.n	80025dc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262c:	461a      	mov	r2, r3
 800262e:	2303      	movs	r3, #3
 8002630:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002640:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002650:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	e023      	b.n	80026b6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6919      	ldr	r1, [r3, #16]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	440b      	add	r3, r1
 800267e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2200      	movs	r2, #0
 800268a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2200      	movs	r2, #0
 8002696:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2200      	movs	r2, #0
 80026a2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	3212      	adds	r2, #18
 80026ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3301      	adds	r3, #1
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d9d8      	bls.n	800266e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e2:	461a      	mov	r2, r3
 80026e4:	2303      	movs	r3, #3
 80026e6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800270a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800271c:	b480      	push	{r7}
 800271e:	b08d      	sub	sp, #52	; 0x34
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	3318      	adds	r3, #24
 800272c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002746:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800275a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800275e:	d007      	beq.n	8002770 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	3304      	adds	r3, #4
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002770:	2302      	movs	r3, #2
 8002772:	e259      	b.n	8002c28 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d044      	beq.n	800280a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	4b75      	ldr	r3, [pc, #468]	; (800295c <ETH_Prepare_Tx_Descriptors+0x240>)
 8002786:	4013      	ands	r3, r2
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800278c:	431a      	orrs	r2, r3
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80027ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d027      	beq.n	800280a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	041b      	lsls	r3, r3, #16
 80027c6:	431a      	orrs	r2, r3
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	431a      	orrs	r2, r3
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80027f8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002808:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00e      	beq.n	8002834 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	4b51      	ldr	r3, [pc, #324]	; (8002960 <ETH_Prepare_Tx_Descriptors+0x244>)
 800281c:	4013      	ands	r3, r2
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	6992      	ldr	r2, [r2, #24]
 8002822:	431a      	orrs	r2, r3
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b00      	cmp	r3, #0
 800284a:	d036      	beq.n	80028ba <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002858:	f3bf 8f5f 	dmb	sy
}
 800285c:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800286a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286c:	3301      	adds	r3, #1
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002872:	2b03      	cmp	r3, #3
 8002874:	d902      	bls.n	800287c <ETH_Prepare_Tx_Descriptors+0x160>
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002878:	3b04      	subs	r3, #4
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002884:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	3301      	adds	r3, #1
 800288a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002898:	d10f      	bne.n	80028ba <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 80028a4:	f3bf 8f5f 	dmb	sy
}
 80028a8:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80028b6:	2302      	movs	r3, #2
 80028b8:	e1b6      	b.n	8002c28 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	3301      	adds	r3, #1
 80028be:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	4b24      	ldr	r3, [pc, #144]	; (8002960 <ETH_Prepare_Tx_Descriptors+0x244>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	6852      	ldr	r2, [r2, #4]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d012      	beq.n	800290a <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <ETH_Prepare_Tx_Descriptors+0x248>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	6852      	ldr	r2, [r2, #4]
 8002900:	0412      	lsls	r2, r2, #16
 8002902:	431a      	orrs	r2, r3
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	e008      	b.n	800291c <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	2200      	movs	r2, #0
 800290e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002916:	4013      	ands	r3, r2
 8002918:	6a3a      	ldr	r2, [r7, #32]
 800291a:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b00      	cmp	r3, #0
 8002926:	d021      	beq.n	800296c <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	04db      	lsls	r3, r3, #19
 8002936:	431a      	orrs	r2, r3
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	4b09      	ldr	r3, [pc, #36]	; (8002968 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002942:	4013      	ands	r3, r2
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	69d2      	ldr	r2, [r2, #28]
 8002948:	431a      	orrs	r2, r3
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	e02e      	b.n	80029ba <ETH_Prepare_Tx_Descriptors+0x29e>
 800295c:	ffff0000 	.word	0xffff0000
 8002960:	ffffc000 	.word	0xffffc000
 8002964:	c000ffff 	.word	0xc000ffff
 8002968:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	4b7b      	ldr	r3, [pc, #492]	; (8002b60 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002972:	4013      	ands	r3, r2
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	6852      	ldr	r2, [r2, #4]
 8002978:	431a      	orrs	r2, r3
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d008      	beq.n	800299c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	431a      	orrs	r2, r3
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	431a      	orrs	r2, r3
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80029f0:	f3bf 8f5f 	dmb	sy
}
 80029f4:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 80da 	beq.w	8002bc4 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002a22:	e0cf      	b.n	8002bc4 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	3301      	adds	r3, #1
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d902      	bls.n	8002a42 <ETH_Prepare_Tx_Descriptors+0x326>
 8002a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3e:	3b04      	subs	r3, #4
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a4a:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a64:	d007      	beq.n	8002a76 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d029      	beq.n	8002aca <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a82:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002a84:	2300      	movs	r3, #0
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a88:	e019      	b.n	8002abe <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002a8a:	f3bf 8f5f 	dmb	sy
}
 8002a8e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d902      	bls.n	8002aae <ETH_Prepare_Tx_Descriptors+0x392>
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	3b04      	subs	r3, #4
 8002aac:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab6:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	3301      	adds	r3, #1
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d3e1      	bcc.n	8002a8a <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e0ae      	b.n	8002c28 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	3301      	adds	r3, #1
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <ETH_Prepare_Tx_Descriptors+0x448>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	6852      	ldr	r2, [r2, #4]
 8002aec:	431a      	orrs	r2, r3
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d012      	beq.n	8002b20 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	6852      	ldr	r2, [r2, #4]
 8002b16:	0412      	lsls	r2, r2, #16
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	e008      	b.n	8002b32 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	2200      	movs	r2, #0
 8002b24:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	6a3a      	ldr	r2, [r7, #32]
 8002b30:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d018      	beq.n	8002b70 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <ETH_Prepare_Tx_Descriptors+0x450>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	69d2      	ldr	r2, [r2, #28]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	60da      	str	r2, [r3, #12]
 8002b5c:	e020      	b.n	8002ba0 <ETH_Prepare_Tx_Descriptors+0x484>
 8002b5e:	bf00      	nop
 8002b60:	ffff8000 	.word	0xffff8000
 8002b64:	ffffc000 	.word	0xffffc000
 8002b68:	c000ffff 	.word	0xc000ffff
 8002b6c:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	4b2f      	ldr	r3, [pc, #188]	; (8002c34 <ETH_Prepare_Tx_Descriptors+0x518>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	6852      	ldr	r2, [r2, #4]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ba6:	f3bf 8f5f 	dmb	sy
}
 8002baa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f47f af2b 	bne.w	8002a24 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d006      	beq.n	8002be2 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	e005      	b.n	8002bee <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bfe:	6979      	ldr	r1, [r7, #20]
 8002c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c02:	3304      	adds	r3, #4
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c0e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c10:	b672      	cpsid	i
}
 8002c12:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002c22:	b662      	cpsie	i
}
 8002c24:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3734      	adds	r7, #52	; 0x34
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	ffff8000 	.word	0xffff8000

08002c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b089      	sub	sp, #36	; 0x24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c46:	4b89      	ldr	r3, [pc, #548]	; (8002e6c <HAL_GPIO_Init+0x234>)
 8002c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c4a:	e194      	b.n	8002f76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	2101      	movs	r1, #1
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 8186 	beq.w	8002f70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d005      	beq.n	8002c7c <HAL_GPIO_Init+0x44>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d130      	bne.n	8002cde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	2203      	movs	r2, #3
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	f003 0201 	and.w	r2, r3, #1
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d017      	beq.n	8002d1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d123      	bne.n	8002d6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	08da      	lsrs	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3208      	adds	r2, #8
 8002d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	220f      	movs	r2, #15
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	08da      	lsrs	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3208      	adds	r2, #8
 8002d68:	69b9      	ldr	r1, [r7, #24]
 8002d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	2203      	movs	r2, #3
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0203 	and.w	r2, r3, #3
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80e0 	beq.w	8002f70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db0:	4b2f      	ldr	r3, [pc, #188]	; (8002e70 <HAL_GPIO_Init+0x238>)
 8002db2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002db6:	4a2e      	ldr	r2, [pc, #184]	; (8002e70 <HAL_GPIO_Init+0x238>)
 8002db8:	f043 0302 	orr.w	r3, r3, #2
 8002dbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002dc0:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <HAL_GPIO_Init+0x238>)
 8002dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dce:	4a29      	ldr	r2, [pc, #164]	; (8002e74 <HAL_GPIO_Init+0x23c>)
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	089b      	lsrs	r3, r3, #2
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	220f      	movs	r2, #15
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a20      	ldr	r2, [pc, #128]	; (8002e78 <HAL_GPIO_Init+0x240>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d052      	beq.n	8002ea0 <HAL_GPIO_Init+0x268>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a1f      	ldr	r2, [pc, #124]	; (8002e7c <HAL_GPIO_Init+0x244>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d031      	beq.n	8002e66 <HAL_GPIO_Init+0x22e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a1e      	ldr	r2, [pc, #120]	; (8002e80 <HAL_GPIO_Init+0x248>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02b      	beq.n	8002e62 <HAL_GPIO_Init+0x22a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <HAL_GPIO_Init+0x24c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d025      	beq.n	8002e5e <HAL_GPIO_Init+0x226>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a1c      	ldr	r2, [pc, #112]	; (8002e88 <HAL_GPIO_Init+0x250>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01f      	beq.n	8002e5a <HAL_GPIO_Init+0x222>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <HAL_GPIO_Init+0x254>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d019      	beq.n	8002e56 <HAL_GPIO_Init+0x21e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <HAL_GPIO_Init+0x258>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_GPIO_Init+0x21a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a19      	ldr	r2, [pc, #100]	; (8002e94 <HAL_GPIO_Init+0x25c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00d      	beq.n	8002e4e <HAL_GPIO_Init+0x216>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <HAL_GPIO_Init+0x260>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <HAL_GPIO_Init+0x212>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <HAL_GPIO_Init+0x264>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_GPIO_Init+0x20e>
 8002e42:	2309      	movs	r3, #9
 8002e44:	e02d      	b.n	8002ea2 <HAL_GPIO_Init+0x26a>
 8002e46:	230a      	movs	r3, #10
 8002e48:	e02b      	b.n	8002ea2 <HAL_GPIO_Init+0x26a>
 8002e4a:	2308      	movs	r3, #8
 8002e4c:	e029      	b.n	8002ea2 <HAL_GPIO_Init+0x26a>
 8002e4e:	2307      	movs	r3, #7
 8002e50:	e027      	b.n	8002ea2 <HAL_GPIO_Init+0x26a>
 8002e52:	2306      	movs	r3, #6
 8002e54:	e025      	b.n	8002ea2 <HAL_GPIO_Init+0x26a>
 8002e56:	2305      	movs	r3, #5
 8002e58:	e023      	b.n	8002ea2 <HAL_GPIO_Init+0x26a>
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	e021      	b.n	8002ea2 <HAL_GPIO_Init+0x26a>
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e01f      	b.n	8002ea2 <HAL_GPIO_Init+0x26a>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e01d      	b.n	8002ea2 <HAL_GPIO_Init+0x26a>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e01b      	b.n	8002ea2 <HAL_GPIO_Init+0x26a>
 8002e6a:	bf00      	nop
 8002e6c:	58000080 	.word	0x58000080
 8002e70:	58024400 	.word	0x58024400
 8002e74:	58000400 	.word	0x58000400
 8002e78:	58020000 	.word	0x58020000
 8002e7c:	58020400 	.word	0x58020400
 8002e80:	58020800 	.word	0x58020800
 8002e84:	58020c00 	.word	0x58020c00
 8002e88:	58021000 	.word	0x58021000
 8002e8c:	58021400 	.word	0x58021400
 8002e90:	58021800 	.word	0x58021800
 8002e94:	58021c00 	.word	0x58021c00
 8002e98:	58022000 	.word	0x58022000
 8002e9c:	58022400 	.word	0x58022400
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	f002 0203 	and.w	r2, r2, #3
 8002ea8:	0092      	lsls	r2, r2, #2
 8002eaa:	4093      	lsls	r3, r2
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eb2:	4938      	ldr	r1, [pc, #224]	; (8002f94 <HAL_GPIO_Init+0x35c>)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3302      	adds	r3, #2
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	3301      	adds	r3, #1
 8002f74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f47f ae63 	bne.w	8002c4c <HAL_GPIO_Init+0x14>
  }
}
 8002f86:	bf00      	nop
 8002f88:	bf00      	nop
 8002f8a:	3724      	adds	r7, #36	; 0x24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	58000400 	.word	0x58000400

08002f98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002fa0:	4b19      	ldr	r3, [pc, #100]	; (8003008 <HAL_PWREx_ConfigSupply+0x70>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d00a      	beq.n	8002fc2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002fac:	4b16      	ldr	r3, [pc, #88]	; (8003008 <HAL_PWREx_ConfigSupply+0x70>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d001      	beq.n	8002fbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e01f      	b.n	8002ffe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e01d      	b.n	8002ffe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <HAL_PWREx_ConfigSupply+0x70>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f023 0207 	bic.w	r2, r3, #7
 8002fca:	490f      	ldr	r1, [pc, #60]	; (8003008 <HAL_PWREx_ConfigSupply+0x70>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002fd2:	f7fd ffc3 	bl	8000f5c <HAL_GetTick>
 8002fd6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fd8:	e009      	b.n	8002fee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002fda:	f7fd ffbf 	bl	8000f5c <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fe8:	d901      	bls.n	8002fee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e007      	b.n	8002ffe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_PWREx_ConfigSupply+0x70>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffa:	d1ee      	bne.n	8002fda <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	58024800 	.word	0x58024800

0800300c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08c      	sub	sp, #48	; 0x30
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d102      	bne.n	8003020 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	f000 bc48 	b.w	80038b0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8088 	beq.w	800313e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800302e:	4b99      	ldr	r3, [pc, #612]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003038:	4b96      	ldr	r3, [pc, #600]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003040:	2b10      	cmp	r3, #16
 8003042:	d007      	beq.n	8003054 <HAL_RCC_OscConfig+0x48>
 8003044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003046:	2b18      	cmp	r3, #24
 8003048:	d111      	bne.n	800306e <HAL_RCC_OscConfig+0x62>
 800304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d10c      	bne.n	800306e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003054:	4b8f      	ldr	r3, [pc, #572]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d06d      	beq.n	800313c <HAL_RCC_OscConfig+0x130>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d169      	bne.n	800313c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	f000 bc21 	b.w	80038b0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003076:	d106      	bne.n	8003086 <HAL_RCC_OscConfig+0x7a>
 8003078:	4b86      	ldr	r3, [pc, #536]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a85      	ldr	r2, [pc, #532]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 800307e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	e02e      	b.n	80030e4 <HAL_RCC_OscConfig+0xd8>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10c      	bne.n	80030a8 <HAL_RCC_OscConfig+0x9c>
 800308e:	4b81      	ldr	r3, [pc, #516]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a80      	ldr	r2, [pc, #512]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 8003094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	4b7e      	ldr	r3, [pc, #504]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a7d      	ldr	r2, [pc, #500]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 80030a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	e01d      	b.n	80030e4 <HAL_RCC_OscConfig+0xd8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0xc0>
 80030b2:	4b78      	ldr	r3, [pc, #480]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a77      	ldr	r2, [pc, #476]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 80030b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b75      	ldr	r3, [pc, #468]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a74      	ldr	r2, [pc, #464]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e00b      	b.n	80030e4 <HAL_RCC_OscConfig+0xd8>
 80030cc:	4b71      	ldr	r3, [pc, #452]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a70      	ldr	r2, [pc, #448]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 80030d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	4b6e      	ldr	r3, [pc, #440]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a6d      	ldr	r2, [pc, #436]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 80030de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d013      	beq.n	8003114 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fd ff36 	bl	8000f5c <HAL_GetTick>
 80030f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f4:	f7fd ff32 	bl	8000f5c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e3d4      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003106:	4b63      	ldr	r3, [pc, #396]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0xe8>
 8003112:	e014      	b.n	800313e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fd ff22 	bl	8000f5c <HAL_GetTick>
 8003118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800311c:	f7fd ff1e 	bl	8000f5c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	; 0x64
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e3c0      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800312e:	4b59      	ldr	r3, [pc, #356]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x110>
 800313a:	e000      	b.n	800313e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 80ca 	beq.w	80032e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800314c:	4b51      	ldr	r3, [pc, #324]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003154:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003156:	4b4f      	ldr	r3, [pc, #316]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_RCC_OscConfig+0x166>
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	2b18      	cmp	r3, #24
 8003166:	d156      	bne.n	8003216 <HAL_RCC_OscConfig+0x20a>
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d151      	bne.n	8003216 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003172:	4b48      	ldr	r3, [pc, #288]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_RCC_OscConfig+0x17e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e392      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800318a:	4b42      	ldr	r3, [pc, #264]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 0219 	bic.w	r2, r3, #25
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	493f      	ldr	r1, [pc, #252]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 8003198:	4313      	orrs	r3, r2
 800319a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fd fede 	bl	8000f5c <HAL_GetTick>
 80031a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a4:	f7fd feda 	bl	8000f5c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e37c      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031b6:	4b37      	ldr	r3, [pc, #220]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c2:	f7fd fed7 	bl	8000f74 <HAL_GetREVID>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d817      	bhi.n	8003200 <HAL_RCC_OscConfig+0x1f4>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d108      	bne.n	80031ea <HAL_RCC_OscConfig+0x1de>
 80031d8:	4b2e      	ldr	r3, [pc, #184]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80031e0:	4a2c      	ldr	r2, [pc, #176]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 80031e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031e8:	e07a      	b.n	80032e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ea:	4b2a      	ldr	r3, [pc, #168]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	031b      	lsls	r3, r3, #12
 80031f8:	4926      	ldr	r1, [pc, #152]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031fe:	e06f      	b.n	80032e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003200:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	061b      	lsls	r3, r3, #24
 800320e:	4921      	ldr	r1, [pc, #132]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003214:	e064      	b.n	80032e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d047      	beq.n	80032ae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800321e:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 0219 	bic.w	r2, r3, #25
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	491a      	ldr	r1, [pc, #104]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 800322c:	4313      	orrs	r3, r2
 800322e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fd fe94 	bl	8000f5c <HAL_GetTick>
 8003234:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003238:	f7fd fe90 	bl	8000f5c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e332      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800324a:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003256:	f7fd fe8d 	bl	8000f74 <HAL_GetREVID>
 800325a:	4603      	mov	r3, r0
 800325c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003260:	4293      	cmp	r3, r2
 8003262:	d819      	bhi.n	8003298 <HAL_RCC_OscConfig+0x28c>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b40      	cmp	r3, #64	; 0x40
 800326a:	d108      	bne.n	800327e <HAL_RCC_OscConfig+0x272>
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003274:	4a07      	ldr	r2, [pc, #28]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 8003276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800327a:	6053      	str	r3, [r2, #4]
 800327c:	e030      	b.n	80032e0 <HAL_RCC_OscConfig+0x2d4>
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	031b      	lsls	r3, r3, #12
 800328c:	4901      	ldr	r1, [pc, #4]	; (8003294 <HAL_RCC_OscConfig+0x288>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
 8003292:	e025      	b.n	80032e0 <HAL_RCC_OscConfig+0x2d4>
 8003294:	58024400 	.word	0x58024400
 8003298:	4b9a      	ldr	r3, [pc, #616]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	061b      	lsls	r3, r3, #24
 80032a6:	4997      	ldr	r1, [pc, #604]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]
 80032ac:	e018      	b.n	80032e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ae:	4b95      	ldr	r3, [pc, #596]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a94      	ldr	r2, [pc, #592]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fd fe4f 	bl	8000f5c <HAL_GetTick>
 80032be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fd fe4b 	bl	8000f5c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e2ed      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032d4:	4b8b      	ldr	r3, [pc, #556]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f0      	bne.n	80032c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80a9 	beq.w	8003440 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ee:	4b85      	ldr	r3, [pc, #532]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032f8:	4b82      	ldr	r3, [pc, #520]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d007      	beq.n	8003314 <HAL_RCC_OscConfig+0x308>
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b18      	cmp	r3, #24
 8003308:	d13a      	bne.n	8003380 <HAL_RCC_OscConfig+0x374>
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b01      	cmp	r3, #1
 8003312:	d135      	bne.n	8003380 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003314:	4b7b      	ldr	r3, [pc, #492]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_OscConfig+0x320>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	2b80      	cmp	r3, #128	; 0x80
 8003326:	d001      	beq.n	800332c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e2c1      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800332c:	f7fd fe22 	bl	8000f74 <HAL_GetREVID>
 8003330:	4603      	mov	r3, r0
 8003332:	f241 0203 	movw	r2, #4099	; 0x1003
 8003336:	4293      	cmp	r3, r2
 8003338:	d817      	bhi.n	800336a <HAL_RCC_OscConfig+0x35e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	2b20      	cmp	r3, #32
 8003340:	d108      	bne.n	8003354 <HAL_RCC_OscConfig+0x348>
 8003342:	4b70      	ldr	r3, [pc, #448]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800334a:	4a6e      	ldr	r2, [pc, #440]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 800334c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003350:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003352:	e075      	b.n	8003440 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003354:	4b6b      	ldr	r3, [pc, #428]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	069b      	lsls	r3, r3, #26
 8003362:	4968      	ldr	r1, [pc, #416]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003368:	e06a      	b.n	8003440 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800336a:	4b66      	ldr	r3, [pc, #408]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	061b      	lsls	r3, r3, #24
 8003378:	4962      	ldr	r1, [pc, #392]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 800337a:	4313      	orrs	r3, r2
 800337c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800337e:	e05f      	b.n	8003440 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d042      	beq.n	800340e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003388:	4b5e      	ldr	r3, [pc, #376]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a5d      	ldr	r2, [pc, #372]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 800338e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fd fde2 	bl	8000f5c <HAL_GetTick>
 8003398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800339c:	f7fd fdde 	bl	8000f5c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e280      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033ae:	4b55      	ldr	r3, [pc, #340]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033ba:	f7fd fddb 	bl	8000f74 <HAL_GetREVID>
 80033be:	4603      	mov	r3, r0
 80033c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d817      	bhi.n	80033f8 <HAL_RCC_OscConfig+0x3ec>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	d108      	bne.n	80033e2 <HAL_RCC_OscConfig+0x3d6>
 80033d0:	4b4c      	ldr	r3, [pc, #304]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80033d8:	4a4a      	ldr	r2, [pc, #296]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80033da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033de:	6053      	str	r3, [r2, #4]
 80033e0:	e02e      	b.n	8003440 <HAL_RCC_OscConfig+0x434>
 80033e2:	4b48      	ldr	r3, [pc, #288]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	069b      	lsls	r3, r3, #26
 80033f0:	4944      	ldr	r1, [pc, #272]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]
 80033f6:	e023      	b.n	8003440 <HAL_RCC_OscConfig+0x434>
 80033f8:	4b42      	ldr	r3, [pc, #264]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	061b      	lsls	r3, r3, #24
 8003406:	493f      	ldr	r1, [pc, #252]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 8003408:	4313      	orrs	r3, r2
 800340a:	60cb      	str	r3, [r1, #12]
 800340c:	e018      	b.n	8003440 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800340e:	4b3d      	ldr	r3, [pc, #244]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a3c      	ldr	r2, [pc, #240]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 8003414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341a:	f7fd fd9f 	bl	8000f5c <HAL_GetTick>
 800341e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003422:	f7fd fd9b 	bl	8000f5c <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e23d      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003434:	4b33      	ldr	r3, [pc, #204]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1f0      	bne.n	8003422 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d036      	beq.n	80034ba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d019      	beq.n	8003488 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003454:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 8003456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003458:	4a2a      	ldr	r2, [pc, #168]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003460:	f7fd fd7c 	bl	8000f5c <HAL_GetTick>
 8003464:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003468:	f7fd fd78 	bl	8000f5c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e21a      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800347a:	4b22      	ldr	r3, [pc, #136]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 800347c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x45c>
 8003486:	e018      	b.n	80034ba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003488:	4b1e      	ldr	r3, [pc, #120]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 800348a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348c:	4a1d      	ldr	r2, [pc, #116]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 800348e:	f023 0301 	bic.w	r3, r3, #1
 8003492:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003494:	f7fd fd62 	bl	8000f5c <HAL_GetTick>
 8003498:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800349c:	f7fd fd5e 	bl	8000f5c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e200      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80034b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d039      	beq.n	800353a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d01c      	beq.n	8003508 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034ce:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a0c      	ldr	r2, [pc, #48]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80034d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034da:	f7fd fd3f 	bl	8000f5c <HAL_GetTick>
 80034de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034e2:	f7fd fd3b 	bl	8000f5c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e1dd      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x4d6>
 8003500:	e01b      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
 8003502:	bf00      	nop
 8003504:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003508:	4b9b      	ldr	r3, [pc, #620]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a9a      	ldr	r2, [pc, #616]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 800350e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003512:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003514:	f7fd fd22 	bl	8000f5c <HAL_GetTick>
 8003518:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800351c:	f7fd fd1e 	bl	8000f5c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e1c0      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800352e:	4b92      	ldr	r3, [pc, #584]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8081 	beq.w	800364a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003548:	4b8c      	ldr	r3, [pc, #560]	; (800377c <HAL_RCC_OscConfig+0x770>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a8b      	ldr	r2, [pc, #556]	; (800377c <HAL_RCC_OscConfig+0x770>)
 800354e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003552:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003554:	f7fd fd02 	bl	8000f5c <HAL_GetTick>
 8003558:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355c:	f7fd fcfe 	bl	8000f5c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e1a0      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800356e:	4b83      	ldr	r3, [pc, #524]	; (800377c <HAL_RCC_OscConfig+0x770>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d106      	bne.n	8003590 <HAL_RCC_OscConfig+0x584>
 8003582:	4b7d      	ldr	r3, [pc, #500]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	4a7c      	ldr	r2, [pc, #496]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	6713      	str	r3, [r2, #112]	; 0x70
 800358e:	e02d      	b.n	80035ec <HAL_RCC_OscConfig+0x5e0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10c      	bne.n	80035b2 <HAL_RCC_OscConfig+0x5a6>
 8003598:	4b77      	ldr	r3, [pc, #476]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	4a76      	ldr	r2, [pc, #472]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	6713      	str	r3, [r2, #112]	; 0x70
 80035a4:	4b74      	ldr	r3, [pc, #464]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	4a73      	ldr	r2, [pc, #460]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 80035aa:	f023 0304 	bic.w	r3, r3, #4
 80035ae:	6713      	str	r3, [r2, #112]	; 0x70
 80035b0:	e01c      	b.n	80035ec <HAL_RCC_OscConfig+0x5e0>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b05      	cmp	r3, #5
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCC_OscConfig+0x5c8>
 80035ba:	4b6f      	ldr	r3, [pc, #444]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	4a6e      	ldr	r2, [pc, #440]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 80035c0:	f043 0304 	orr.w	r3, r3, #4
 80035c4:	6713      	str	r3, [r2, #112]	; 0x70
 80035c6:	4b6c      	ldr	r3, [pc, #432]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	4a6b      	ldr	r2, [pc, #428]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	6713      	str	r3, [r2, #112]	; 0x70
 80035d2:	e00b      	b.n	80035ec <HAL_RCC_OscConfig+0x5e0>
 80035d4:	4b68      	ldr	r3, [pc, #416]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	4a67      	ldr	r2, [pc, #412]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 80035da:	f023 0301 	bic.w	r3, r3, #1
 80035de:	6713      	str	r3, [r2, #112]	; 0x70
 80035e0:	4b65      	ldr	r3, [pc, #404]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	4a64      	ldr	r2, [pc, #400]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 80035e6:	f023 0304 	bic.w	r3, r3, #4
 80035ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d015      	beq.n	8003620 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f4:	f7fd fcb2 	bl	8000f5c <HAL_GetTick>
 80035f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fc:	f7fd fcae 	bl	8000f5c <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	; 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e14e      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003612:	4b59      	ldr	r3, [pc, #356]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0ee      	beq.n	80035fc <HAL_RCC_OscConfig+0x5f0>
 800361e:	e014      	b.n	800364a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003620:	f7fd fc9c 	bl	8000f5c <HAL_GetTick>
 8003624:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003626:	e00a      	b.n	800363e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003628:	f7fd fc98 	bl	8000f5c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	; 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e138      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800363e:	4b4e      	ldr	r3, [pc, #312]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1ee      	bne.n	8003628 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 812d 	beq.w	80038ae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003654:	4b48      	ldr	r3, [pc, #288]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800365c:	2b18      	cmp	r3, #24
 800365e:	f000 80bd 	beq.w	80037dc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	2b02      	cmp	r3, #2
 8003668:	f040 809e 	bne.w	80037a8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366c:	4b42      	ldr	r3, [pc, #264]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a41      	ldr	r2, [pc, #260]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fd fc70 	bl	8000f5c <HAL_GetTick>
 800367c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003680:	f7fd fc6c 	bl	8000f5c <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e10e      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003692:	4b39      	ldr	r3, [pc, #228]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800369e:	4b36      	ldr	r3, [pc, #216]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 80036a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036a2:	4b37      	ldr	r3, [pc, #220]	; (8003780 <HAL_RCC_OscConfig+0x774>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036ae:	0112      	lsls	r2, r2, #4
 80036b0:	430a      	orrs	r2, r1
 80036b2:	4931      	ldr	r1, [pc, #196]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	628b      	str	r3, [r1, #40]	; 0x28
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	3b01      	subs	r3, #1
 80036be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c6:	3b01      	subs	r3, #1
 80036c8:	025b      	lsls	r3, r3, #9
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	3b01      	subs	r3, #1
 80036d4:	041b      	lsls	r3, r3, #16
 80036d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e0:	3b01      	subs	r3, #1
 80036e2:	061b      	lsls	r3, r3, #24
 80036e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036e8:	4923      	ldr	r1, [pc, #140]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80036ee:	4b22      	ldr	r3, [pc, #136]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	4a21      	ldr	r2, [pc, #132]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036fa:	4b1f      	ldr	r3, [pc, #124]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 80036fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fe:	4b21      	ldr	r3, [pc, #132]	; (8003784 <HAL_RCC_OscConfig+0x778>)
 8003700:	4013      	ands	r3, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003706:	00d2      	lsls	r2, r2, #3
 8003708:	491b      	ldr	r1, [pc, #108]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 800370a:	4313      	orrs	r3, r2
 800370c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800370e:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	f023 020c 	bic.w	r2, r3, #12
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	4917      	ldr	r1, [pc, #92]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 800371c:	4313      	orrs	r3, r2
 800371e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003720:	4b15      	ldr	r3, [pc, #84]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	f023 0202 	bic.w	r2, r3, #2
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372c:	4912      	ldr	r1, [pc, #72]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 800372e:	4313      	orrs	r3, r2
 8003730:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003732:	4b11      	ldr	r3, [pc, #68]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	4a10      	ldr	r2, [pc, #64]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800373e:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	4a0d      	ldr	r2, [pc, #52]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003748:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800374a:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003754:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003756:	4b08      	ldr	r3, [pc, #32]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	4a07      	ldr	r2, [pc, #28]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a04      	ldr	r2, [pc, #16]	; (8003778 <HAL_RCC_OscConfig+0x76c>)
 8003768:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800376c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fd fbf5 	bl	8000f5c <HAL_GetTick>
 8003772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003774:	e011      	b.n	800379a <HAL_RCC_OscConfig+0x78e>
 8003776:	bf00      	nop
 8003778:	58024400 	.word	0x58024400
 800377c:	58024800 	.word	0x58024800
 8003780:	fffffc0c 	.word	0xfffffc0c
 8003784:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003788:	f7fd fbe8 	bl	8000f5c <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e08a      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800379a:	4b47      	ldr	r3, [pc, #284]	; (80038b8 <HAL_RCC_OscConfig+0x8ac>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0x77c>
 80037a6:	e082      	b.n	80038ae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a8:	4b43      	ldr	r3, [pc, #268]	; (80038b8 <HAL_RCC_OscConfig+0x8ac>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a42      	ldr	r2, [pc, #264]	; (80038b8 <HAL_RCC_OscConfig+0x8ac>)
 80037ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fd fbd2 	bl	8000f5c <HAL_GetTick>
 80037b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037bc:	f7fd fbce 	bl	8000f5c <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e070      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037ce:	4b3a      	ldr	r3, [pc, #232]	; (80038b8 <HAL_RCC_OscConfig+0x8ac>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0x7b0>
 80037da:	e068      	b.n	80038ae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037dc:	4b36      	ldr	r3, [pc, #216]	; (80038b8 <HAL_RCC_OscConfig+0x8ac>)
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037e2:	4b35      	ldr	r3, [pc, #212]	; (80038b8 <HAL_RCC_OscConfig+0x8ac>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d031      	beq.n	8003854 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f003 0203 	and.w	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d12a      	bne.n	8003854 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d122      	bne.n	8003854 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d11a      	bne.n	8003854 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	0a5b      	lsrs	r3, r3, #9
 8003822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d111      	bne.n	8003854 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	0c1b      	lsrs	r3, r3, #16
 8003834:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d108      	bne.n	8003854 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	0e1b      	lsrs	r3, r3, #24
 8003846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e02b      	b.n	80038b0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003858:	4b17      	ldr	r3, [pc, #92]	; (80038b8 <HAL_RCC_OscConfig+0x8ac>)
 800385a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385c:	08db      	lsrs	r3, r3, #3
 800385e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003862:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	429a      	cmp	r2, r3
 800386c:	d01f      	beq.n	80038ae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800386e:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <HAL_RCC_OscConfig+0x8ac>)
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	4a11      	ldr	r2, [pc, #68]	; (80038b8 <HAL_RCC_OscConfig+0x8ac>)
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800387a:	f7fd fb6f 	bl	8000f5c <HAL_GetTick>
 800387e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003880:	bf00      	nop
 8003882:	f7fd fb6b 	bl	8000f5c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	4293      	cmp	r3, r2
 800388c:	d0f9      	beq.n	8003882 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_RCC_OscConfig+0x8ac>)
 8003890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <HAL_RCC_OscConfig+0x8b0>)
 8003894:	4013      	ands	r3, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800389a:	00d2      	lsls	r2, r2, #3
 800389c:	4906      	ldr	r1, [pc, #24]	; (80038b8 <HAL_RCC_OscConfig+0x8ac>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_RCC_OscConfig+0x8ac>)
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	4a04      	ldr	r2, [pc, #16]	; (80038b8 <HAL_RCC_OscConfig+0x8ac>)
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3730      	adds	r7, #48	; 0x30
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	58024400 	.word	0x58024400
 80038bc:	ffff0007 	.word	0xffff0007

080038c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e19c      	b.n	8003c0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038d4:	4b8a      	ldr	r3, [pc, #552]	; (8003b00 <HAL_RCC_ClockConfig+0x240>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d910      	bls.n	8003904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b87      	ldr	r3, [pc, #540]	; (8003b00 <HAL_RCC_ClockConfig+0x240>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 020f 	bic.w	r2, r3, #15
 80038ea:	4985      	ldr	r1, [pc, #532]	; (8003b00 <HAL_RCC_ClockConfig+0x240>)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b83      	ldr	r3, [pc, #524]	; (8003b00 <HAL_RCC_ClockConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e184      	b.n	8003c0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d010      	beq.n	8003932 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	4b7b      	ldr	r3, [pc, #492]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800391c:	429a      	cmp	r2, r3
 800391e:	d908      	bls.n	8003932 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003920:	4b78      	ldr	r3, [pc, #480]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	4975      	ldr	r1, [pc, #468]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 800392e:	4313      	orrs	r3, r2
 8003930:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d010      	beq.n	8003960 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	4b70      	ldr	r3, [pc, #448]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800394a:	429a      	cmp	r2, r3
 800394c:	d908      	bls.n	8003960 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800394e:	4b6d      	ldr	r3, [pc, #436]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	496a      	ldr	r1, [pc, #424]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 800395c:	4313      	orrs	r3, r2
 800395e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b00      	cmp	r3, #0
 800396a:	d010      	beq.n	800398e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699a      	ldr	r2, [r3, #24]
 8003970:	4b64      	ldr	r3, [pc, #400]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003978:	429a      	cmp	r2, r3
 800397a:	d908      	bls.n	800398e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800397c:	4b61      	ldr	r3, [pc, #388]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	495e      	ldr	r1, [pc, #376]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 800398a:	4313      	orrs	r3, r2
 800398c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d010      	beq.n	80039bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69da      	ldr	r2, [r3, #28]
 800399e:	4b59      	ldr	r3, [pc, #356]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d908      	bls.n	80039bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039aa:	4b56      	ldr	r3, [pc, #344]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	4953      	ldr	r1, [pc, #332]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d010      	beq.n	80039ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	4b4d      	ldr	r3, [pc, #308]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d908      	bls.n	80039ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d8:	4b4a      	ldr	r3, [pc, #296]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f023 020f 	bic.w	r2, r3, #15
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4947      	ldr	r1, [pc, #284]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d055      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80039f6:	4b43      	ldr	r3, [pc, #268]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	4940      	ldr	r1, [pc, #256]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d107      	bne.n	8003a20 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a10:	4b3c      	ldr	r3, [pc, #240]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d121      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0f6      	b.n	8003c0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d107      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a28:	4b36      	ldr	r3, [pc, #216]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d115      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0ea      	b.n	8003c0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d107      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a40:	4b30      	ldr	r3, [pc, #192]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d109      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0de      	b.n	8003c0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a50:	4b2c      	ldr	r3, [pc, #176]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0d6      	b.n	8003c0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a60:	4b28      	ldr	r3, [pc, #160]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f023 0207 	bic.w	r2, r3, #7
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4925      	ldr	r1, [pc, #148]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a72:	f7fd fa73 	bl	8000f5c <HAL_GetTick>
 8003a76:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a78:	e00a      	b.n	8003a90 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a7a:	f7fd fa6f 	bl	8000f5c <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e0be      	b.n	8003c0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a90:	4b1c      	ldr	r3, [pc, #112]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d1eb      	bne.n	8003a7a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d010      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	4b14      	ldr	r3, [pc, #80]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d208      	bcs.n	8003ad0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003abe:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f023 020f 	bic.w	r2, r3, #15
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	490e      	ldr	r1, [pc, #56]	; (8003b04 <HAL_RCC_ClockConfig+0x244>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_ClockConfig+0x240>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d214      	bcs.n	8003b08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <HAL_RCC_ClockConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 020f 	bic.w	r2, r3, #15
 8003ae6:	4906      	ldr	r1, [pc, #24]	; (8003b00 <HAL_RCC_ClockConfig+0x240>)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <HAL_RCC_ClockConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e086      	b.n	8003c0e <HAL_RCC_ClockConfig+0x34e>
 8003b00:	52002000 	.word	0x52002000
 8003b04:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d010      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	4b3f      	ldr	r3, [pc, #252]	; (8003c18 <HAL_RCC_ClockConfig+0x358>)
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d208      	bcs.n	8003b36 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b24:	4b3c      	ldr	r3, [pc, #240]	; (8003c18 <HAL_RCC_ClockConfig+0x358>)
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	4939      	ldr	r1, [pc, #228]	; (8003c18 <HAL_RCC_ClockConfig+0x358>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d010      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <HAL_RCC_ClockConfig+0x358>)
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d208      	bcs.n	8003b64 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b52:	4b31      	ldr	r3, [pc, #196]	; (8003c18 <HAL_RCC_ClockConfig+0x358>)
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	492e      	ldr	r1, [pc, #184]	; (8003c18 <HAL_RCC_ClockConfig+0x358>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d010      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	4b28      	ldr	r3, [pc, #160]	; (8003c18 <HAL_RCC_ClockConfig+0x358>)
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d208      	bcs.n	8003b92 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b80:	4b25      	ldr	r3, [pc, #148]	; (8003c18 <HAL_RCC_ClockConfig+0x358>)
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	4922      	ldr	r1, [pc, #136]	; (8003c18 <HAL_RCC_ClockConfig+0x358>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d010      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69da      	ldr	r2, [r3, #28]
 8003ba2:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <HAL_RCC_ClockConfig+0x358>)
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d208      	bcs.n	8003bc0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003bae:	4b1a      	ldr	r3, [pc, #104]	; (8003c18 <HAL_RCC_ClockConfig+0x358>)
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	4917      	ldr	r1, [pc, #92]	; (8003c18 <HAL_RCC_ClockConfig+0x358>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003bc0:	f000 f834 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <HAL_RCC_ClockConfig+0x358>)
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	4912      	ldr	r1, [pc, #72]	; (8003c1c <HAL_RCC_ClockConfig+0x35c>)
 8003bd2:	5ccb      	ldrb	r3, [r1, r3]
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bdc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bde:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <HAL_RCC_ClockConfig+0x358>)
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	4a0d      	ldr	r2, [pc, #52]	; (8003c1c <HAL_RCC_ClockConfig+0x35c>)
 8003be8:	5cd3      	ldrb	r3, [r2, r3]
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf4:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <HAL_RCC_ClockConfig+0x360>)
 8003bf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bf8:	4a0a      	ldr	r2, [pc, #40]	; (8003c24 <HAL_RCC_ClockConfig+0x364>)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <HAL_RCC_ClockConfig+0x368>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fc fdf4 	bl	80007f0 <HAL_InitTick>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	58024400 	.word	0x58024400
 8003c1c:	080165ec 	.word	0x080165ec
 8003c20:	24000004 	.word	0x24000004
 8003c24:	24000000 	.word	0x24000000
 8003c28:	24000008 	.word	0x24000008

08003c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b089      	sub	sp, #36	; 0x24
 8003c30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c32:	4bb3      	ldr	r3, [pc, #716]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c3a:	2b18      	cmp	r3, #24
 8003c3c:	f200 8155 	bhi.w	8003eea <HAL_RCC_GetSysClockFreq+0x2be>
 8003c40:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003cad 	.word	0x08003cad
 8003c4c:	08003eeb 	.word	0x08003eeb
 8003c50:	08003eeb 	.word	0x08003eeb
 8003c54:	08003eeb 	.word	0x08003eeb
 8003c58:	08003eeb 	.word	0x08003eeb
 8003c5c:	08003eeb 	.word	0x08003eeb
 8003c60:	08003eeb 	.word	0x08003eeb
 8003c64:	08003eeb 	.word	0x08003eeb
 8003c68:	08003cd3 	.word	0x08003cd3
 8003c6c:	08003eeb 	.word	0x08003eeb
 8003c70:	08003eeb 	.word	0x08003eeb
 8003c74:	08003eeb 	.word	0x08003eeb
 8003c78:	08003eeb 	.word	0x08003eeb
 8003c7c:	08003eeb 	.word	0x08003eeb
 8003c80:	08003eeb 	.word	0x08003eeb
 8003c84:	08003eeb 	.word	0x08003eeb
 8003c88:	08003cd9 	.word	0x08003cd9
 8003c8c:	08003eeb 	.word	0x08003eeb
 8003c90:	08003eeb 	.word	0x08003eeb
 8003c94:	08003eeb 	.word	0x08003eeb
 8003c98:	08003eeb 	.word	0x08003eeb
 8003c9c:	08003eeb 	.word	0x08003eeb
 8003ca0:	08003eeb 	.word	0x08003eeb
 8003ca4:	08003eeb 	.word	0x08003eeb
 8003ca8:	08003cdf 	.word	0x08003cdf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cac:	4b94      	ldr	r3, [pc, #592]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d009      	beq.n	8003ccc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cb8:	4b91      	ldr	r3, [pc, #580]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	08db      	lsrs	r3, r3, #3
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	4a90      	ldr	r2, [pc, #576]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003cca:	e111      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ccc:	4b8d      	ldr	r3, [pc, #564]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cce:	61bb      	str	r3, [r7, #24]
      break;
 8003cd0:	e10e      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003cd2:	4b8d      	ldr	r3, [pc, #564]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003cd4:	61bb      	str	r3, [r7, #24]
      break;
 8003cd6:	e10b      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003cd8:	4b8c      	ldr	r3, [pc, #560]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003cda:	61bb      	str	r3, [r7, #24]
      break;
 8003cdc:	e108      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cde:	4b88      	ldr	r3, [pc, #544]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003ce8:	4b85      	ldr	r3, [pc, #532]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003cf4:	4b82      	ldr	r3, [pc, #520]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003cfe:	4b80      	ldr	r3, [pc, #512]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d02:	08db      	lsrs	r3, r3, #3
 8003d04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	fb02 f303 	mul.w	r3, r2, r3
 8003d0e:	ee07 3a90 	vmov	s15, r3
 8003d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80e1 	beq.w	8003ee4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	f000 8083 	beq.w	8003e30 <HAL_RCC_GetSysClockFreq+0x204>
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	f200 80a1 	bhi.w	8003e74 <HAL_RCC_GetSysClockFreq+0x248>
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x114>
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d056      	beq.n	8003dec <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d3e:	e099      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d40:	4b6f      	ldr	r3, [pc, #444]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d02d      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d4c:	4b6c      	ldr	r3, [pc, #432]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	08db      	lsrs	r3, r3, #3
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	4a6b      	ldr	r2, [pc, #428]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	ee07 3a90 	vmov	s15, r3
 8003d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d76:	4b62      	ldr	r3, [pc, #392]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d8a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003f10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003da6:	e087      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003f14 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dba:	4b51      	ldr	r3, [pc, #324]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003f10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dea:	e065      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003f18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dfe:	4b40      	ldr	r3, [pc, #256]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e12:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003f10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e2e:	e043      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003f1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e42:	4b2f      	ldr	r3, [pc, #188]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e56:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003f10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e72:	e021      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e86:	4b1e      	ldr	r3, [pc, #120]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003f10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003eb6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003eb8:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	0a5b      	lsrs	r3, r3, #9
 8003ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	ee07 3a90 	vmov	s15, r3
 8003ecc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ed0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003edc:	ee17 3a90 	vmov	r3, s15
 8003ee0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003ee2:	e005      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61bb      	str	r3, [r7, #24]
      break;
 8003ee8:	e002      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003eec:	61bb      	str	r3, [r7, #24]
      break;
 8003eee:	bf00      	nop
  }

  return sysclockfreq;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3724      	adds	r7, #36	; 0x24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	58024400 	.word	0x58024400
 8003f04:	03d09000 	.word	0x03d09000
 8003f08:	003d0900 	.word	0x003d0900
 8003f0c:	017d7840 	.word	0x017d7840
 8003f10:	46000000 	.word	0x46000000
 8003f14:	4c742400 	.word	0x4c742400
 8003f18:	4a742400 	.word	0x4a742400
 8003f1c:	4bbebc20 	.word	0x4bbebc20

08003f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003f26:	f7ff fe81 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	0a1b      	lsrs	r3, r3, #8
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	490f      	ldr	r1, [pc, #60]	; (8003f74 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f38:	5ccb      	ldrb	r3, [r1, r3]
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f44:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	4a09      	ldr	r2, [pc, #36]	; (8003f74 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f4e:	5cd3      	ldrb	r3, [r2, r3]
 8003f50:	f003 031f 	and.w	r3, r3, #31
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5a:	4a07      	ldr	r2, [pc, #28]	; (8003f78 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f5e:	4a07      	ldr	r2, [pc, #28]	; (8003f7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003f64:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f66:	681b      	ldr	r3, [r3, #0]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	58024400 	.word	0x58024400
 8003f74:	080165ec 	.word	0x080165ec
 8003f78:	24000004 	.word	0x24000004
 8003f7c:	24000000 	.word	0x24000000

08003f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003f84:	f7ff ffcc 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	091b      	lsrs	r3, r3, #4
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	4904      	ldr	r1, [pc, #16]	; (8003fa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f96:	5ccb      	ldrb	r3, [r1, r3]
 8003f98:	f003 031f 	and.w	r3, r3, #31
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	58024400 	.word	0x58024400
 8003fa8:	080165ec 	.word	0x080165ec

08003fac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	223f      	movs	r2, #63	; 0x3f
 8003fba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fbc:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <HAL_RCC_GetClockConfig+0x7c>)
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f003 0207 	and.w	r2, r3, #7
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003fc8:	4b17      	ldr	r3, [pc, #92]	; (8004028 <HAL_RCC_GetClockConfig+0x7c>)
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003fd4:	4b14      	ldr	r3, [pc, #80]	; (8004028 <HAL_RCC_GetClockConfig+0x7c>)
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f003 020f 	and.w	r2, r3, #15
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003fe0:	4b11      	ldr	r3, [pc, #68]	; (8004028 <HAL_RCC_GetClockConfig+0x7c>)
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003fec:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <HAL_RCC_GetClockConfig+0x7c>)
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCC_GetClockConfig+0x7c>)
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004004:	4b08      	ldr	r3, [pc, #32]	; (8004028 <HAL_RCC_GetClockConfig+0x7c>)
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004010:	4b06      	ldr	r3, [pc, #24]	; (800402c <HAL_RCC_GetClockConfig+0x80>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 020f 	and.w	r2, r3, #15
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	601a      	str	r2, [r3, #0]
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	58024400 	.word	0x58024400
 800402c:	52002000 	.word	0x52002000

08004030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e049      	b.n	80040d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f841 	bl	80040de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	4619      	mov	r1, r3
 800406e:	4610      	mov	r0, r2
 8004070:	f000 fa00 	bl	8004474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	d001      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e054      	b.n	80041b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a26      	ldr	r2, [pc, #152]	; (80041c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d022      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004136:	d01d      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a22      	ldr	r2, [pc, #136]	; (80041c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d018      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a21      	ldr	r2, [pc, #132]	; (80041cc <HAL_TIM_Base_Start_IT+0xd8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d013      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a1f      	ldr	r2, [pc, #124]	; (80041d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00e      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1e      	ldr	r2, [pc, #120]	; (80041d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d009      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a1c      	ldr	r2, [pc, #112]	; (80041d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d004      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1b      	ldr	r2, [pc, #108]	; (80041dc <HAL_TIM_Base_Start_IT+0xe8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d115      	bne.n	80041a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <HAL_TIM_Base_Start_IT+0xec>)
 800417c:	4013      	ands	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b06      	cmp	r3, #6
 8004184:	d015      	beq.n	80041b2 <HAL_TIM_Base_Start_IT+0xbe>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418c:	d011      	beq.n	80041b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0201 	orr.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419e:	e008      	b.n	80041b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0201 	orr.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	e000      	b.n	80041b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40010000 	.word	0x40010000
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40000800 	.word	0x40000800
 80041d0:	40000c00 	.word	0x40000c00
 80041d4:	40010400 	.word	0x40010400
 80041d8:	40001800 	.word	0x40001800
 80041dc:	40014000 	.word	0x40014000
 80041e0:	00010007 	.word	0x00010007

080041e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d122      	bne.n	8004240 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b02      	cmp	r3, #2
 8004206:	d11b      	bne.n	8004240 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0202 	mvn.w	r2, #2
 8004210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f905 	bl	8004436 <HAL_TIM_IC_CaptureCallback>
 800422c:	e005      	b.n	800423a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f8f7 	bl	8004422 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f908 	bl	800444a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b04      	cmp	r3, #4
 800424c:	d122      	bne.n	8004294 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b04      	cmp	r3, #4
 800425a:	d11b      	bne.n	8004294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0204 	mvn.w	r2, #4
 8004264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f8db 	bl	8004436 <HAL_TIM_IC_CaptureCallback>
 8004280:	e005      	b.n	800428e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f8cd 	bl	8004422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f8de 	bl	800444a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d122      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d11b      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0208 	mvn.w	r2, #8
 80042b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2204      	movs	r2, #4
 80042be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f8b1 	bl	8004436 <HAL_TIM_IC_CaptureCallback>
 80042d4:	e005      	b.n	80042e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f8a3 	bl	8004422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f8b4 	bl	800444a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	d122      	bne.n	800433c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b10      	cmp	r3, #16
 8004302:	d11b      	bne.n	800433c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0210 	mvn.w	r2, #16
 800430c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2208      	movs	r2, #8
 8004312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f887 	bl	8004436 <HAL_TIM_IC_CaptureCallback>
 8004328:	e005      	b.n	8004336 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f879 	bl	8004422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f88a 	bl	800444a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b01      	cmp	r3, #1
 8004348:	d10e      	bne.n	8004368 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b01      	cmp	r3, #1
 8004356:	d107      	bne.n	8004368 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0201 	mvn.w	r2, #1
 8004360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fc fa0e 	bl	8000784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004372:	2b80      	cmp	r3, #128	; 0x80
 8004374:	d10e      	bne.n	8004394 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004380:	2b80      	cmp	r3, #128	; 0x80
 8004382:	d107      	bne.n	8004394 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800438c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f914 	bl	80045bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a2:	d10e      	bne.n	80043c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ae:	2b80      	cmp	r3, #128	; 0x80
 80043b0:	d107      	bne.n	80043c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f907 	bl	80045d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043cc:	2b40      	cmp	r3, #64	; 0x40
 80043ce:	d10e      	bne.n	80043ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b40      	cmp	r3, #64	; 0x40
 80043dc:	d107      	bne.n	80043ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f838 	bl	800445e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d10e      	bne.n	800441a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b20      	cmp	r3, #32
 8004408:	d107      	bne.n	800441a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f06f 0220 	mvn.w	r2, #32
 8004412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f8c7 	bl	80045a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a40      	ldr	r2, [pc, #256]	; (8004588 <TIM_Base_SetConfig+0x114>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d013      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004492:	d00f      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a3d      	ldr	r2, [pc, #244]	; (800458c <TIM_Base_SetConfig+0x118>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00b      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3c      	ldr	r2, [pc, #240]	; (8004590 <TIM_Base_SetConfig+0x11c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d007      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a3b      	ldr	r2, [pc, #236]	; (8004594 <TIM_Base_SetConfig+0x120>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d003      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a3a      	ldr	r2, [pc, #232]	; (8004598 <TIM_Base_SetConfig+0x124>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d108      	bne.n	80044c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a2f      	ldr	r2, [pc, #188]	; (8004588 <TIM_Base_SetConfig+0x114>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d01f      	beq.n	800450e <TIM_Base_SetConfig+0x9a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d4:	d01b      	beq.n	800450e <TIM_Base_SetConfig+0x9a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a2c      	ldr	r2, [pc, #176]	; (800458c <TIM_Base_SetConfig+0x118>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d017      	beq.n	800450e <TIM_Base_SetConfig+0x9a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a2b      	ldr	r2, [pc, #172]	; (8004590 <TIM_Base_SetConfig+0x11c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d013      	beq.n	800450e <TIM_Base_SetConfig+0x9a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a2a      	ldr	r2, [pc, #168]	; (8004594 <TIM_Base_SetConfig+0x120>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d00f      	beq.n	800450e <TIM_Base_SetConfig+0x9a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a29      	ldr	r2, [pc, #164]	; (8004598 <TIM_Base_SetConfig+0x124>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00b      	beq.n	800450e <TIM_Base_SetConfig+0x9a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a28      	ldr	r2, [pc, #160]	; (800459c <TIM_Base_SetConfig+0x128>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d007      	beq.n	800450e <TIM_Base_SetConfig+0x9a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a27      	ldr	r2, [pc, #156]	; (80045a0 <TIM_Base_SetConfig+0x12c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d003      	beq.n	800450e <TIM_Base_SetConfig+0x9a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a26      	ldr	r2, [pc, #152]	; (80045a4 <TIM_Base_SetConfig+0x130>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d108      	bne.n	8004520 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4313      	orrs	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a10      	ldr	r2, [pc, #64]	; (8004588 <TIM_Base_SetConfig+0x114>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00f      	beq.n	800456c <TIM_Base_SetConfig+0xf8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a12      	ldr	r2, [pc, #72]	; (8004598 <TIM_Base_SetConfig+0x124>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00b      	beq.n	800456c <TIM_Base_SetConfig+0xf8>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a11      	ldr	r2, [pc, #68]	; (800459c <TIM_Base_SetConfig+0x128>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d007      	beq.n	800456c <TIM_Base_SetConfig+0xf8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a10      	ldr	r2, [pc, #64]	; (80045a0 <TIM_Base_SetConfig+0x12c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_Base_SetConfig+0xf8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a0f      	ldr	r2, [pc, #60]	; (80045a4 <TIM_Base_SetConfig+0x130>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d103      	bne.n	8004574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	615a      	str	r2, [r3, #20]
}
 800457a:	bf00      	nop
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40010000 	.word	0x40010000
 800458c:	40000400 	.word	0x40000400
 8004590:	40000800 	.word	0x40000800
 8004594:	40000c00 	.word	0x40000c00
 8004598:	40010400 	.word	0x40010400
 800459c:	40014000 	.word	0x40014000
 80045a0:	40014400 	.word	0x40014400
 80045a4:	40014800 	.word	0x40014800

080045a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80045e4:	b5b0      	push	{r4, r5, r7, lr}
 80045e6:	b08c      	sub	sp, #48	; 0x30
 80045e8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80045ea:	4b96      	ldr	r3, [pc, #600]	; (8004844 <MX_LWIP_Init+0x260>)
 80045ec:	22c0      	movs	r2, #192	; 0xc0
 80045ee:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80045f0:	4b94      	ldr	r3, [pc, #592]	; (8004844 <MX_LWIP_Init+0x260>)
 80045f2:	22a8      	movs	r2, #168	; 0xa8
 80045f4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80045f6:	4b93      	ldr	r3, [pc, #588]	; (8004844 <MX_LWIP_Init+0x260>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80045fc:	4b91      	ldr	r3, [pc, #580]	; (8004844 <MX_LWIP_Init+0x260>)
 80045fe:	220a      	movs	r2, #10
 8004600:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004602:	4b91      	ldr	r3, [pc, #580]	; (8004848 <MX_LWIP_Init+0x264>)
 8004604:	22ff      	movs	r2, #255	; 0xff
 8004606:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004608:	4b8f      	ldr	r3, [pc, #572]	; (8004848 <MX_LWIP_Init+0x264>)
 800460a:	22ff      	movs	r2, #255	; 0xff
 800460c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800460e:	4b8e      	ldr	r3, [pc, #568]	; (8004848 <MX_LWIP_Init+0x264>)
 8004610:	22ff      	movs	r2, #255	; 0xff
 8004612:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004614:	4b8c      	ldr	r3, [pc, #560]	; (8004848 <MX_LWIP_Init+0x264>)
 8004616:	2200      	movs	r2, #0
 8004618:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800461a:	4b8c      	ldr	r3, [pc, #560]	; (800484c <MX_LWIP_Init+0x268>)
 800461c:	2200      	movs	r2, #0
 800461e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004620:	4b8a      	ldr	r3, [pc, #552]	; (800484c <MX_LWIP_Init+0x268>)
 8004622:	2200      	movs	r2, #0
 8004624:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004626:	4b89      	ldr	r3, [pc, #548]	; (800484c <MX_LWIP_Init+0x268>)
 8004628:	2200      	movs	r2, #0
 800462a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800462c:	4b87      	ldr	r3, [pc, #540]	; (800484c <MX_LWIP_Init+0x268>)
 800462e:	2200      	movs	r2, #0
 8004630:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004632:	2100      	movs	r1, #0
 8004634:	2000      	movs	r0, #0
 8004636:	f003 fe69 	bl	800830c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800463a:	4b82      	ldr	r3, [pc, #520]	; (8004844 <MX_LWIP_Init+0x260>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	061a      	lsls	r2, r3, #24
 8004640:	4b80      	ldr	r3, [pc, #512]	; (8004844 <MX_LWIP_Init+0x260>)
 8004642:	785b      	ldrb	r3, [r3, #1]
 8004644:	041b      	lsls	r3, r3, #16
 8004646:	431a      	orrs	r2, r3
 8004648:	4b7e      	ldr	r3, [pc, #504]	; (8004844 <MX_LWIP_Init+0x260>)
 800464a:	789b      	ldrb	r3, [r3, #2]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	4313      	orrs	r3, r2
 8004650:	4a7c      	ldr	r2, [pc, #496]	; (8004844 <MX_LWIP_Init+0x260>)
 8004652:	78d2      	ldrb	r2, [r2, #3]
 8004654:	4313      	orrs	r3, r2
 8004656:	061a      	lsls	r2, r3, #24
 8004658:	4b7a      	ldr	r3, [pc, #488]	; (8004844 <MX_LWIP_Init+0x260>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	0619      	lsls	r1, r3, #24
 800465e:	4b79      	ldr	r3, [pc, #484]	; (8004844 <MX_LWIP_Init+0x260>)
 8004660:	785b      	ldrb	r3, [r3, #1]
 8004662:	041b      	lsls	r3, r3, #16
 8004664:	4319      	orrs	r1, r3
 8004666:	4b77      	ldr	r3, [pc, #476]	; (8004844 <MX_LWIP_Init+0x260>)
 8004668:	789b      	ldrb	r3, [r3, #2]
 800466a:	021b      	lsls	r3, r3, #8
 800466c:	430b      	orrs	r3, r1
 800466e:	4975      	ldr	r1, [pc, #468]	; (8004844 <MX_LWIP_Init+0x260>)
 8004670:	78c9      	ldrb	r1, [r1, #3]
 8004672:	430b      	orrs	r3, r1
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800467a:	431a      	orrs	r2, r3
 800467c:	4b71      	ldr	r3, [pc, #452]	; (8004844 <MX_LWIP_Init+0x260>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	0619      	lsls	r1, r3, #24
 8004682:	4b70      	ldr	r3, [pc, #448]	; (8004844 <MX_LWIP_Init+0x260>)
 8004684:	785b      	ldrb	r3, [r3, #1]
 8004686:	041b      	lsls	r3, r3, #16
 8004688:	4319      	orrs	r1, r3
 800468a:	4b6e      	ldr	r3, [pc, #440]	; (8004844 <MX_LWIP_Init+0x260>)
 800468c:	789b      	ldrb	r3, [r3, #2]
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	430b      	orrs	r3, r1
 8004692:	496c      	ldr	r1, [pc, #432]	; (8004844 <MX_LWIP_Init+0x260>)
 8004694:	78c9      	ldrb	r1, [r1, #3]
 8004696:	430b      	orrs	r3, r1
 8004698:	0a1b      	lsrs	r3, r3, #8
 800469a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800469e:	431a      	orrs	r2, r3
 80046a0:	4b68      	ldr	r3, [pc, #416]	; (8004844 <MX_LWIP_Init+0x260>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	0619      	lsls	r1, r3, #24
 80046a6:	4b67      	ldr	r3, [pc, #412]	; (8004844 <MX_LWIP_Init+0x260>)
 80046a8:	785b      	ldrb	r3, [r3, #1]
 80046aa:	041b      	lsls	r3, r3, #16
 80046ac:	4319      	orrs	r1, r3
 80046ae:	4b65      	ldr	r3, [pc, #404]	; (8004844 <MX_LWIP_Init+0x260>)
 80046b0:	789b      	ldrb	r3, [r3, #2]
 80046b2:	021b      	lsls	r3, r3, #8
 80046b4:	430b      	orrs	r3, r1
 80046b6:	4963      	ldr	r1, [pc, #396]	; (8004844 <MX_LWIP_Init+0x260>)
 80046b8:	78c9      	ldrb	r1, [r1, #3]
 80046ba:	430b      	orrs	r3, r1
 80046bc:	0e1b      	lsrs	r3, r3, #24
 80046be:	4313      	orrs	r3, r2
 80046c0:	4a63      	ldr	r2, [pc, #396]	; (8004850 <MX_LWIP_Init+0x26c>)
 80046c2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80046c4:	4b60      	ldr	r3, [pc, #384]	; (8004848 <MX_LWIP_Init+0x264>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	061a      	lsls	r2, r3, #24
 80046ca:	4b5f      	ldr	r3, [pc, #380]	; (8004848 <MX_LWIP_Init+0x264>)
 80046cc:	785b      	ldrb	r3, [r3, #1]
 80046ce:	041b      	lsls	r3, r3, #16
 80046d0:	431a      	orrs	r2, r3
 80046d2:	4b5d      	ldr	r3, [pc, #372]	; (8004848 <MX_LWIP_Init+0x264>)
 80046d4:	789b      	ldrb	r3, [r3, #2]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	4313      	orrs	r3, r2
 80046da:	4a5b      	ldr	r2, [pc, #364]	; (8004848 <MX_LWIP_Init+0x264>)
 80046dc:	78d2      	ldrb	r2, [r2, #3]
 80046de:	4313      	orrs	r3, r2
 80046e0:	061a      	lsls	r2, r3, #24
 80046e2:	4b59      	ldr	r3, [pc, #356]	; (8004848 <MX_LWIP_Init+0x264>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	0619      	lsls	r1, r3, #24
 80046e8:	4b57      	ldr	r3, [pc, #348]	; (8004848 <MX_LWIP_Init+0x264>)
 80046ea:	785b      	ldrb	r3, [r3, #1]
 80046ec:	041b      	lsls	r3, r3, #16
 80046ee:	4319      	orrs	r1, r3
 80046f0:	4b55      	ldr	r3, [pc, #340]	; (8004848 <MX_LWIP_Init+0x264>)
 80046f2:	789b      	ldrb	r3, [r3, #2]
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	430b      	orrs	r3, r1
 80046f8:	4953      	ldr	r1, [pc, #332]	; (8004848 <MX_LWIP_Init+0x264>)
 80046fa:	78c9      	ldrb	r1, [r1, #3]
 80046fc:	430b      	orrs	r3, r1
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004704:	431a      	orrs	r2, r3
 8004706:	4b50      	ldr	r3, [pc, #320]	; (8004848 <MX_LWIP_Init+0x264>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	0619      	lsls	r1, r3, #24
 800470c:	4b4e      	ldr	r3, [pc, #312]	; (8004848 <MX_LWIP_Init+0x264>)
 800470e:	785b      	ldrb	r3, [r3, #1]
 8004710:	041b      	lsls	r3, r3, #16
 8004712:	4319      	orrs	r1, r3
 8004714:	4b4c      	ldr	r3, [pc, #304]	; (8004848 <MX_LWIP_Init+0x264>)
 8004716:	789b      	ldrb	r3, [r3, #2]
 8004718:	021b      	lsls	r3, r3, #8
 800471a:	430b      	orrs	r3, r1
 800471c:	494a      	ldr	r1, [pc, #296]	; (8004848 <MX_LWIP_Init+0x264>)
 800471e:	78c9      	ldrb	r1, [r1, #3]
 8004720:	430b      	orrs	r3, r1
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004728:	431a      	orrs	r2, r3
 800472a:	4b47      	ldr	r3, [pc, #284]	; (8004848 <MX_LWIP_Init+0x264>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	0619      	lsls	r1, r3, #24
 8004730:	4b45      	ldr	r3, [pc, #276]	; (8004848 <MX_LWIP_Init+0x264>)
 8004732:	785b      	ldrb	r3, [r3, #1]
 8004734:	041b      	lsls	r3, r3, #16
 8004736:	4319      	orrs	r1, r3
 8004738:	4b43      	ldr	r3, [pc, #268]	; (8004848 <MX_LWIP_Init+0x264>)
 800473a:	789b      	ldrb	r3, [r3, #2]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	430b      	orrs	r3, r1
 8004740:	4941      	ldr	r1, [pc, #260]	; (8004848 <MX_LWIP_Init+0x264>)
 8004742:	78c9      	ldrb	r1, [r1, #3]
 8004744:	430b      	orrs	r3, r1
 8004746:	0e1b      	lsrs	r3, r3, #24
 8004748:	4313      	orrs	r3, r2
 800474a:	4a42      	ldr	r2, [pc, #264]	; (8004854 <MX_LWIP_Init+0x270>)
 800474c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800474e:	4b3f      	ldr	r3, [pc, #252]	; (800484c <MX_LWIP_Init+0x268>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	061a      	lsls	r2, r3, #24
 8004754:	4b3d      	ldr	r3, [pc, #244]	; (800484c <MX_LWIP_Init+0x268>)
 8004756:	785b      	ldrb	r3, [r3, #1]
 8004758:	041b      	lsls	r3, r3, #16
 800475a:	431a      	orrs	r2, r3
 800475c:	4b3b      	ldr	r3, [pc, #236]	; (800484c <MX_LWIP_Init+0x268>)
 800475e:	789b      	ldrb	r3, [r3, #2]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	4313      	orrs	r3, r2
 8004764:	4a39      	ldr	r2, [pc, #228]	; (800484c <MX_LWIP_Init+0x268>)
 8004766:	78d2      	ldrb	r2, [r2, #3]
 8004768:	4313      	orrs	r3, r2
 800476a:	061a      	lsls	r2, r3, #24
 800476c:	4b37      	ldr	r3, [pc, #220]	; (800484c <MX_LWIP_Init+0x268>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	0619      	lsls	r1, r3, #24
 8004772:	4b36      	ldr	r3, [pc, #216]	; (800484c <MX_LWIP_Init+0x268>)
 8004774:	785b      	ldrb	r3, [r3, #1]
 8004776:	041b      	lsls	r3, r3, #16
 8004778:	4319      	orrs	r1, r3
 800477a:	4b34      	ldr	r3, [pc, #208]	; (800484c <MX_LWIP_Init+0x268>)
 800477c:	789b      	ldrb	r3, [r3, #2]
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	430b      	orrs	r3, r1
 8004782:	4932      	ldr	r1, [pc, #200]	; (800484c <MX_LWIP_Init+0x268>)
 8004784:	78c9      	ldrb	r1, [r1, #3]
 8004786:	430b      	orrs	r3, r1
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800478e:	431a      	orrs	r2, r3
 8004790:	4b2e      	ldr	r3, [pc, #184]	; (800484c <MX_LWIP_Init+0x268>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	0619      	lsls	r1, r3, #24
 8004796:	4b2d      	ldr	r3, [pc, #180]	; (800484c <MX_LWIP_Init+0x268>)
 8004798:	785b      	ldrb	r3, [r3, #1]
 800479a:	041b      	lsls	r3, r3, #16
 800479c:	4319      	orrs	r1, r3
 800479e:	4b2b      	ldr	r3, [pc, #172]	; (800484c <MX_LWIP_Init+0x268>)
 80047a0:	789b      	ldrb	r3, [r3, #2]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	430b      	orrs	r3, r1
 80047a6:	4929      	ldr	r1, [pc, #164]	; (800484c <MX_LWIP_Init+0x268>)
 80047a8:	78c9      	ldrb	r1, [r1, #3]
 80047aa:	430b      	orrs	r3, r1
 80047ac:	0a1b      	lsrs	r3, r3, #8
 80047ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80047b2:	431a      	orrs	r2, r3
 80047b4:	4b25      	ldr	r3, [pc, #148]	; (800484c <MX_LWIP_Init+0x268>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	0619      	lsls	r1, r3, #24
 80047ba:	4b24      	ldr	r3, [pc, #144]	; (800484c <MX_LWIP_Init+0x268>)
 80047bc:	785b      	ldrb	r3, [r3, #1]
 80047be:	041b      	lsls	r3, r3, #16
 80047c0:	4319      	orrs	r1, r3
 80047c2:	4b22      	ldr	r3, [pc, #136]	; (800484c <MX_LWIP_Init+0x268>)
 80047c4:	789b      	ldrb	r3, [r3, #2]
 80047c6:	021b      	lsls	r3, r3, #8
 80047c8:	430b      	orrs	r3, r1
 80047ca:	4920      	ldr	r1, [pc, #128]	; (800484c <MX_LWIP_Init+0x268>)
 80047cc:	78c9      	ldrb	r1, [r1, #3]
 80047ce:	430b      	orrs	r3, r1
 80047d0:	0e1b      	lsrs	r3, r3, #24
 80047d2:	4313      	orrs	r3, r2
 80047d4:	4a20      	ldr	r2, [pc, #128]	; (8004858 <MX_LWIP_Init+0x274>)
 80047d6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80047d8:	4b20      	ldr	r3, [pc, #128]	; (800485c <MX_LWIP_Init+0x278>)
 80047da:	9302      	str	r3, [sp, #8]
 80047dc:	4b20      	ldr	r3, [pc, #128]	; (8004860 <MX_LWIP_Init+0x27c>)
 80047de:	9301      	str	r3, [sp, #4]
 80047e0:	2300      	movs	r3, #0
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	4b1c      	ldr	r3, [pc, #112]	; (8004858 <MX_LWIP_Init+0x274>)
 80047e6:	4a1b      	ldr	r2, [pc, #108]	; (8004854 <MX_LWIP_Init+0x270>)
 80047e8:	4919      	ldr	r1, [pc, #100]	; (8004850 <MX_LWIP_Init+0x26c>)
 80047ea:	481e      	ldr	r0, [pc, #120]	; (8004864 <MX_LWIP_Init+0x280>)
 80047ec:	f004 fbfe 	bl	8008fec <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80047f0:	481c      	ldr	r0, [pc, #112]	; (8004864 <MX_LWIP_Init+0x280>)
 80047f2:	f004 fdad 	bl	8009350 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80047f6:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <MX_LWIP_Init+0x280>)
 80047f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047fc:	089b      	lsrs	r3, r3, #2
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004808:	4816      	ldr	r0, [pc, #88]	; (8004864 <MX_LWIP_Init+0x280>)
 800480a:	f004 fdb1 	bl	8009370 <netif_set_up>
 800480e:	e002      	b.n	8004816 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004810:	4814      	ldr	r0, [pc, #80]	; (8004864 <MX_LWIP_Init+0x280>)
 8004812:	f004 fe19 	bl	8009448 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004816:	4914      	ldr	r1, [pc, #80]	; (8004868 <MX_LWIP_Init+0x284>)
 8004818:	4812      	ldr	r0, [pc, #72]	; (8004864 <MX_LWIP_Init+0x280>)
 800481a:	f004 feab 	bl	8009574 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800481e:	4b13      	ldr	r3, [pc, #76]	; (800486c <MX_LWIP_Init+0x288>)
 8004820:	1d3c      	adds	r4, r7, #4
 8004822:	461d      	mov	r5, r3
 8004824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004828:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800482c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004830:	1d3b      	adds	r3, r7, #4
 8004832:	490c      	ldr	r1, [pc, #48]	; (8004864 <MX_LWIP_Init+0x280>)
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fd55 	bl	80052e4 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800483a:	bf00      	nop
 800483c:	3720      	adds	r7, #32
 800483e:	46bd      	mov	sp, r7
 8004840:	bdb0      	pop	{r4, r5, r7, pc}
 8004842:	bf00      	nop
 8004844:	240003e4 	.word	0x240003e4
 8004848:	240003e8 	.word	0x240003e8
 800484c:	240003ec 	.word	0x240003ec
 8004850:	240003d8 	.word	0x240003d8
 8004854:	240003dc 	.word	0x240003dc
 8004858:	240003e0 	.word	0x240003e0
 800485c:	08008249 	.word	0x08008249
 8004860:	08004d0d 	.word	0x08004d0d
 8004864:	240003a4 	.word	0x240003a4
 8004868:	08004871 	.word	0x08004871
 800486c:	08013ac8 	.word	0x08013ac8

08004870 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800488c:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <HAL_ETH_RxCpltCallback+0x1c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fe71 	bl	8005578 <osSemaphoreRelease>
}
 8004896:	bf00      	nop
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	24004d7c 	.word	0x24004d7c

080048a4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80048ac:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <HAL_ETH_TxCpltCallback+0x1c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fe61 	bl	8005578 <osSemaphoreRelease>
}
 80048b6:	bf00      	nop
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	24004d80 	.word	0x24004d80

080048c4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7fd fc31 	bl	8002134 <HAL_ETH_GetDMAError>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d8:	2b80      	cmp	r3, #128	; 0x80
 80048da:	d104      	bne.n	80048e6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80048dc:	4b04      	ldr	r3, [pc, #16]	; (80048f0 <HAL_ETH_ErrorCallback+0x2c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fe49 	bl	8005578 <osSemaphoreRelease>
  }
}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	24004d7c 	.word	0x24004d7c

080048f4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80048f4:	b5b0      	push	{r4, r5, r7, lr}
 80048f6:	b0a8      	sub	sp, #160	; 0xa0
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8004902:	2300      	movs	r3, #0
 8004904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8004908:	2300      	movs	r3, #0
 800490a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800490e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004912:	2264      	movs	r2, #100	; 0x64
 8004914:	2100      	movs	r1, #0
 8004916:	4618      	mov	r0, r3
 8004918:	f00e f9a5 	bl	8012c66 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800491c:	4b84      	ldr	r3, [pc, #528]	; (8004b30 <low_level_init+0x23c>)
 800491e:	4a85      	ldr	r2, [pc, #532]	; (8004b34 <low_level_init+0x240>)
 8004920:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004922:	2300      	movs	r3, #0
 8004924:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8004928:	2380      	movs	r3, #128	; 0x80
 800492a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800492e:	23e1      	movs	r3, #225	; 0xe1
 8004930:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8004934:	2300      	movs	r3, #0
 8004936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0xAA;
 800493a:	23aa      	movs	r3, #170	; 0xaa
 800493c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0xBB;
 8004940:	23bb      	movs	r3, #187	; 0xbb
 8004942:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8004946:	4a7a      	ldr	r2, [pc, #488]	; (8004b30 <low_level_init+0x23c>)
 8004948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800494c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800494e:	4b78      	ldr	r3, [pc, #480]	; (8004b30 <low_level_init+0x23c>)
 8004950:	2201      	movs	r2, #1
 8004952:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004954:	4b76      	ldr	r3, [pc, #472]	; (8004b30 <low_level_init+0x23c>)
 8004956:	4a78      	ldr	r2, [pc, #480]	; (8004b38 <low_level_init+0x244>)
 8004958:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800495a:	4b75      	ldr	r3, [pc, #468]	; (8004b30 <low_level_init+0x23c>)
 800495c:	4a77      	ldr	r2, [pc, #476]	; (8004b3c <low_level_init+0x248>)
 800495e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004960:	4b73      	ldr	r3, [pc, #460]	; (8004b30 <low_level_init+0x23c>)
 8004962:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004966:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004968:	4871      	ldr	r0, [pc, #452]	; (8004b30 <low_level_init+0x23c>)
 800496a:	f7fc fc03 	bl	8001174 <HAL_ETH_Init>
 800496e:	4603      	mov	r3, r0
 8004970:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004974:	2238      	movs	r2, #56	; 0x38
 8004976:	2100      	movs	r1, #0
 8004978:	4871      	ldr	r0, [pc, #452]	; (8004b40 <low_level_init+0x24c>)
 800497a:	f00e f974 	bl	8012c66 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800497e:	4b70      	ldr	r3, [pc, #448]	; (8004b40 <low_level_init+0x24c>)
 8004980:	2221      	movs	r2, #33	; 0x21
 8004982:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004984:	4b6e      	ldr	r3, [pc, #440]	; (8004b40 <low_level_init+0x24c>)
 8004986:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800498a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800498c:	4b6c      	ldr	r3, [pc, #432]	; (8004b40 <low_level_init+0x24c>)
 800498e:	2200      	movs	r2, #0
 8004990:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004992:	486c      	ldr	r0, [pc, #432]	; (8004b44 <low_level_init+0x250>)
 8004994:	f004 f9e4 	bl	8008d60 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2206      	movs	r2, #6
 800499c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80049a0:	4b63      	ldr	r3, [pc, #396]	; (8004b30 <low_level_init+0x23c>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	781a      	ldrb	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80049ac:	4b60      	ldr	r3, [pc, #384]	; (8004b30 <low_level_init+0x23c>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	785a      	ldrb	r2, [r3, #1]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80049b8:	4b5d      	ldr	r3, [pc, #372]	; (8004b30 <low_level_init+0x23c>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	789a      	ldrb	r2, [r3, #2]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80049c4:	4b5a      	ldr	r3, [pc, #360]	; (8004b30 <low_level_init+0x23c>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	78da      	ldrb	r2, [r3, #3]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80049d0:	4b57      	ldr	r3, [pc, #348]	; (8004b30 <low_level_init+0x23c>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	791a      	ldrb	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80049dc:	4b54      	ldr	r3, [pc, #336]	; (8004b30 <low_level_init+0x23c>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	795a      	ldrb	r2, [r3, #5]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80049ee:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80049f6:	f043 030a 	orr.w	r3, r3, #10
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004a02:	2203      	movs	r2, #3
 8004a04:	2100      	movs	r1, #0
 8004a06:	2001      	movs	r0, #1
 8004a08:	f001 f85c 	bl	8005ac4 <xQueueGenericCreate>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	4a4e      	ldr	r2, [pc, #312]	; (8004b48 <low_level_init+0x254>)
 8004a10:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004a12:	2203      	movs	r2, #3
 8004a14:	2100      	movs	r1, #0
 8004a16:	2001      	movs	r0, #1
 8004a18:	f001 f854 	bl	8005ac4 <xQueueGenericCreate>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4a4b      	ldr	r2, [pc, #300]	; (8004b4c <low_level_init+0x258>)
 8004a20:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004a22:	4b4b      	ldr	r3, [pc, #300]	; (8004b50 <low_level_init+0x25c>)
 8004a24:	f107 0408 	add.w	r4, r7, #8
 8004a28:	461d      	mov	r5, r3
 8004a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004a36:	f107 0308 	add.w	r3, r7, #8
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fc51 	bl	80052e4 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004a42:	4944      	ldr	r1, [pc, #272]	; (8004b54 <low_level_init+0x260>)
 8004a44:	4844      	ldr	r0, [pc, #272]	; (8004b58 <low_level_init+0x264>)
 8004a46:	f7fc f8d8 	bl	8000bfa <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004a4a:	4843      	ldr	r0, [pc, #268]	; (8004b58 <low_level_init+0x264>)
 8004a4c:	f7fc f907 	bl	8000c5e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004a50:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d164      	bne.n	8004b22 <low_level_init+0x22e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004a58:	483f      	ldr	r0, [pc, #252]	; (8004b58 <low_level_init+0x264>)
 8004a5a:	f7fc f9a8 	bl	8000dae <LAN8742_GetLinkState>
 8004a5e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004a62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	dc06      	bgt.n	8004a78 <low_level_init+0x184>
    {
      netif_set_link_down(netif);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f004 fd52 	bl	8009514 <netif_set_link_down>
      netif_set_down(netif);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f004 fce9 	bl	8009448 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004a76:	e056      	b.n	8004b26 <low_level_init+0x232>
      switch (PHYLinkState)
 8004a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a7c:	3b02      	subs	r3, #2
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d82a      	bhi.n	8004ad8 <low_level_init+0x1e4>
 8004a82:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <low_level_init+0x194>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004a99 	.word	0x08004a99
 8004a8c:	08004aab 	.word	0x08004aab
 8004a90:	08004abb 	.word	0x08004abb
 8004a94:	08004acb 	.word	0x08004acb
        duplex = ETH_FULLDUPLEX_MODE;
 8004a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004aa0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004aa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004aa8:	e01f      	b.n	8004aea <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004ab0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004ab8:	e017      	b.n	8004aea <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 8004aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004ac8:	e00f      	b.n	8004aea <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 8004aca:	2300      	movs	r3, #0
 8004acc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004ad6:	e008      	b.n	8004aea <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 8004ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004adc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004ae0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004ae8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004aea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004aee:	4619      	mov	r1, r3
 8004af0:	480f      	ldr	r0, [pc, #60]	; (8004b30 <low_level_init+0x23c>)
 8004af2:	f7fd f8d9 	bl	8001ca8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004af6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004afa:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b00:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b06:	4619      	mov	r1, r3
 8004b08:	4809      	ldr	r0, [pc, #36]	; (8004b30 <low_level_init+0x23c>)
 8004b0a:	f7fd faa1 	bl	8002050 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004b0e:	4808      	ldr	r0, [pc, #32]	; (8004b30 <low_level_init+0x23c>)
 8004b10:	f7fc fc16 	bl	8001340 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f004 fc2b 	bl	8009370 <netif_set_up>
    netif_set_link_up(netif);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f004 fcc6 	bl	80094ac <netif_set_link_up>
}
 8004b20:	e001      	b.n	8004b26 <low_level_init+0x232>
    Error_Handler();
 8004b22:	f7fb fe41 	bl	80007a8 <Error_Handler>
}
 8004b26:	bf00      	nop
 8004b28:	37a0      	adds	r7, #160	; 0xa0
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	24004d84 	.word	0x24004d84
 8004b34:	40028000 	.word	0x40028000
 8004b38:	30040060 	.word	0x30040060
 8004b3c:	30040000 	.word	0x30040000
 8004b40:	24004e34 	.word	0x24004e34
 8004b44:	080165fc 	.word	0x080165fc
 8004b48:	24004d7c 	.word	0x24004d7c
 8004b4c:	24004d80 	.word	0x24004d80
 8004b50:	08013aec 	.word	0x08013aec
 8004b54:	24000010 	.word	0x24000010
 8004b58:	24004e6c 	.word	0x24004e6c

08004b5c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b092      	sub	sp, #72	; 0x48
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004b74:	f107 030c 	add.w	r3, r7, #12
 8004b78:	2230      	movs	r2, #48	; 0x30
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f00e f872 	bl	8012c66 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004b82:	f107 030c 	add.w	r3, r7, #12
 8004b86:	2230      	movs	r2, #48	; 0x30
 8004b88:	2100      	movs	r1, #0
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f00e f86b 	bl	8012c66 <memset>

  for(q = p; q != NULL; q = q->next)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	643b      	str	r3, [r7, #64]	; 0x40
 8004b94:	e045      	b.n	8004c22 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d902      	bls.n	8004ba2 <low_level_output+0x46>
      return ERR_IF;
 8004b9c:	f06f 030b 	mvn.w	r3, #11
 8004ba0:	e065      	b.n	8004c6e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8004ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba4:	6859      	ldr	r1, [r3, #4]
 8004ba6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ba8:	4613      	mov	r3, r2
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	3348      	adds	r3, #72	; 0x48
 8004bb2:	443b      	add	r3, r7
 8004bb4:	3b3c      	subs	r3, #60	; 0x3c
 8004bb6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bba:	895b      	ldrh	r3, [r3, #10]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	3348      	adds	r3, #72	; 0x48
 8004bca:	443b      	add	r3, r7
 8004bcc:	3b38      	subs	r3, #56	; 0x38
 8004bce:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d011      	beq.n	8004bfa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd8:	1e5a      	subs	r2, r3, #1
 8004bda:	f107 000c 	add.w	r0, r7, #12
 8004bde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004be0:	460b      	mov	r3, r1
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	440b      	add	r3, r1
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	18c1      	adds	r1, r0, r3
 8004bea:	4613      	mov	r3, r2
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	3348      	adds	r3, #72	; 0x48
 8004bf4:	443b      	add	r3, r7
 8004bf6:	3b34      	subs	r3, #52	; 0x34
 8004bf8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004c02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c04:	4613      	mov	r3, r2
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	3348      	adds	r3, #72	; 0x48
 8004c0e:	443b      	add	r3, r7
 8004c10:	3b34      	subs	r3, #52	; 0x34
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c18:	3301      	adds	r3, #1
 8004c1a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	643b      	str	r3, [r7, #64]	; 0x40
 8004c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1b6      	bne.n	8004b96 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	891b      	ldrh	r3, [r3, #8]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <low_level_output+0x11c>)
 8004c30:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004c32:	4a11      	ldr	r2, [pc, #68]	; (8004c78 <low_level_output+0x11c>)
 8004c34:	f107 030c 	add.w	r3, r7, #12
 8004c38:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004c3a:	4a0f      	ldr	r2, [pc, #60]	; (8004c78 <low_level_output+0x11c>)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004c40:	6838      	ldr	r0, [r7, #0]
 8004c42:	f005 f8e9 	bl	8009e18 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004c46:	490c      	ldr	r1, [pc, #48]	; (8004c78 <low_level_output+0x11c>)
 8004c48:	480c      	ldr	r0, [pc, #48]	; (8004c7c <low_level_output+0x120>)
 8004c4a:	f7fc fc7d 	bl	8001548 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004c4e:	bf00      	nop
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <low_level_output+0x124>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fc3f 	bl	80054dc <osSemaphoreWait>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1f5      	bne.n	8004c50 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004c64:	4805      	ldr	r0, [pc, #20]	; (8004c7c <low_level_output+0x120>)
 8004c66:	f7fc fdee 	bl	8001846 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004c6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3748      	adds	r7, #72	; 0x48
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	24004e34 	.word	0x24004e34
 8004c7c:	24004d84 	.word	0x24004d84
 8004c80:	24004d80 	.word	0x24004d80

08004c84 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <low_level_input+0x2c>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d105      	bne.n	8004ca4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004c98:	f107 030c 	add.w	r3, r7, #12
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4805      	ldr	r0, [pc, #20]	; (8004cb4 <low_level_input+0x30>)
 8004ca0:	f7fc fca3 	bl	80015ea <HAL_ETH_ReadData>
  }

  return p;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	24004d78 	.word	0x24004d78
 8004cb4:	24004d84 	.word	0x24004d84

08004cb8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <ethernetif_input+0x50>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fc03 	bl	80054dc <osSemaphoreWait>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f5      	bne.n	8004cc8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004cdc:	68b8      	ldr	r0, [r7, #8]
 8004cde:	f7ff ffd1 	bl	8004c84 <low_level_input>
 8004ce2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	4798      	blx	r3
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f004 ffe6 	bl	8009ccc <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1ea      	bne.n	8004cdc <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004d06:	e7df      	b.n	8004cc8 <ethernetif_input+0x10>
 8004d08:	24004d7c 	.word	0x24004d7c

08004d0c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <ethernetif_init+0x1c>
 8004d1a:	4b0e      	ldr	r3, [pc, #56]	; (8004d54 <ethernetif_init+0x48>)
 8004d1c:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8004d20:	490d      	ldr	r1, [pc, #52]	; (8004d58 <ethernetif_init+0x4c>)
 8004d22:	480e      	ldr	r0, [pc, #56]	; (8004d5c <ethernetif_init+0x50>)
 8004d24:	f00d ff3a 	bl	8012b9c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2273      	movs	r2, #115	; 0x73
 8004d2c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2274      	movs	r2, #116	; 0x74
 8004d34:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <ethernetif_init+0x54>)
 8004d3c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a08      	ldr	r2, [pc, #32]	; (8004d64 <ethernetif_init+0x58>)
 8004d42:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7ff fdd5 	bl	80048f4 <low_level_init>

  return ERR_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	08013b08 	.word	0x08013b08
 8004d58:	08013b24 	.word	0x08013b24
 8004d5c:	08013b34 	.word	0x08013b34
 8004d60:	08010a55 	.word	0x08010a55
 8004d64:	08004b5d 	.word	0x08004b5d

08004d68 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004d74:	68f9      	ldr	r1, [r7, #12]
 8004d76:	4809      	ldr	r0, [pc, #36]	; (8004d9c <pbuf_free_custom+0x34>)
 8004d78:	f004 f8e2 	bl	8008f40 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004d7c:	4b08      	ldr	r3, [pc, #32]	; (8004da0 <pbuf_free_custom+0x38>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d107      	bne.n	8004d94 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <pbuf_free_custom+0x38>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004d8a:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <pbuf_free_custom+0x3c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fbf2 	bl	8005578 <osSemaphoreRelease>
  }
}
 8004d94:	bf00      	nop
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	080165fc 	.word	0x080165fc
 8004da0:	24004d78 	.word	0x24004d78
 8004da4:	24004d7c 	.word	0x24004d7c

08004da8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004dac:	f7fc f8d6 	bl	8000f5c <HAL_GetTick>
 8004db0:	4603      	mov	r3, r0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08e      	sub	sp, #56	; 0x38
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	605a      	str	r2, [r3, #4]
 8004dca:	609a      	str	r2, [r3, #8]
 8004dcc:	60da      	str	r2, [r3, #12]
 8004dce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a5d      	ldr	r2, [pc, #372]	; (8004f4c <HAL_ETH_MspInit+0x194>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	f040 80b3 	bne.w	8004f42 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004ddc:	4b5c      	ldr	r3, [pc, #368]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004dde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004de2:	4a5b      	ldr	r2, [pc, #364]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004dec:	4b58      	ldr	r3, [pc, #352]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004dee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004df6:	623b      	str	r3, [r7, #32]
 8004df8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004dfa:	4b55      	ldr	r3, [pc, #340]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004dfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004e00:	4a53      	ldr	r2, [pc, #332]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e06:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004e0a:	4b51      	ldr	r3, [pc, #324]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004e0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e14:	61fb      	str	r3, [r7, #28]
 8004e16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004e18:	4b4d      	ldr	r3, [pc, #308]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004e1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004e1e:	4a4c      	ldr	r2, [pc, #304]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e24:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004e28:	4b49      	ldr	r3, [pc, #292]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004e2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004e36:	4b46      	ldr	r3, [pc, #280]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e3c:	4a44      	ldr	r2, [pc, #272]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e46:	4b42      	ldr	r3, [pc, #264]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e54:	4b3e      	ldr	r3, [pc, #248]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e5a:	4a3d      	ldr	r2, [pc, #244]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004e5c:	f043 0304 	orr.w	r3, r3, #4
 8004e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e64:	4b3a      	ldr	r3, [pc, #232]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e72:	4b37      	ldr	r3, [pc, #220]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e78:	4a35      	ldr	r2, [pc, #212]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e82:	4b33      	ldr	r3, [pc, #204]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e90:	4b2f      	ldr	r3, [pc, #188]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e96:	4a2e      	ldr	r2, [pc, #184]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004e98:	f043 0302 	orr.w	r3, r3, #2
 8004e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ea0:	4b2b      	ldr	r3, [pc, #172]	; (8004f50 <HAL_ETH_MspInit+0x198>)
 8004ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	60bb      	str	r3, [r7, #8]
 8004eac:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PA7     ------> ETH_CRS_DV
    PB11     ------> ETH_TX_EN
    */
    GPIO_InitStruct.Pin = MII_TXD1_Pin;
 8004eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ec0:	230b      	movs	r3, #11
 8004ec2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4822      	ldr	r0, [pc, #136]	; (8004f54 <HAL_ETH_MspInit+0x19c>)
 8004ecc:	f7fd feb4 	bl	8002c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_RXD0_Pin|MII_RXD1_Pin;
 8004ed0:	2332      	movs	r3, #50	; 0x32
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004edc:	2303      	movs	r3, #3
 8004ede:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ee0:	230b      	movs	r3, #11
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ee8:	4619      	mov	r1, r3
 8004eea:	481b      	ldr	r0, [pc, #108]	; (8004f58 <HAL_ETH_MspInit+0x1a0>)
 8004eec:	f7fd fea4 	bl	8002c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_REF_CLK_Pin|MII_MDIO_Pin|MII_CSR_DV_Pin;
 8004ef0:	2386      	movs	r3, #134	; 0x86
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004efc:	2303      	movs	r3, #3
 8004efe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f00:	230b      	movs	r3, #11
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4814      	ldr	r0, [pc, #80]	; (8004f5c <HAL_ETH_MspInit+0x1a4>)
 8004f0c:	f7fd fe94 	bl	8002c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD0_Pin|MII_TX_EN_Pin;
 8004f10:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f16:	2302      	movs	r3, #2
 8004f18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f22:	230b      	movs	r3, #11
 8004f24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	480c      	ldr	r0, [pc, #48]	; (8004f60 <HAL_ETH_MspInit+0x1a8>)
 8004f2e:	f7fd fe83 	bl	8002c38 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004f32:	2200      	movs	r2, #0
 8004f34:	2105      	movs	r1, #5
 8004f36:	203d      	movs	r0, #61	; 0x3d
 8004f38:	f7fc f8f4 	bl	8001124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004f3c:	203d      	movs	r0, #61	; 0x3d
 8004f3e:	f7fc f90b 	bl	8001158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004f42:	bf00      	nop
 8004f44:	3738      	adds	r7, #56	; 0x38
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40028000 	.word	0x40028000
 8004f50:	58024400 	.word	0x58024400
 8004f54:	58021800 	.word	0x58021800
 8004f58:	58020800 	.word	0x58020800
 8004f5c:	58020000 	.word	0x58020000
 8004f60:	58020400 	.word	0x58020400

08004f64 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004f68:	4802      	ldr	r0, [pc, #8]	; (8004f74 <ETH_PHY_IO_Init+0x10>)
 8004f6a:	f7fd f88b 	bl	8002084 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	24004d84 	.word	0x24004d84

08004f78 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  return 0;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	68f9      	ldr	r1, [r7, #12]
 8004f9a:	4807      	ldr	r0, [pc, #28]	; (8004fb8 <ETH_PHY_IO_ReadReg+0x30>)
 8004f9c:	f7fc fddc 	bl	8001b58 <HAL_ETH_ReadPHYRegister>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004faa:	e000      	b.n	8004fae <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	24004d84 	.word	0x24004d84

08004fbc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	68f9      	ldr	r1, [r7, #12]
 8004fce:	4807      	ldr	r0, [pc, #28]	; (8004fec <ETH_PHY_IO_WriteReg+0x30>)
 8004fd0:	f7fc fe16 	bl	8001c00 <HAL_ETH_WritePHYRegister>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fde:	e000      	b.n	8004fe2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	24004d84 	.word	0x24004d84

08004ff0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004ff4:	f7fb ffb2 	bl	8000f5c <HAL_GetTick>
 8004ff8:	4603      	mov	r3, r0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b0a0      	sub	sp, #128	; 0x80
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005008:	f107 0308 	add.w	r3, r7, #8
 800500c:	2264      	movs	r2, #100	; 0x64
 800500e:	2100      	movs	r1, #0
 8005010:	4618      	mov	r0, r3
 8005012:	f00d fe28 	bl	8012c66 <memset>
  int32_t PHYLinkState = 0;
 8005016:	2300      	movs	r3, #0
 8005018:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800501e:	2300      	movs	r3, #0
 8005020:	67bb      	str	r3, [r7, #120]	; 0x78
 8005022:	2300      	movs	r3, #0
 8005024:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800502a:	483a      	ldr	r0, [pc, #232]	; (8005114 <ethernet_link_thread+0x114>)
 800502c:	f7fb febf 	bl	8000dae <LAN8742_GetLinkState>
 8005030:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005034:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005038:	089b      	lsrs	r3, r3, #2
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00c      	beq.n	800505e <ethernet_link_thread+0x5e>
 8005044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005046:	2b01      	cmp	r3, #1
 8005048:	dc09      	bgt.n	800505e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800504a:	4833      	ldr	r0, [pc, #204]	; (8005118 <ethernet_link_thread+0x118>)
 800504c:	f7fc fa04 	bl	8001458 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005050:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005052:	f004 f9f9 	bl	8009448 <netif_set_down>
    netif_set_link_down(netif);
 8005056:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005058:	f004 fa5c 	bl	8009514 <netif_set_link_down>
 800505c:	e055      	b.n	800510a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800505e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005060:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d14e      	bne.n	800510a <ethernet_link_thread+0x10a>
 800506c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800506e:	2b01      	cmp	r3, #1
 8005070:	dd4b      	ble.n	800510a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005074:	3b02      	subs	r3, #2
 8005076:	2b03      	cmp	r3, #3
 8005078:	d82a      	bhi.n	80050d0 <ethernet_link_thread+0xd0>
 800507a:	a201      	add	r2, pc, #4	; (adr r2, 8005080 <ethernet_link_thread+0x80>)
 800507c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005080:	08005091 	.word	0x08005091
 8005084:	080050a3 	.word	0x080050a3
 8005088:	080050b3 	.word	0x080050b3
 800508c:	080050c3 	.word	0x080050c3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005094:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005096:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800509a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800509c:	2301      	movs	r3, #1
 800509e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80050a0:	e017      	b.n	80050d2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80050a2:	2300      	movs	r3, #0
 80050a4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80050a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050aa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80050ac:	2301      	movs	r3, #1
 80050ae:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80050b0:	e00f      	b.n	80050d2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80050b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050b6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80050b8:	2300      	movs	r3, #0
 80050ba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80050bc:	2301      	movs	r3, #1
 80050be:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80050c0:	e007      	b.n	80050d2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80050c2:	2300      	movs	r3, #0
 80050c4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80050c6:	2300      	movs	r3, #0
 80050c8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80050ca:	2301      	movs	r3, #1
 80050cc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80050ce:	e000      	b.n	80050d2 <ethernet_link_thread+0xd2>
    default:
      break;
 80050d0:	bf00      	nop
    }

    if(linkchanged)
 80050d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d018      	beq.n	800510a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80050d8:	f107 0308 	add.w	r3, r7, #8
 80050dc:	4619      	mov	r1, r3
 80050de:	480e      	ldr	r0, [pc, #56]	; (8005118 <ethernet_link_thread+0x118>)
 80050e0:	f7fc fde2 	bl	8001ca8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80050e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050e6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80050e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050ea:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80050ec:	f107 0308 	add.w	r3, r7, #8
 80050f0:	4619      	mov	r1, r3
 80050f2:	4809      	ldr	r0, [pc, #36]	; (8005118 <ethernet_link_thread+0x118>)
 80050f4:	f7fc ffac 	bl	8002050 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80050f8:	4807      	ldr	r0, [pc, #28]	; (8005118 <ethernet_link_thread+0x118>)
 80050fa:	f7fc f921 	bl	8001340 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80050fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005100:	f004 f936 	bl	8009370 <netif_set_up>
      netif_set_link_up(netif);
 8005104:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005106:	f004 f9d1 	bl	80094ac <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800510a:	2064      	movs	r0, #100	; 0x64
 800510c:	f000 f936 	bl	800537c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005110:	e78b      	b.n	800502a <ethernet_link_thread+0x2a>
 8005112:	bf00      	nop
 8005114:	24004e6c 	.word	0x24004e6c
 8005118:	24004d84 	.word	0x24004d84

0800511c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af02      	add	r7, sp, #8
 8005122:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005124:	4812      	ldr	r0, [pc, #72]	; (8005170 <HAL_ETH_RxAllocateCallback+0x54>)
 8005126:	f003 fe97 	bl	8008e58 <memp_malloc_pool>
 800512a:	60f8      	str	r0, [r7, #12]
  if (p)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d014      	beq.n	800515c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f103 0220 	add.w	r2, r3, #32
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4a0d      	ldr	r2, [pc, #52]	; (8005174 <HAL_ETH_RxAllocateCallback+0x58>)
 8005140:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800514a:	9201      	str	r2, [sp, #4]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2241      	movs	r2, #65	; 0x41
 8005152:	2100      	movs	r1, #0
 8005154:	2000      	movs	r0, #0
 8005156:	f004 fc01 	bl	800995c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800515a:	e005      	b.n	8005168 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800515c:	4b06      	ldr	r3, [pc, #24]	; (8005178 <HAL_ETH_RxAllocateCallback+0x5c>)
 800515e:	2201      	movs	r2, #1
 8005160:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
}
 8005168:	bf00      	nop
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	080165fc 	.word	0x080165fc
 8005174:	08004d69 	.word	0x08004d69
 8005178:	24004d78 	.word	0x24004d78

0800517c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800517c:	b480      	push	{r7}
 800517e:	b08d      	sub	sp, #52	; 0x34
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 8005192:	2300      	movs	r3, #0
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3b20      	subs	r3, #32
 800519a:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 800519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80051a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a4:	2200      	movs	r2, #0
 80051a6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80051a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051aa:	887a      	ldrh	r2, [r7, #2]
 80051ac:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d103      	bne.n	80051be <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80051b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e003      	b.n	80051c6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051c4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ca:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d2:	e009      	b.n	80051e8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80051d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d6:	891a      	ldrh	r2, [r3, #8]
 80051d8:	887b      	ldrh	r3, [r7, #2]
 80051da:	4413      	add	r3, r2
 80051dc:	b29a      	uxth	r2, r3
 80051de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80051e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f2      	bne.n	80051d4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80051ee:	887b      	ldrh	r3, [r7, #2]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	623a      	str	r2, [r7, #32]
 80051f4:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	dd1d      	ble.n	8005238 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	f003 021f 	and.w	r2, r3, #31
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800520c:	f3bf 8f4f 	dsb	sy
}
 8005210:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8005212:	4a0d      	ldr	r2, [pc, #52]	; (8005248 <HAL_ETH_RxLinkCallback+0xcc>)
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	3320      	adds	r3, #32
 800521e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	3b20      	subs	r3, #32
 8005224:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	dcf2      	bgt.n	8005212 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800522c:	f3bf 8f4f 	dsb	sy
}
 8005230:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005232:	f3bf 8f6f 	isb	sy
}
 8005236:	bf00      	nop
}
 8005238:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800523a:	bf00      	nop
 800523c:	3734      	adds	r7, #52	; 0x34
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	e000ed00 	.word	0xe000ed00

0800524c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f004 fd39 	bl	8009ccc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800525a:	bf00      	nop
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005262:	b480      	push	{r7}
 8005264:	b085      	sub	sp, #20
 8005266:	af00      	add	r7, sp, #0
 8005268:	4603      	mov	r3, r0
 800526a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005270:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005274:	2b84      	cmp	r3, #132	; 0x84
 8005276:	d005      	beq.n	8005284 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005278:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	3303      	adds	r3, #3
 8005282:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005284:	68fb      	ldr	r3, [r7, #12]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005298:	f3ef 8305 	mrs	r3, IPSR
 800529c:	607b      	str	r3, [r7, #4]
  return(result);
 800529e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	bf14      	ite	ne
 80052a4:	2301      	movne	r3, #1
 80052a6:	2300      	moveq	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80052ba:	f001 fc41 	bl	8006b40 <vTaskStartScheduler>
  
  return osOK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80052c8:	f7ff ffe3 	bl	8005292 <inHandlerMode>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80052d2:	f001 fd59 	bl	8006d88 <xTaskGetTickCountFromISR>
 80052d6:	4603      	mov	r3, r0
 80052d8:	e002      	b.n	80052e0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80052da:	f001 fd45 	bl	8006d68 <xTaskGetTickCount>
 80052de:	4603      	mov	r3, r0
  }
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80052e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052e6:	b089      	sub	sp, #36	; 0x24
 80052e8:	af04      	add	r7, sp, #16
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d020      	beq.n	8005338 <osThreadCreate+0x54>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d01c      	beq.n	8005338 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685c      	ldr	r4, [r3, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691e      	ldr	r6, [r3, #16]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff ffa6 	bl	8005262 <makeFreeRtosPriority>
 8005316:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005320:	9202      	str	r2, [sp, #8]
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	9100      	str	r1, [sp, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	4632      	mov	r2, r6
 800532a:	4629      	mov	r1, r5
 800532c:	4620      	mov	r0, r4
 800532e:	f001 fa29 	bl	8006784 <xTaskCreateStatic>
 8005332:	4603      	mov	r3, r0
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	e01c      	b.n	8005372 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685c      	ldr	r4, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005344:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff ff88 	bl	8005262 <makeFreeRtosPriority>
 8005352:	4602      	mov	r2, r0
 8005354:	f107 030c 	add.w	r3, r7, #12
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	9200      	str	r2, [sp, #0]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	4632      	mov	r2, r6
 8005360:	4629      	mov	r1, r5
 8005362:	4620      	mov	r0, r4
 8005364:	f001 fa6b 	bl	800683e <xTaskCreate>
 8005368:	4603      	mov	r3, r0
 800536a:	2b01      	cmp	r3, #1
 800536c:	d001      	beq.n	8005372 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800536e:	2300      	movs	r3, #0
 8005370:	e000      	b.n	8005374 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005372:	68fb      	ldr	r3, [r7, #12]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800537c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <osDelay+0x16>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	e000      	b.n	8005394 <osDelay+0x18>
 8005392:	2301      	movs	r3, #1
 8005394:	4618      	mov	r0, r3
 8005396:	f001 fb9f 	bl	8006ad8 <vTaskDelay>
  
  return osOK;
 800539a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	4619      	mov	r1, r3
 80053ba:	2001      	movs	r0, #1
 80053bc:	f000 fc0d 	bl	8005bda <xQueueCreateMutexStatic>
 80053c0:	4603      	mov	r3, r0
 80053c2:	e003      	b.n	80053cc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80053c4:	2001      	movs	r0, #1
 80053c6:	f000 fbf0 	bl	8005baa <xQueueCreateMutex>
 80053ca:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80053de:	2300      	movs	r3, #0
 80053e0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <osMutexWait+0x18>
    return osErrorParameter;
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	e03a      	b.n	8005462 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053f6:	d103      	bne.n	8005400 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80053f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	e009      	b.n	8005414 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d006      	beq.n	8005414 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <osMutexWait+0x40>
      ticks = 1;
 8005410:	2301      	movs	r3, #1
 8005412:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005414:	f7ff ff3d 	bl	8005292 <inHandlerMode>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d017      	beq.n	800544e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800541e:	f107 0308 	add.w	r3, r7, #8
 8005422:	461a      	mov	r2, r3
 8005424:	2100      	movs	r1, #0
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f001 f804 	bl	8006434 <xQueueReceiveFromISR>
 800542c:	4603      	mov	r3, r0
 800542e:	2b01      	cmp	r3, #1
 8005430:	d001      	beq.n	8005436 <osMutexWait+0x62>
      return osErrorOS;
 8005432:	23ff      	movs	r3, #255	; 0xff
 8005434:	e015      	b.n	8005462 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d011      	beq.n	8005460 <osMutexWait+0x8c>
 800543c:	4b0b      	ldr	r3, [pc, #44]	; (800546c <osMutexWait+0x98>)
 800543e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	e008      	b.n	8005460 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800544e:	68f9      	ldr	r1, [r7, #12]
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fee3 	bl	800621c <xQueueSemaphoreTake>
 8005456:	4603      	mov	r3, r0
 8005458:	2b01      	cmp	r3, #1
 800545a:	d001      	beq.n	8005460 <osMutexWait+0x8c>
    return osErrorOS;
 800545c:	23ff      	movs	r3, #255	; 0xff
 800545e:	e000      	b.n	8005462 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	e000ed04 	.word	0xe000ed04

08005470 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800547c:	2300      	movs	r3, #0
 800547e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005480:	f7ff ff07 	bl	8005292 <inHandlerMode>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d016      	beq.n	80054b8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800548a:	f107 0308 	add.w	r3, r7, #8
 800548e:	4619      	mov	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fd56 	bl	8005f42 <xQueueGiveFromISR>
 8005496:	4603      	mov	r3, r0
 8005498:	2b01      	cmp	r3, #1
 800549a:	d001      	beq.n	80054a0 <osMutexRelease+0x30>
      return osErrorOS;
 800549c:	23ff      	movs	r3, #255	; 0xff
 800549e:	e017      	b.n	80054d0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d013      	beq.n	80054ce <osMutexRelease+0x5e>
 80054a6:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <osMutexRelease+0x68>)
 80054a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	e00a      	b.n	80054ce <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80054b8:	2300      	movs	r3, #0
 80054ba:	2200      	movs	r2, #0
 80054bc:	2100      	movs	r1, #0
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fba6 	bl	8005c10 <xQueueGenericSend>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d001      	beq.n	80054ce <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80054ca:	23ff      	movs	r3, #255	; 0xff
 80054cc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80054ce:	68fb      	ldr	r3, [r7, #12]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	e000ed04 	.word	0xe000ed04

080054dc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80054e6:	2300      	movs	r3, #0
 80054e8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80054f0:	2380      	movs	r3, #128	; 0x80
 80054f2:	e03a      	b.n	800556a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054fe:	d103      	bne.n	8005508 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e009      	b.n	800551c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d006      	beq.n	800551c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <osSemaphoreWait+0x40>
      ticks = 1;
 8005518:	2301      	movs	r3, #1
 800551a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800551c:	f7ff feb9 	bl	8005292 <inHandlerMode>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d017      	beq.n	8005556 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005526:	f107 0308 	add.w	r3, r7, #8
 800552a:	461a      	mov	r2, r3
 800552c:	2100      	movs	r1, #0
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 ff80 	bl	8006434 <xQueueReceiveFromISR>
 8005534:	4603      	mov	r3, r0
 8005536:	2b01      	cmp	r3, #1
 8005538:	d001      	beq.n	800553e <osSemaphoreWait+0x62>
      return osErrorOS;
 800553a:	23ff      	movs	r3, #255	; 0xff
 800553c:	e015      	b.n	800556a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d011      	beq.n	8005568 <osSemaphoreWait+0x8c>
 8005544:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <osSemaphoreWait+0x98>)
 8005546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	e008      	b.n	8005568 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005556:	68f9      	ldr	r1, [r7, #12]
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fe5f 	bl	800621c <xQueueSemaphoreTake>
 800555e:	4603      	mov	r3, r0
 8005560:	2b01      	cmp	r3, #1
 8005562:	d001      	beq.n	8005568 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005564:	23ff      	movs	r3, #255	; 0xff
 8005566:	e000      	b.n	800556a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	e000ed04 	.word	0xe000ed04

08005578 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005584:	2300      	movs	r3, #0
 8005586:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005588:	f7ff fe83 	bl	8005292 <inHandlerMode>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d016      	beq.n	80055c0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005592:	f107 0308 	add.w	r3, r7, #8
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fcd2 	bl	8005f42 <xQueueGiveFromISR>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d001      	beq.n	80055a8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80055a4:	23ff      	movs	r3, #255	; 0xff
 80055a6:	e017      	b.n	80055d8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d013      	beq.n	80055d6 <osSemaphoreRelease+0x5e>
 80055ae:	4b0c      	ldr	r3, [pc, #48]	; (80055e0 <osSemaphoreRelease+0x68>)
 80055b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	e00a      	b.n	80055d6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80055c0:	2300      	movs	r3, #0
 80055c2:	2200      	movs	r2, #0
 80055c4:	2100      	movs	r1, #0
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fb22 	bl	8005c10 <xQueueGenericSend>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d001      	beq.n	80055d6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80055d2:	23ff      	movs	r3, #255	; 0xff
 80055d4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80055d6:	68fb      	ldr	r3, [r7, #12]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	e000ed04 	.word	0xe000ed04

080055e4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80055e4:	b590      	push	{r4, r7, lr}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d011      	beq.n	800561a <osMessageCreate+0x36>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00d      	beq.n	800561a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6859      	ldr	r1, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	2400      	movs	r4, #0
 8005610:	9400      	str	r4, [sp, #0]
 8005612:	f000 f9df 	bl	80059d4 <xQueueGenericCreateStatic>
 8005616:	4603      	mov	r3, r0
 8005618:	e008      	b.n	800562c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	4619      	mov	r1, r3
 8005626:	f000 fa4d 	bl	8005ac4 <xQueueGenericCreate>
 800562a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800562c:	4618      	mov	r0, r3
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	bd90      	pop	{r4, r7, pc}

08005634 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005640:	2300      	movs	r3, #0
 8005642:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <osMessagePut+0x1e>
    ticks = 1;
 800564e:	2301      	movs	r3, #1
 8005650:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005652:	f7ff fe1e 	bl	8005292 <inHandlerMode>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d018      	beq.n	800568e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800565c:	f107 0210 	add.w	r2, r7, #16
 8005660:	f107 0108 	add.w	r1, r7, #8
 8005664:	2300      	movs	r3, #0
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fbd0 	bl	8005e0c <xQueueGenericSendFromISR>
 800566c:	4603      	mov	r3, r0
 800566e:	2b01      	cmp	r3, #1
 8005670:	d001      	beq.n	8005676 <osMessagePut+0x42>
      return osErrorOS;
 8005672:	23ff      	movs	r3, #255	; 0xff
 8005674:	e018      	b.n	80056a8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d014      	beq.n	80056a6 <osMessagePut+0x72>
 800567c:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <osMessagePut+0x7c>)
 800567e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	e00b      	b.n	80056a6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800568e:	f107 0108 	add.w	r1, r7, #8
 8005692:	2300      	movs	r3, #0
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 faba 	bl	8005c10 <xQueueGenericSend>
 800569c:	4603      	mov	r3, r0
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d001      	beq.n	80056a6 <osMessagePut+0x72>
      return osErrorOS;
 80056a2:	23ff      	movs	r3, #255	; 0xff
 80056a4:	e000      	b.n	80056a8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	e000ed04 	.word	0xe000ed04

080056b4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80056b4:	b590      	push	{r4, r7, lr}
 80056b6:	b08b      	sub	sp, #44	; 0x2c
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10a      	bne.n	80056e4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	617b      	str	r3, [r7, #20]
    return event;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	461c      	mov	r4, r3
 80056d6:	f107 0314 	add.w	r3, r7, #20
 80056da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80056e2:	e054      	b.n	800578e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80056e4:	2300      	movs	r3, #0
 80056e6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056f2:	d103      	bne.n	80056fc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80056f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
 80056fa:	e009      	b.n	8005710 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d006      	beq.n	8005710 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <osMessageGet+0x5c>
      ticks = 1;
 800570c:	2301      	movs	r3, #1
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005710:	f7ff fdbf 	bl	8005292 <inHandlerMode>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d01c      	beq.n	8005754 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800571a:	f107 0220 	add.w	r2, r7, #32
 800571e:	f107 0314 	add.w	r3, r7, #20
 8005722:	3304      	adds	r3, #4
 8005724:	4619      	mov	r1, r3
 8005726:	68b8      	ldr	r0, [r7, #8]
 8005728:	f000 fe84 	bl	8006434 <xQueueReceiveFromISR>
 800572c:	4603      	mov	r3, r0
 800572e:	2b01      	cmp	r3, #1
 8005730:	d102      	bne.n	8005738 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005732:	2310      	movs	r3, #16
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	e001      	b.n	800573c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005738:	2300      	movs	r3, #0
 800573a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d01d      	beq.n	800577e <osMessageGet+0xca>
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <osMessageGet+0xe4>)
 8005744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	e014      	b.n	800577e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005754:	f107 0314 	add.w	r3, r7, #20
 8005758:	3304      	adds	r3, #4
 800575a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575c:	4619      	mov	r1, r3
 800575e:	68b8      	ldr	r0, [r7, #8]
 8005760:	f000 fc7c 	bl	800605c <xQueueReceive>
 8005764:	4603      	mov	r3, r0
 8005766:	2b01      	cmp	r3, #1
 8005768:	d102      	bne.n	8005770 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800576a:	2310      	movs	r3, #16
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	e006      	b.n	800577e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <osMessageGet+0xc6>
 8005776:	2300      	movs	r3, #0
 8005778:	e000      	b.n	800577c <osMessageGet+0xc8>
 800577a:	2340      	movs	r3, #64	; 0x40
 800577c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	461c      	mov	r4, r3
 8005782:	f107 0314 	add.w	r3, r7, #20
 8005786:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800578a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	372c      	adds	r7, #44	; 0x2c
 8005792:	46bd      	mov	sp, r7
 8005794:	bd90      	pop	{r4, r7, pc}
 8005796:	bf00      	nop
 8005798:	e000ed04 	.word	0xe000ed04

0800579c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f103 0208 	add.w	r2, r3, #8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f103 0208 	add.w	r2, r3, #8
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f103 0208 	add.w	r2, r3, #8
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057f6:	b480      	push	{r7}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	601a      	str	r2, [r3, #0]
}
 8005832:	bf00      	nop
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005854:	d103      	bne.n	800585e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	e00c      	b.n	8005878 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3308      	adds	r3, #8
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e002      	b.n	800586c <vListInsert+0x2e>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	429a      	cmp	r2, r3
 8005876:	d2f6      	bcs.n	8005866 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	601a      	str	r2, [r3, #0]
}
 80058a4:	bf00      	nop
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6892      	ldr	r2, [r2, #8]
 80058c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6852      	ldr	r2, [r2, #4]
 80058d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d103      	bne.n	80058e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	1e5a      	subs	r2, r3, #1
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800592e:	f002 f889 	bl	8007a44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	68f9      	ldr	r1, [r7, #12]
 800593c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800593e:	fb01 f303 	mul.w	r3, r1, r3
 8005942:	441a      	add	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595e:	3b01      	subs	r3, #1
 8005960:	68f9      	ldr	r1, [r7, #12]
 8005962:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005964:	fb01 f303 	mul.w	r3, r1, r3
 8005968:	441a      	add	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	22ff      	movs	r2, #255	; 0xff
 8005972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	22ff      	movs	r2, #255	; 0xff
 800597a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d114      	bne.n	80059ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01a      	beq.n	80059c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3310      	adds	r3, #16
 8005990:	4618      	mov	r0, r3
 8005992:	f001 fb49 	bl	8007028 <xTaskRemoveFromEventList>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d012      	beq.n	80059c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800599c:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <xQueueGenericReset+0xcc>)
 800599e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	e009      	b.n	80059c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3310      	adds	r3, #16
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff fef2 	bl	800579c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3324      	adds	r3, #36	; 0x24
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff feed 	bl	800579c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059c2:	f002 f86f 	bl	8007aa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059c6:	2301      	movs	r3, #1
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	e000ed04 	.word	0xe000ed04

080059d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08e      	sub	sp, #56	; 0x38
 80059d8:	af02      	add	r7, sp, #8
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <xQueueGenericCreateStatic+0x52>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <xQueueGenericCreateStatic+0x56>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <xQueueGenericCreateStatic+0x58>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	623b      	str	r3, [r7, #32]
}
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d102      	bne.n	8005a52 <xQueueGenericCreateStatic+0x7e>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <xQueueGenericCreateStatic+0x82>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <xQueueGenericCreateStatic+0x84>
 8005a56:	2300      	movs	r3, #0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10a      	bne.n	8005a72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	61fb      	str	r3, [r7, #28]
}
 8005a6e:	bf00      	nop
 8005a70:	e7fe      	b.n	8005a70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a72:	2348      	movs	r3, #72	; 0x48
 8005a74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b48      	cmp	r3, #72	; 0x48
 8005a7a:	d00a      	beq.n	8005a92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	61bb      	str	r3, [r7, #24]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00d      	beq.n	8005aba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005aa6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	68b9      	ldr	r1, [r7, #8]
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f83f 	bl	8005b38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3730      	adds	r7, #48	; 0x30
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08a      	sub	sp, #40	; 0x28
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <xQueueGenericCreate+0x2a>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	613b      	str	r3, [r7, #16]
}
 8005aea:	bf00      	nop
 8005aec:	e7fe      	b.n	8005aec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	fb02 f303 	mul.w	r3, r2, r3
 8005af6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	3348      	adds	r3, #72	; 0x48
 8005afc:	4618      	mov	r0, r3
 8005afe:	f002 f8c3 	bl	8007c88 <pvPortMalloc>
 8005b02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d011      	beq.n	8005b2e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	3348      	adds	r3, #72	; 0x48
 8005b12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b1c:	79fa      	ldrb	r2, [r7, #7]
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	4613      	mov	r3, r2
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 f805 	bl	8005b38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
	}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3720      	adds	r7, #32
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d103      	bne.n	8005b54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	e002      	b.n	8005b5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b66:	2101      	movs	r1, #1
 8005b68:	69b8      	ldr	r0, [r7, #24]
 8005b6a:	f7ff fecb 	bl	8005904 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b6e:	bf00      	nop
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00e      	beq.n	8005ba2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005b96:	2300      	movs	r3, #0
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f837 	bl	8005c10 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005ba2:	bf00      	nop
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b086      	sub	sp, #24
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	2300      	movs	r3, #0
 8005bba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005bbc:	79fb      	ldrb	r3, [r7, #7]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	6939      	ldr	r1, [r7, #16]
 8005bc2:	6978      	ldr	r0, [r7, #20]
 8005bc4:	f7ff ff7e 	bl	8005ac4 <xQueueGenericCreate>
 8005bc8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7ff ffd3 	bl	8005b76 <prvInitialiseMutex>

		return xNewQueue;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
	}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b088      	sub	sp, #32
 8005bde:	af02      	add	r7, sp, #8
 8005be0:	4603      	mov	r3, r0
 8005be2:	6039      	str	r1, [r7, #0]
 8005be4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005be6:	2301      	movs	r3, #1
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	2300      	movs	r3, #0
 8005bec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	6939      	ldr	r1, [r7, #16]
 8005bf8:	6978      	ldr	r0, [r7, #20]
 8005bfa:	f7ff feeb 	bl	80059d4 <xQueueGenericCreateStatic>
 8005bfe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f7ff ffb8 	bl	8005b76 <prvInitialiseMutex>

		return xNewQueue;
 8005c06:	68fb      	ldr	r3, [r7, #12]
	}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08e      	sub	sp, #56	; 0x38
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <xQueueGenericSend+0x32>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c3e:	bf00      	nop
 8005c40:	e7fe      	b.n	8005c40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d103      	bne.n	8005c50 <xQueueGenericSend+0x40>
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <xQueueGenericSend+0x44>
 8005c50:	2301      	movs	r3, #1
 8005c52:	e000      	b.n	8005c56 <xQueueGenericSend+0x46>
 8005c54:	2300      	movs	r3, #0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10a      	bne.n	8005c70 <xQueueGenericSend+0x60>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d103      	bne.n	8005c7e <xQueueGenericSend+0x6e>
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <xQueueGenericSend+0x72>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e000      	b.n	8005c84 <xQueueGenericSend+0x74>
 8005c82:	2300      	movs	r3, #0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10a      	bne.n	8005c9e <xQueueGenericSend+0x8e>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	623b      	str	r3, [r7, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	e7fe      	b.n	8005c9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c9e:	f001 fb83 	bl	80073a8 <xTaskGetSchedulerState>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d102      	bne.n	8005cae <xQueueGenericSend+0x9e>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <xQueueGenericSend+0xa2>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <xQueueGenericSend+0xa4>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <xQueueGenericSend+0xbe>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	61fb      	str	r3, [r7, #28]
}
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cce:	f001 feb9 	bl	8007a44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d302      	bcc.n	8005ce4 <xQueueGenericSend+0xd4>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d129      	bne.n	8005d38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	68b9      	ldr	r1, [r7, #8]
 8005ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cea:	f000 fc3b 	bl	8006564 <prvCopyDataToQueue>
 8005cee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d010      	beq.n	8005d1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfa:	3324      	adds	r3, #36	; 0x24
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f001 f993 	bl	8007028 <xTaskRemoveFromEventList>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d013      	beq.n	8005d30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d08:	4b3f      	ldr	r3, [pc, #252]	; (8005e08 <xQueueGenericSend+0x1f8>)
 8005d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	e00a      	b.n	8005d30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d007      	beq.n	8005d30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d20:	4b39      	ldr	r3, [pc, #228]	; (8005e08 <xQueueGenericSend+0x1f8>)
 8005d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d30:	f001 feb8 	bl	8007aa4 <vPortExitCritical>
				return pdPASS;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e063      	b.n	8005e00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d103      	bne.n	8005d46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d3e:	f001 feb1 	bl	8007aa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	e05c      	b.n	8005e00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d106      	bne.n	8005d5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d4c:	f107 0314 	add.w	r3, r7, #20
 8005d50:	4618      	mov	r0, r3
 8005d52:	f001 f9cb 	bl	80070ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d56:	2301      	movs	r3, #1
 8005d58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d5a:	f001 fea3 	bl	8007aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d5e:	f000 ff59 	bl	8006c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d62:	f001 fe6f 	bl	8007a44 <vPortEnterCritical>
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d6c:	b25b      	sxtb	r3, r3
 8005d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d72:	d103      	bne.n	8005d7c <xQueueGenericSend+0x16c>
 8005d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d82:	b25b      	sxtb	r3, r3
 8005d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d88:	d103      	bne.n	8005d92 <xQueueGenericSend+0x182>
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d92:	f001 fe87 	bl	8007aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d96:	1d3a      	adds	r2, r7, #4
 8005d98:	f107 0314 	add.w	r3, r7, #20
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 f9ba 	bl	8007118 <xTaskCheckForTimeOut>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d124      	bne.n	8005df4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005daa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dac:	f000 fcd2 	bl	8006754 <prvIsQueueFull>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d018      	beq.n	8005de8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db8:	3310      	adds	r3, #16
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 f90e 	bl	8006fe0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dc6:	f000 fc5d 	bl	8006684 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dca:	f000 ff31 	bl	8006c30 <xTaskResumeAll>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f47f af7c 	bne.w	8005cce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005dd6:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <xQueueGenericSend+0x1f8>)
 8005dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	e772      	b.n	8005cce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dea:	f000 fc4b 	bl	8006684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dee:	f000 ff1f 	bl	8006c30 <xTaskResumeAll>
 8005df2:	e76c      	b.n	8005cce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005df6:	f000 fc45 	bl	8006684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dfa:	f000 ff19 	bl	8006c30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005dfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3738      	adds	r7, #56	; 0x38
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	e000ed04 	.word	0xe000ed04

08005e0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b090      	sub	sp, #64	; 0x40
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e36:	bf00      	nop
 8005e38:	e7fe      	b.n	8005e38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d103      	bne.n	8005e48 <xQueueGenericSendFromISR+0x3c>
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <xQueueGenericSendFromISR+0x40>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e000      	b.n	8005e4e <xQueueGenericSendFromISR+0x42>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10a      	bne.n	8005e68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e64:	bf00      	nop
 8005e66:	e7fe      	b.n	8005e66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d103      	bne.n	8005e76 <xQueueGenericSendFromISR+0x6a>
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <xQueueGenericSendFromISR+0x6e>
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <xQueueGenericSendFromISR+0x70>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	623b      	str	r3, [r7, #32]
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e96:	f001 feb7 	bl	8007c08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e9a:	f3ef 8211 	mrs	r2, BASEPRI
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	61fa      	str	r2, [r7, #28]
 8005eb0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005eb4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d302      	bcc.n	8005ec8 <xQueueGenericSendFromISR+0xbc>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d12f      	bne.n	8005f28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ede:	f000 fb41 	bl	8006564 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ee2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eea:	d112      	bne.n	8005f12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d016      	beq.n	8005f22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef6:	3324      	adds	r3, #36	; 0x24
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f001 f895 	bl	8007028 <xTaskRemoveFromEventList>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00e      	beq.n	8005f22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	e007      	b.n	8005f22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f16:	3301      	adds	r3, #1
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	b25a      	sxtb	r2, r3
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f22:	2301      	movs	r3, #1
 8005f24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005f26:	e001      	b.n	8005f2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3740      	adds	r7, #64	; 0x40
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b08e      	sub	sp, #56	; 0x38
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10a      	bne.n	8005f6c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	623b      	str	r3, [r7, #32]
}
 8005f68:	bf00      	nop
 8005f6a:	e7fe      	b.n	8005f6a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00a      	beq.n	8005f8a <xQueueGiveFromISR+0x48>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	61fb      	str	r3, [r7, #28]
}
 8005f86:	bf00      	nop
 8005f88:	e7fe      	b.n	8005f88 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d103      	bne.n	8005f9a <xQueueGiveFromISR+0x58>
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <xQueueGiveFromISR+0x5c>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <xQueueGiveFromISR+0x5e>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10a      	bne.n	8005fba <xQueueGiveFromISR+0x78>
	__asm volatile
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	61bb      	str	r3, [r7, #24]
}
 8005fb6:	bf00      	nop
 8005fb8:	e7fe      	b.n	8005fb8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fba:	f001 fe25 	bl	8007c08 <vPortValidateInterruptPriority>
	__asm volatile
 8005fbe:	f3ef 8211 	mrs	r2, BASEPRI
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	617a      	str	r2, [r7, #20]
 8005fd4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005fd6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d22b      	bcs.n	8006042 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ffc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006004:	d112      	bne.n	800602c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	2b00      	cmp	r3, #0
 800600c:	d016      	beq.n	800603c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	3324      	adds	r3, #36	; 0x24
 8006012:	4618      	mov	r0, r3
 8006014:	f001 f808 	bl	8007028 <xTaskRemoveFromEventList>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00e      	beq.n	800603c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00b      	beq.n	800603c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	2201      	movs	r2, #1
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	e007      	b.n	800603c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800602c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006030:	3301      	adds	r3, #1
 8006032:	b2db      	uxtb	r3, r3
 8006034:	b25a      	sxtb	r2, r3
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800603c:	2301      	movs	r3, #1
 800603e:	637b      	str	r3, [r7, #52]	; 0x34
 8006040:	e001      	b.n	8006046 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006042:	2300      	movs	r3, #0
 8006044:	637b      	str	r3, [r7, #52]	; 0x34
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f383 8811 	msr	BASEPRI, r3
}
 8006050:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006054:	4618      	mov	r0, r3
 8006056:	3738      	adds	r7, #56	; 0x38
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08c      	sub	sp, #48	; 0x30
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006068:	2300      	movs	r3, #0
 800606a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10a      	bne.n	800608c <xQueueReceive+0x30>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	623b      	str	r3, [r7, #32]
}
 8006088:	bf00      	nop
 800608a:	e7fe      	b.n	800608a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d103      	bne.n	800609a <xQueueReceive+0x3e>
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <xQueueReceive+0x42>
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <xQueueReceive+0x44>
 800609e:	2300      	movs	r3, #0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10a      	bne.n	80060ba <xQueueReceive+0x5e>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	61fb      	str	r3, [r7, #28]
}
 80060b6:	bf00      	nop
 80060b8:	e7fe      	b.n	80060b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060ba:	f001 f975 	bl	80073a8 <xTaskGetSchedulerState>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d102      	bne.n	80060ca <xQueueReceive+0x6e>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <xQueueReceive+0x72>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <xQueueReceive+0x74>
 80060ce:	2300      	movs	r3, #0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <xQueueReceive+0x8e>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	61bb      	str	r3, [r7, #24]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060ea:	f001 fcab 	bl	8007a44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01f      	beq.n	800613a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060fa:	68b9      	ldr	r1, [r7, #8]
 80060fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060fe:	f000 fa9b 	bl	8006638 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	1e5a      	subs	r2, r3, #1
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00f      	beq.n	8006132 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	3310      	adds	r3, #16
 8006116:	4618      	mov	r0, r3
 8006118:	f000 ff86 	bl	8007028 <xTaskRemoveFromEventList>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d007      	beq.n	8006132 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006122:	4b3d      	ldr	r3, [pc, #244]	; (8006218 <xQueueReceive+0x1bc>)
 8006124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006132:	f001 fcb7 	bl	8007aa4 <vPortExitCritical>
				return pdPASS;
 8006136:	2301      	movs	r3, #1
 8006138:	e069      	b.n	800620e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d103      	bne.n	8006148 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006140:	f001 fcb0 	bl	8007aa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006144:	2300      	movs	r3, #0
 8006146:	e062      	b.n	800620e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800614e:	f107 0310 	add.w	r3, r7, #16
 8006152:	4618      	mov	r0, r3
 8006154:	f000 ffca 	bl	80070ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006158:	2301      	movs	r3, #1
 800615a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800615c:	f001 fca2 	bl	8007aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006160:	f000 fd58 	bl	8006c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006164:	f001 fc6e 	bl	8007a44 <vPortEnterCritical>
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800616e:	b25b      	sxtb	r3, r3
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006174:	d103      	bne.n	800617e <xQueueReceive+0x122>
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800617e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006180:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006184:	b25b      	sxtb	r3, r3
 8006186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800618a:	d103      	bne.n	8006194 <xQueueReceive+0x138>
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006194:	f001 fc86 	bl	8007aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006198:	1d3a      	adds	r2, r7, #4
 800619a:	f107 0310 	add.w	r3, r7, #16
 800619e:	4611      	mov	r1, r2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 ffb9 	bl	8007118 <xTaskCheckForTimeOut>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d123      	bne.n	80061f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ae:	f000 fabb 	bl	8006728 <prvIsQueueEmpty>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d017      	beq.n	80061e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	3324      	adds	r3, #36	; 0x24
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	4611      	mov	r1, r2
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 ff0d 	bl	8006fe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061c8:	f000 fa5c 	bl	8006684 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061cc:	f000 fd30 	bl	8006c30 <xTaskResumeAll>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d189      	bne.n	80060ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80061d6:	4b10      	ldr	r3, [pc, #64]	; (8006218 <xQueueReceive+0x1bc>)
 80061d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	e780      	b.n	80060ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ea:	f000 fa4b 	bl	8006684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061ee:	f000 fd1f 	bl	8006c30 <xTaskResumeAll>
 80061f2:	e77a      	b.n	80060ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f6:	f000 fa45 	bl	8006684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061fa:	f000 fd19 	bl	8006c30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006200:	f000 fa92 	bl	8006728 <prvIsQueueEmpty>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	f43f af6f 	beq.w	80060ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800620c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800620e:	4618      	mov	r0, r3
 8006210:	3730      	adds	r7, #48	; 0x30
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	e000ed04 	.word	0xe000ed04

0800621c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08e      	sub	sp, #56	; 0x38
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006226:	2300      	movs	r3, #0
 8006228:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800622e:	2300      	movs	r3, #0
 8006230:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10a      	bne.n	800624e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	623b      	str	r3, [r7, #32]
}
 800624a:	bf00      	nop
 800624c:	e7fe      	b.n	800624c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800624e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	61fb      	str	r3, [r7, #28]
}
 8006268:	bf00      	nop
 800626a:	e7fe      	b.n	800626a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800626c:	f001 f89c 	bl	80073a8 <xTaskGetSchedulerState>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d102      	bne.n	800627c <xQueueSemaphoreTake+0x60>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <xQueueSemaphoreTake+0x64>
 800627c:	2301      	movs	r3, #1
 800627e:	e000      	b.n	8006282 <xQueueSemaphoreTake+0x66>
 8006280:	2300      	movs	r3, #0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	61bb      	str	r3, [r7, #24]
}
 8006298:	bf00      	nop
 800629a:	e7fe      	b.n	800629a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800629c:	f001 fbd2 	bl	8007a44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80062a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d024      	beq.n	80062f6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	1e5a      	subs	r2, r3, #1
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d104      	bne.n	80062c6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80062bc:	f001 fa1c 	bl	80076f8 <pvTaskIncrementMutexHeldCount>
 80062c0:	4602      	mov	r2, r0
 80062c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00f      	beq.n	80062ee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d0:	3310      	adds	r3, #16
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fea8 	bl	8007028 <xTaskRemoveFromEventList>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d007      	beq.n	80062ee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062de:	4b54      	ldr	r3, [pc, #336]	; (8006430 <xQueueSemaphoreTake+0x214>)
 80062e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062ee:	f001 fbd9 	bl	8007aa4 <vPortExitCritical>
				return pdPASS;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e097      	b.n	8006426 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d111      	bne.n	8006320 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80062fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	617b      	str	r3, [r7, #20]
}
 8006314:	bf00      	nop
 8006316:	e7fe      	b.n	8006316 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006318:	f001 fbc4 	bl	8007aa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800631c:	2300      	movs	r3, #0
 800631e:	e082      	b.n	8006426 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006322:	2b00      	cmp	r3, #0
 8006324:	d106      	bne.n	8006334 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006326:	f107 030c 	add.w	r3, r7, #12
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fede 	bl	80070ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006330:	2301      	movs	r3, #1
 8006332:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006334:	f001 fbb6 	bl	8007aa4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006338:	f000 fc6c 	bl	8006c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800633c:	f001 fb82 	bl	8007a44 <vPortEnterCritical>
 8006340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006346:	b25b      	sxtb	r3, r3
 8006348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800634c:	d103      	bne.n	8006356 <xQueueSemaphoreTake+0x13a>
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800635c:	b25b      	sxtb	r3, r3
 800635e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006362:	d103      	bne.n	800636c <xQueueSemaphoreTake+0x150>
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800636c:	f001 fb9a 	bl	8007aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006370:	463a      	mov	r2, r7
 8006372:	f107 030c 	add.w	r3, r7, #12
 8006376:	4611      	mov	r1, r2
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fecd 	bl	8007118 <xTaskCheckForTimeOut>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d132      	bne.n	80063ea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006384:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006386:	f000 f9cf 	bl	8006728 <prvIsQueueEmpty>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d026      	beq.n	80063de <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d109      	bne.n	80063ac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006398:	f001 fb54 	bl	8007a44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f001 f81f 	bl	80073e4 <xTaskPriorityInherit>
 80063a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80063a8:	f001 fb7c 	bl	8007aa4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	3324      	adds	r3, #36	; 0x24
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	4611      	mov	r1, r2
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 fe13 	bl	8006fe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063bc:	f000 f962 	bl	8006684 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063c0:	f000 fc36 	bl	8006c30 <xTaskResumeAll>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f47f af68 	bne.w	800629c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80063cc:	4b18      	ldr	r3, [pc, #96]	; (8006430 <xQueueSemaphoreTake+0x214>)
 80063ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	e75e      	b.n	800629c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80063de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063e0:	f000 f950 	bl	8006684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063e4:	f000 fc24 	bl	8006c30 <xTaskResumeAll>
 80063e8:	e758      	b.n	800629c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80063ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063ec:	f000 f94a 	bl	8006684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063f0:	f000 fc1e 	bl	8006c30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063f6:	f000 f997 	bl	8006728 <prvIsQueueEmpty>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f43f af4d 	beq.w	800629c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00d      	beq.n	8006424 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006408:	f001 fb1c 	bl	8007a44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800640c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800640e:	f000 f891 	bl	8006534 <prvGetDisinheritPriorityAfterTimeout>
 8006412:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800641a:	4618      	mov	r0, r3
 800641c:	f001 f8de 	bl	80075dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006420:	f001 fb40 	bl	8007aa4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006426:	4618      	mov	r0, r3
 8006428:	3738      	adds	r7, #56	; 0x38
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	e000ed04 	.word	0xe000ed04

08006434 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08e      	sub	sp, #56	; 0x38
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	623b      	str	r3, [r7, #32]
}
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d103      	bne.n	800646e <xQueueReceiveFromISR+0x3a>
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <xQueueReceiveFromISR+0x3e>
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <xQueueReceiveFromISR+0x40>
 8006472:	2300      	movs	r3, #0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10a      	bne.n	800648e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	61fb      	str	r3, [r7, #28]
}
 800648a:	bf00      	nop
 800648c:	e7fe      	b.n	800648c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800648e:	f001 fbbb 	bl	8007c08 <vPortValidateInterruptPriority>
	__asm volatile
 8006492:	f3ef 8211 	mrs	r2, BASEPRI
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	61ba      	str	r2, [r7, #24]
 80064a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80064aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d02f      	beq.n	800651a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064c8:	f000 f8b6 	bl	8006638 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	1e5a      	subs	r2, r3, #1
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80064d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064dc:	d112      	bne.n	8006504 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d016      	beq.n	8006514 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	3310      	adds	r3, #16
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fd9c 	bl	8007028 <xTaskRemoveFromEventList>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00e      	beq.n	8006514 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00b      	beq.n	8006514 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	e007      	b.n	8006514 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006508:	3301      	adds	r3, #1
 800650a:	b2db      	uxtb	r3, r3
 800650c:	b25a      	sxtb	r2, r3
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006514:	2301      	movs	r3, #1
 8006516:	637b      	str	r3, [r7, #52]	; 0x34
 8006518:	e001      	b.n	800651e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800651a:	2300      	movs	r3, #0
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
 800651e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006520:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f383 8811 	msr	BASEPRI, r3
}
 8006528:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800652a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800652c:	4618      	mov	r0, r3
 800652e:	3738      	adds	r7, #56	; 0x38
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	2b00      	cmp	r3, #0
 8006542:	d006      	beq.n	8006552 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f1c3 0307 	rsb	r3, r3, #7
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	e001      	b.n	8006556 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006552:	2300      	movs	r3, #0
 8006554:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006556:	68fb      	ldr	r3, [r7, #12]
	}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006570:	2300      	movs	r3, #0
 8006572:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006578:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10d      	bne.n	800659e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d14d      	bne.n	8006626 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	4618      	mov	r0, r3
 8006590:	f000 ff9e 	bl	80074d0 <xTaskPriorityDisinherit>
 8006594:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	609a      	str	r2, [r3, #8]
 800659c:	e043      	b.n	8006626 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d119      	bne.n	80065d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6858      	ldr	r0, [r3, #4]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	461a      	mov	r2, r3
 80065ae:	68b9      	ldr	r1, [r7, #8]
 80065b0:	f00c fc24 	bl	8012dfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065bc:	441a      	add	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d32b      	bcc.n	8006626 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	605a      	str	r2, [r3, #4]
 80065d6:	e026      	b.n	8006626 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	68d8      	ldr	r0, [r3, #12]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e0:	461a      	mov	r2, r3
 80065e2:	68b9      	ldr	r1, [r7, #8]
 80065e4:	f00c fc0a 	bl	8012dfc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f0:	425b      	negs	r3, r3
 80065f2:	441a      	add	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	429a      	cmp	r2, r3
 8006602:	d207      	bcs.n	8006614 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660c:	425b      	negs	r3, r3
 800660e:	441a      	add	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b02      	cmp	r3, #2
 8006618:	d105      	bne.n	8006626 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	3b01      	subs	r3, #1
 8006624:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800662e:	697b      	ldr	r3, [r7, #20]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	2b00      	cmp	r3, #0
 8006648:	d018      	beq.n	800667c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	441a      	add	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68da      	ldr	r2, [r3, #12]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	429a      	cmp	r2, r3
 8006662:	d303      	bcc.n	800666c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68d9      	ldr	r1, [r3, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006674:	461a      	mov	r2, r3
 8006676:	6838      	ldr	r0, [r7, #0]
 8006678:	f00c fbc0 	bl	8012dfc <memcpy>
	}
}
 800667c:	bf00      	nop
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800668c:	f001 f9da 	bl	8007a44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006696:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006698:	e011      	b.n	80066be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d012      	beq.n	80066c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	3324      	adds	r3, #36	; 0x24
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fcbe 	bl	8007028 <xTaskRemoveFromEventList>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066b2:	f000 fd93 	bl	80071dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	dce9      	bgt.n	800669a <prvUnlockQueue+0x16>
 80066c6:	e000      	b.n	80066ca <prvUnlockQueue+0x46>
					break;
 80066c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	22ff      	movs	r2, #255	; 0xff
 80066ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80066d2:	f001 f9e7 	bl	8007aa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066d6:	f001 f9b5 	bl	8007a44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066e2:	e011      	b.n	8006708 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d012      	beq.n	8006712 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3310      	adds	r3, #16
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 fc99 	bl	8007028 <xTaskRemoveFromEventList>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80066fc:	f000 fd6e 	bl	80071dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006700:	7bbb      	ldrb	r3, [r7, #14]
 8006702:	3b01      	subs	r3, #1
 8006704:	b2db      	uxtb	r3, r3
 8006706:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800670c:	2b00      	cmp	r3, #0
 800670e:	dce9      	bgt.n	80066e4 <prvUnlockQueue+0x60>
 8006710:	e000      	b.n	8006714 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006712:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	22ff      	movs	r2, #255	; 0xff
 8006718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800671c:	f001 f9c2 	bl	8007aa4 <vPortExitCritical>
}
 8006720:	bf00      	nop
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006730:	f001 f988 	bl	8007a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006738:	2b00      	cmp	r3, #0
 800673a:	d102      	bne.n	8006742 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800673c:	2301      	movs	r3, #1
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	e001      	b.n	8006746 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006746:	f001 f9ad 	bl	8007aa4 <vPortExitCritical>

	return xReturn;
 800674a:	68fb      	ldr	r3, [r7, #12]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800675c:	f001 f972 	bl	8007a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006768:	429a      	cmp	r2, r3
 800676a:	d102      	bne.n	8006772 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800676c:	2301      	movs	r3, #1
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	e001      	b.n	8006776 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006776:	f001 f995 	bl	8007aa4 <vPortExitCritical>

	return xReturn;
 800677a:	68fb      	ldr	r3, [r7, #12]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08e      	sub	sp, #56	; 0x38
 8006788:	af04      	add	r7, sp, #16
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10a      	bne.n	80067ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	623b      	str	r3, [r7, #32]
}
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80067ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <xTaskCreateStatic+0x46>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	61fb      	str	r3, [r7, #28]
}
 80067c6:	bf00      	nop
 80067c8:	e7fe      	b.n	80067c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067ca:	23a0      	movs	r3, #160	; 0xa0
 80067cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	2ba0      	cmp	r3, #160	; 0xa0
 80067d2:	d00a      	beq.n	80067ea <xTaskCreateStatic+0x66>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	61bb      	str	r3, [r7, #24]
}
 80067e6:	bf00      	nop
 80067e8:	e7fe      	b.n	80067e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80067ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80067ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d01e      	beq.n	8006830 <xTaskCreateStatic+0xac>
 80067f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01b      	beq.n	8006830 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006800:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	2202      	movs	r2, #2
 8006806:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800680a:	2300      	movs	r3, #0
 800680c:	9303      	str	r3, [sp, #12]
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	9302      	str	r3, [sp, #8]
 8006812:	f107 0314 	add.w	r3, r7, #20
 8006816:	9301      	str	r3, [sp, #4]
 8006818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 f850 	bl	80068c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800682a:	f000 f8eb 	bl	8006a04 <prvAddNewTaskToReadyList>
 800682e:	e001      	b.n	8006834 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006834:	697b      	ldr	r3, [r7, #20]
	}
 8006836:	4618      	mov	r0, r3
 8006838:	3728      	adds	r7, #40	; 0x28
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800683e:	b580      	push	{r7, lr}
 8006840:	b08c      	sub	sp, #48	; 0x30
 8006842:	af04      	add	r7, sp, #16
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	603b      	str	r3, [r7, #0]
 800684a:	4613      	mov	r3, r2
 800684c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4618      	mov	r0, r3
 8006854:	f001 fa18 	bl	8007c88 <pvPortMalloc>
 8006858:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00e      	beq.n	800687e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006860:	20a0      	movs	r0, #160	; 0xa0
 8006862:	f001 fa11 	bl	8007c88 <pvPortMalloc>
 8006866:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	631a      	str	r2, [r3, #48]	; 0x30
 8006874:	e005      	b.n	8006882 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006876:	6978      	ldr	r0, [r7, #20]
 8006878:	f001 fad2 	bl	8007e20 <vPortFree>
 800687c:	e001      	b.n	8006882 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800687e:	2300      	movs	r3, #0
 8006880:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d017      	beq.n	80068b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006890:	88fa      	ldrh	r2, [r7, #6]
 8006892:	2300      	movs	r3, #0
 8006894:	9303      	str	r3, [sp, #12]
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	9302      	str	r3, [sp, #8]
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	68b9      	ldr	r1, [r7, #8]
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f000 f80e 	bl	80068c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068ac:	69f8      	ldr	r0, [r7, #28]
 80068ae:	f000 f8a9 	bl	8006a04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068b2:	2301      	movs	r3, #1
 80068b4:	61bb      	str	r3, [r7, #24]
 80068b6:	e002      	b.n	80068be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068be:	69bb      	ldr	r3, [r7, #24]
	}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3720      	adds	r7, #32
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80068e0:	440b      	add	r3, r1
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	f023 0307 	bic.w	r3, r3, #7
 80068ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <prvInitialiseNewTask+0x48>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	617b      	str	r3, [r7, #20]
}
 800690c:	bf00      	nop
 800690e:	e7fe      	b.n	800690e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d01f      	beq.n	8006956 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006916:	2300      	movs	r3, #0
 8006918:	61fb      	str	r3, [r7, #28]
 800691a:	e012      	b.n	8006942 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	4413      	add	r3, r2
 8006922:	7819      	ldrb	r1, [r3, #0]
 8006924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	3334      	adds	r3, #52	; 0x34
 800692c:	460a      	mov	r2, r1
 800692e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	4413      	add	r3, r2
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d006      	beq.n	800694a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	3301      	adds	r3, #1
 8006940:	61fb      	str	r3, [r7, #28]
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	2b0f      	cmp	r3, #15
 8006946:	d9e9      	bls.n	800691c <prvInitialiseNewTask+0x54>
 8006948:	e000      	b.n	800694c <prvInitialiseNewTask+0x84>
			{
				break;
 800694a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006954:	e003      	b.n	800695e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006960:	2b06      	cmp	r3, #6
 8006962:	d901      	bls.n	8006968 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006964:	2306      	movs	r3, #6
 8006966:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800696c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006972:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	2200      	movs	r2, #0
 8006978:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	3304      	adds	r3, #4
 800697e:	4618      	mov	r0, r3
 8006980:	f7fe ff2c 	bl	80057dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	3318      	adds	r3, #24
 8006988:	4618      	mov	r0, r3
 800698a:	f7fe ff27 	bl	80057dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006992:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	f1c3 0207 	rsb	r2, r3, #7
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80069b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b6:	334c      	adds	r3, #76	; 0x4c
 80069b8:	224c      	movs	r2, #76	; 0x4c
 80069ba:	2100      	movs	r1, #0
 80069bc:	4618      	mov	r0, r3
 80069be:	f00c f952 	bl	8012c66 <memset>
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	4a0c      	ldr	r2, [pc, #48]	; (80069f8 <prvInitialiseNewTask+0x130>)
 80069c6:	651a      	str	r2, [r3, #80]	; 0x50
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	4a0c      	ldr	r2, [pc, #48]	; (80069fc <prvInitialiseNewTask+0x134>)
 80069cc:	655a      	str	r2, [r3, #84]	; 0x54
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	4a0b      	ldr	r2, [pc, #44]	; (8006a00 <prvInitialiseNewTask+0x138>)
 80069d2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	68f9      	ldr	r1, [r7, #12]
 80069d8:	69b8      	ldr	r0, [r7, #24]
 80069da:	f000 ff07 	bl	80077ec <pxPortInitialiseStack>
 80069de:	4602      	mov	r2, r0
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80069e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069f0:	bf00      	nop
 80069f2:	3720      	adds	r7, #32
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	2400be50 	.word	0x2400be50
 80069fc:	2400beb8 	.word	0x2400beb8
 8006a00:	2400bf20 	.word	0x2400bf20

08006a04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a0c:	f001 f81a 	bl	8007a44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a10:	4b2a      	ldr	r3, [pc, #168]	; (8006abc <prvAddNewTaskToReadyList+0xb8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3301      	adds	r3, #1
 8006a16:	4a29      	ldr	r2, [pc, #164]	; (8006abc <prvAddNewTaskToReadyList+0xb8>)
 8006a18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a1a:	4b29      	ldr	r3, [pc, #164]	; (8006ac0 <prvAddNewTaskToReadyList+0xbc>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d109      	bne.n	8006a36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a22:	4a27      	ldr	r2, [pc, #156]	; (8006ac0 <prvAddNewTaskToReadyList+0xbc>)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a28:	4b24      	ldr	r3, [pc, #144]	; (8006abc <prvAddNewTaskToReadyList+0xb8>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d110      	bne.n	8006a52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a30:	f000 fbf8 	bl	8007224 <prvInitialiseTaskLists>
 8006a34:	e00d      	b.n	8006a52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a36:	4b23      	ldr	r3, [pc, #140]	; (8006ac4 <prvAddNewTaskToReadyList+0xc0>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d109      	bne.n	8006a52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a3e:	4b20      	ldr	r3, [pc, #128]	; (8006ac0 <prvAddNewTaskToReadyList+0xbc>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d802      	bhi.n	8006a52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a4c:	4a1c      	ldr	r2, [pc, #112]	; (8006ac0 <prvAddNewTaskToReadyList+0xbc>)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a52:	4b1d      	ldr	r3, [pc, #116]	; (8006ac8 <prvAddNewTaskToReadyList+0xc4>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3301      	adds	r3, #1
 8006a58:	4a1b      	ldr	r2, [pc, #108]	; (8006ac8 <prvAddNewTaskToReadyList+0xc4>)
 8006a5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	2201      	movs	r2, #1
 8006a62:	409a      	lsls	r2, r3
 8006a64:	4b19      	ldr	r3, [pc, #100]	; (8006acc <prvAddNewTaskToReadyList+0xc8>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	4a18      	ldr	r2, [pc, #96]	; (8006acc <prvAddNewTaskToReadyList+0xc8>)
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a72:	4613      	mov	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4a15      	ldr	r2, [pc, #84]	; (8006ad0 <prvAddNewTaskToReadyList+0xcc>)
 8006a7c:	441a      	add	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3304      	adds	r3, #4
 8006a82:	4619      	mov	r1, r3
 8006a84:	4610      	mov	r0, r2
 8006a86:	f7fe feb6 	bl	80057f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a8a:	f001 f80b 	bl	8007aa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a8e:	4b0d      	ldr	r3, [pc, #52]	; (8006ac4 <prvAddNewTaskToReadyList+0xc0>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00e      	beq.n	8006ab4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a96:	4b0a      	ldr	r3, [pc, #40]	; (8006ac0 <prvAddNewTaskToReadyList+0xbc>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d207      	bcs.n	8006ab4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006aa4:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <prvAddNewTaskToReadyList+0xd0>)
 8006aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ab4:	bf00      	nop
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	24004f8c 	.word	0x24004f8c
 8006ac0:	24004e8c 	.word	0x24004e8c
 8006ac4:	24004f98 	.word	0x24004f98
 8006ac8:	24004fa8 	.word	0x24004fa8
 8006acc:	24004f94 	.word	0x24004f94
 8006ad0:	24004e90 	.word	0x24004e90
 8006ad4:	e000ed04 	.word	0xe000ed04

08006ad8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d017      	beq.n	8006b1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006aea:	4b13      	ldr	r3, [pc, #76]	; (8006b38 <vTaskDelay+0x60>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00a      	beq.n	8006b08 <vTaskDelay+0x30>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	60bb      	str	r3, [r7, #8]
}
 8006b04:	bf00      	nop
 8006b06:	e7fe      	b.n	8006b06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b08:	f000 f884 	bl	8006c14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fe06 	bl	8007720 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b14:	f000 f88c 	bl	8006c30 <xTaskResumeAll>
 8006b18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d107      	bne.n	8006b30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006b20:	4b06      	ldr	r3, [pc, #24]	; (8006b3c <vTaskDelay+0x64>)
 8006b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b26:	601a      	str	r2, [r3, #0]
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	24004fb4 	.word	0x24004fb4
 8006b3c:	e000ed04 	.word	0xe000ed04

08006b40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b08a      	sub	sp, #40	; 0x28
 8006b44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b46:	2300      	movs	r3, #0
 8006b48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b4e:	463a      	mov	r2, r7
 8006b50:	1d39      	adds	r1, r7, #4
 8006b52:	f107 0308 	add.w	r3, r7, #8
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7f9 fc1a 	bl	8000390 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	9202      	str	r2, [sp, #8]
 8006b64:	9301      	str	r3, [sp, #4]
 8006b66:	2300      	movs	r3, #0
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	460a      	mov	r2, r1
 8006b6e:	4921      	ldr	r1, [pc, #132]	; (8006bf4 <vTaskStartScheduler+0xb4>)
 8006b70:	4821      	ldr	r0, [pc, #132]	; (8006bf8 <vTaskStartScheduler+0xb8>)
 8006b72:	f7ff fe07 	bl	8006784 <xTaskCreateStatic>
 8006b76:	4603      	mov	r3, r0
 8006b78:	4a20      	ldr	r2, [pc, #128]	; (8006bfc <vTaskStartScheduler+0xbc>)
 8006b7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b7c:	4b1f      	ldr	r3, [pc, #124]	; (8006bfc <vTaskStartScheduler+0xbc>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d002      	beq.n	8006b8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b84:	2301      	movs	r3, #1
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	e001      	b.n	8006b8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d11b      	bne.n	8006bcc <vTaskStartScheduler+0x8c>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	613b      	str	r3, [r7, #16]
}
 8006ba6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ba8:	4b15      	ldr	r3, [pc, #84]	; (8006c00 <vTaskStartScheduler+0xc0>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	334c      	adds	r3, #76	; 0x4c
 8006bae:	4a15      	ldr	r2, [pc, #84]	; (8006c04 <vTaskStartScheduler+0xc4>)
 8006bb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006bb2:	4b15      	ldr	r3, [pc, #84]	; (8006c08 <vTaskStartScheduler+0xc8>)
 8006bb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006bba:	4b14      	ldr	r3, [pc, #80]	; (8006c0c <vTaskStartScheduler+0xcc>)
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006bc0:	4b13      	ldr	r3, [pc, #76]	; (8006c10 <vTaskStartScheduler+0xd0>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006bc6:	f000 fe9b 	bl	8007900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006bca:	e00e      	b.n	8006bea <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bd2:	d10a      	bne.n	8006bea <vTaskStartScheduler+0xaa>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	60fb      	str	r3, [r7, #12]
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <vTaskStartScheduler+0xa8>
}
 8006bea:	bf00      	nop
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	08013b5c 	.word	0x08013b5c
 8006bf8:	080071f5 	.word	0x080071f5
 8006bfc:	24004fb0 	.word	0x24004fb0
 8006c00:	24004e8c 	.word	0x24004e8c
 8006c04:	2400008c 	.word	0x2400008c
 8006c08:	24004fac 	.word	0x24004fac
 8006c0c:	24004f98 	.word	0x24004f98
 8006c10:	24004f90 	.word	0x24004f90

08006c14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c18:	4b04      	ldr	r3, [pc, #16]	; (8006c2c <vTaskSuspendAll+0x18>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	4a03      	ldr	r2, [pc, #12]	; (8006c2c <vTaskSuspendAll+0x18>)
 8006c20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c22:	bf00      	nop
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	24004fb4 	.word	0x24004fb4

08006c30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c3e:	4b41      	ldr	r3, [pc, #260]	; (8006d44 <xTaskResumeAll+0x114>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10a      	bne.n	8006c5c <xTaskResumeAll+0x2c>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	603b      	str	r3, [r7, #0]
}
 8006c58:	bf00      	nop
 8006c5a:	e7fe      	b.n	8006c5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c5c:	f000 fef2 	bl	8007a44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c60:	4b38      	ldr	r3, [pc, #224]	; (8006d44 <xTaskResumeAll+0x114>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3b01      	subs	r3, #1
 8006c66:	4a37      	ldr	r2, [pc, #220]	; (8006d44 <xTaskResumeAll+0x114>)
 8006c68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c6a:	4b36      	ldr	r3, [pc, #216]	; (8006d44 <xTaskResumeAll+0x114>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d161      	bne.n	8006d36 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c72:	4b35      	ldr	r3, [pc, #212]	; (8006d48 <xTaskResumeAll+0x118>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d05d      	beq.n	8006d36 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c7a:	e02e      	b.n	8006cda <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c7c:	4b33      	ldr	r3, [pc, #204]	; (8006d4c <xTaskResumeAll+0x11c>)
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	3318      	adds	r3, #24
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7fe fe11 	bl	80058b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	3304      	adds	r3, #4
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fe fe0c 	bl	80058b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	409a      	lsls	r2, r3
 8006ca0:	4b2b      	ldr	r3, [pc, #172]	; (8006d50 <xTaskResumeAll+0x120>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	4a2a      	ldr	r2, [pc, #168]	; (8006d50 <xTaskResumeAll+0x120>)
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4a27      	ldr	r2, [pc, #156]	; (8006d54 <xTaskResumeAll+0x124>)
 8006cb8:	441a      	add	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	f7fe fd98 	bl	80057f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cca:	4b23      	ldr	r3, [pc, #140]	; (8006d58 <xTaskResumeAll+0x128>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d302      	bcc.n	8006cda <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006cd4:	4b21      	ldr	r3, [pc, #132]	; (8006d5c <xTaskResumeAll+0x12c>)
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cda:	4b1c      	ldr	r3, [pc, #112]	; (8006d4c <xTaskResumeAll+0x11c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1cc      	bne.n	8006c7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ce8:	f000 fb3e 	bl	8007368 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006cec:	4b1c      	ldr	r3, [pc, #112]	; (8006d60 <xTaskResumeAll+0x130>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d010      	beq.n	8006d1a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006cf8:	f000 f858 	bl	8006dac <xTaskIncrementTick>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006d02:	4b16      	ldr	r3, [pc, #88]	; (8006d5c <xTaskResumeAll+0x12c>)
 8006d04:	2201      	movs	r2, #1
 8006d06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1f1      	bne.n	8006cf8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006d14:	4b12      	ldr	r3, [pc, #72]	; (8006d60 <xTaskResumeAll+0x130>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d1a:	4b10      	ldr	r3, [pc, #64]	; (8006d5c <xTaskResumeAll+0x12c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d009      	beq.n	8006d36 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d22:	2301      	movs	r3, #1
 8006d24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d26:	4b0f      	ldr	r3, [pc, #60]	; (8006d64 <xTaskResumeAll+0x134>)
 8006d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d36:	f000 feb5 	bl	8007aa4 <vPortExitCritical>

	return xAlreadyYielded;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	24004fb4 	.word	0x24004fb4
 8006d48:	24004f8c 	.word	0x24004f8c
 8006d4c:	24004f4c 	.word	0x24004f4c
 8006d50:	24004f94 	.word	0x24004f94
 8006d54:	24004e90 	.word	0x24004e90
 8006d58:	24004e8c 	.word	0x24004e8c
 8006d5c:	24004fa0 	.word	0x24004fa0
 8006d60:	24004f9c 	.word	0x24004f9c
 8006d64:	e000ed04 	.word	0xe000ed04

08006d68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d6e:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <xTaskGetTickCount+0x1c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d74:	687b      	ldr	r3, [r7, #4]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	24004f90 	.word	0x24004f90

08006d88 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d8e:	f000 ff3b 	bl	8007c08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006d92:	2300      	movs	r3, #0
 8006d94:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006d96:	4b04      	ldr	r3, [pc, #16]	; (8006da8 <xTaskGetTickCountFromISR+0x20>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d9c:	683b      	ldr	r3, [r7, #0]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	24004f90 	.word	0x24004f90

08006dac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006db2:	2300      	movs	r3, #0
 8006db4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006db6:	4b4e      	ldr	r3, [pc, #312]	; (8006ef0 <xTaskIncrementTick+0x144>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f040 808e 	bne.w	8006edc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006dc0:	4b4c      	ldr	r3, [pc, #304]	; (8006ef4 <xTaskIncrementTick+0x148>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006dc8:	4a4a      	ldr	r2, [pc, #296]	; (8006ef4 <xTaskIncrementTick+0x148>)
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d120      	bne.n	8006e16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006dd4:	4b48      	ldr	r3, [pc, #288]	; (8006ef8 <xTaskIncrementTick+0x14c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	603b      	str	r3, [r7, #0]
}
 8006df0:	bf00      	nop
 8006df2:	e7fe      	b.n	8006df2 <xTaskIncrementTick+0x46>
 8006df4:	4b40      	ldr	r3, [pc, #256]	; (8006ef8 <xTaskIncrementTick+0x14c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	4b40      	ldr	r3, [pc, #256]	; (8006efc <xTaskIncrementTick+0x150>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a3e      	ldr	r2, [pc, #248]	; (8006ef8 <xTaskIncrementTick+0x14c>)
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	4a3e      	ldr	r2, [pc, #248]	; (8006efc <xTaskIncrementTick+0x150>)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6013      	str	r3, [r2, #0]
 8006e08:	4b3d      	ldr	r3, [pc, #244]	; (8006f00 <xTaskIncrementTick+0x154>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	4a3c      	ldr	r2, [pc, #240]	; (8006f00 <xTaskIncrementTick+0x154>)
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	f000 faa9 	bl	8007368 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e16:	4b3b      	ldr	r3, [pc, #236]	; (8006f04 <xTaskIncrementTick+0x158>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d348      	bcc.n	8006eb2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e20:	4b35      	ldr	r3, [pc, #212]	; (8006ef8 <xTaskIncrementTick+0x14c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d104      	bne.n	8006e34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e2a:	4b36      	ldr	r3, [pc, #216]	; (8006f04 <xTaskIncrementTick+0x158>)
 8006e2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e30:	601a      	str	r2, [r3, #0]
					break;
 8006e32:	e03e      	b.n	8006eb2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e34:	4b30      	ldr	r3, [pc, #192]	; (8006ef8 <xTaskIncrementTick+0x14c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d203      	bcs.n	8006e54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e4c:	4a2d      	ldr	r2, [pc, #180]	; (8006f04 <xTaskIncrementTick+0x158>)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e52:	e02e      	b.n	8006eb2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	3304      	adds	r3, #4
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fe fd29 	bl	80058b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d004      	beq.n	8006e70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	3318      	adds	r3, #24
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe fd20 	bl	80058b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e74:	2201      	movs	r2, #1
 8006e76:	409a      	lsls	r2, r3
 8006e78:	4b23      	ldr	r3, [pc, #140]	; (8006f08 <xTaskIncrementTick+0x15c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	4a22      	ldr	r2, [pc, #136]	; (8006f08 <xTaskIncrementTick+0x15c>)
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e86:	4613      	mov	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4a1f      	ldr	r2, [pc, #124]	; (8006f0c <xTaskIncrementTick+0x160>)
 8006e90:	441a      	add	r2, r3
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	3304      	adds	r3, #4
 8006e96:	4619      	mov	r1, r3
 8006e98:	4610      	mov	r0, r2
 8006e9a:	f7fe fcac 	bl	80057f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea2:	4b1b      	ldr	r3, [pc, #108]	; (8006f10 <xTaskIncrementTick+0x164>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d3b9      	bcc.n	8006e20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006eac:	2301      	movs	r3, #1
 8006eae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eb0:	e7b6      	b.n	8006e20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006eb2:	4b17      	ldr	r3, [pc, #92]	; (8006f10 <xTaskIncrementTick+0x164>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb8:	4914      	ldr	r1, [pc, #80]	; (8006f0c <xTaskIncrementTick+0x160>)
 8006eba:	4613      	mov	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	440b      	add	r3, r1
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d901      	bls.n	8006ece <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ece:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <xTaskIncrementTick+0x168>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d007      	beq.n	8006ee6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	617b      	str	r3, [r7, #20]
 8006eda:	e004      	b.n	8006ee6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006edc:	4b0e      	ldr	r3, [pc, #56]	; (8006f18 <xTaskIncrementTick+0x16c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	4a0d      	ldr	r2, [pc, #52]	; (8006f18 <xTaskIncrementTick+0x16c>)
 8006ee4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006ee6:	697b      	ldr	r3, [r7, #20]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	24004fb4 	.word	0x24004fb4
 8006ef4:	24004f90 	.word	0x24004f90
 8006ef8:	24004f44 	.word	0x24004f44
 8006efc:	24004f48 	.word	0x24004f48
 8006f00:	24004fa4 	.word	0x24004fa4
 8006f04:	24004fac 	.word	0x24004fac
 8006f08:	24004f94 	.word	0x24004f94
 8006f0c:	24004e90 	.word	0x24004e90
 8006f10:	24004e8c 	.word	0x24004e8c
 8006f14:	24004fa0 	.word	0x24004fa0
 8006f18:	24004f9c 	.word	0x24004f9c

08006f1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f22:	4b29      	ldr	r3, [pc, #164]	; (8006fc8 <vTaskSwitchContext+0xac>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f2a:	4b28      	ldr	r3, [pc, #160]	; (8006fcc <vTaskSwitchContext+0xb0>)
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f30:	e044      	b.n	8006fbc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006f32:	4b26      	ldr	r3, [pc, #152]	; (8006fcc <vTaskSwitchContext+0xb0>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f38:	4b25      	ldr	r3, [pc, #148]	; (8006fd0 <vTaskSwitchContext+0xb4>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	fab3 f383 	clz	r3, r3
 8006f44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006f46:	7afb      	ldrb	r3, [r7, #11]
 8006f48:	f1c3 031f 	rsb	r3, r3, #31
 8006f4c:	617b      	str	r3, [r7, #20]
 8006f4e:	4921      	ldr	r1, [pc, #132]	; (8006fd4 <vTaskSwitchContext+0xb8>)
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	4613      	mov	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	607b      	str	r3, [r7, #4]
}
 8006f74:	bf00      	nop
 8006f76:	e7fe      	b.n	8006f76 <vTaskSwitchContext+0x5a>
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4a14      	ldr	r2, [pc, #80]	; (8006fd4 <vTaskSwitchContext+0xb8>)
 8006f84:	4413      	add	r3, r2
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	605a      	str	r2, [r3, #4]
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	3308      	adds	r3, #8
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d104      	bne.n	8006fa8 <vTaskSwitchContext+0x8c>
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	605a      	str	r2, [r3, #4]
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	4a0a      	ldr	r2, [pc, #40]	; (8006fd8 <vTaskSwitchContext+0xbc>)
 8006fb0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006fb2:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <vTaskSwitchContext+0xbc>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	334c      	adds	r3, #76	; 0x4c
 8006fb8:	4a08      	ldr	r2, [pc, #32]	; (8006fdc <vTaskSwitchContext+0xc0>)
 8006fba:	6013      	str	r3, [r2, #0]
}
 8006fbc:	bf00      	nop
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	24004fb4 	.word	0x24004fb4
 8006fcc:	24004fa0 	.word	0x24004fa0
 8006fd0:	24004f94 	.word	0x24004f94
 8006fd4:	24004e90 	.word	0x24004e90
 8006fd8:	24004e8c 	.word	0x24004e8c
 8006fdc:	2400008c 	.word	0x2400008c

08006fe0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10a      	bne.n	8007006 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	60fb      	str	r3, [r7, #12]
}
 8007002:	bf00      	nop
 8007004:	e7fe      	b.n	8007004 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007006:	4b07      	ldr	r3, [pc, #28]	; (8007024 <vTaskPlaceOnEventList+0x44>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3318      	adds	r3, #24
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7fe fc15 	bl	800583e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007014:	2101      	movs	r1, #1
 8007016:	6838      	ldr	r0, [r7, #0]
 8007018:	f000 fb82 	bl	8007720 <prvAddCurrentTaskToDelayedList>
}
 800701c:	bf00      	nop
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	24004e8c 	.word	0x24004e8c

08007028 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	60fb      	str	r3, [r7, #12]
}
 8007050:	bf00      	nop
 8007052:	e7fe      	b.n	8007052 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	3318      	adds	r3, #24
 8007058:	4618      	mov	r0, r3
 800705a:	f7fe fc29 	bl	80058b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800705e:	4b1d      	ldr	r3, [pc, #116]	; (80070d4 <xTaskRemoveFromEventList+0xac>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d11c      	bne.n	80070a0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	3304      	adds	r3, #4
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe fc20 	bl	80058b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	2201      	movs	r2, #1
 8007076:	409a      	lsls	r2, r3
 8007078:	4b17      	ldr	r3, [pc, #92]	; (80070d8 <xTaskRemoveFromEventList+0xb0>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4313      	orrs	r3, r2
 800707e:	4a16      	ldr	r2, [pc, #88]	; (80070d8 <xTaskRemoveFromEventList+0xb0>)
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4a13      	ldr	r2, [pc, #76]	; (80070dc <xTaskRemoveFromEventList+0xb4>)
 8007090:	441a      	add	r2, r3
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	3304      	adds	r3, #4
 8007096:	4619      	mov	r1, r3
 8007098:	4610      	mov	r0, r2
 800709a:	f7fe fbac 	bl	80057f6 <vListInsertEnd>
 800709e:	e005      	b.n	80070ac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	3318      	adds	r3, #24
 80070a4:	4619      	mov	r1, r3
 80070a6:	480e      	ldr	r0, [pc, #56]	; (80070e0 <xTaskRemoveFromEventList+0xb8>)
 80070a8:	f7fe fba5 	bl	80057f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b0:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <xTaskRemoveFromEventList+0xbc>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d905      	bls.n	80070c6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80070ba:	2301      	movs	r3, #1
 80070bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070be:	4b0a      	ldr	r3, [pc, #40]	; (80070e8 <xTaskRemoveFromEventList+0xc0>)
 80070c0:	2201      	movs	r2, #1
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	e001      	b.n	80070ca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80070c6:	2300      	movs	r3, #0
 80070c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80070ca:	697b      	ldr	r3, [r7, #20]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	24004fb4 	.word	0x24004fb4
 80070d8:	24004f94 	.word	0x24004f94
 80070dc:	24004e90 	.word	0x24004e90
 80070e0:	24004f4c 	.word	0x24004f4c
 80070e4:	24004e8c 	.word	0x24004e8c
 80070e8:	24004fa0 	.word	0x24004fa0

080070ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070f4:	4b06      	ldr	r3, [pc, #24]	; (8007110 <vTaskInternalSetTimeOutState+0x24>)
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070fc:	4b05      	ldr	r3, [pc, #20]	; (8007114 <vTaskInternalSetTimeOutState+0x28>)
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	605a      	str	r2, [r3, #4]
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	24004fa4 	.word	0x24004fa4
 8007114:	24004f90 	.word	0x24004f90

08007118 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10a      	bne.n	800713e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	613b      	str	r3, [r7, #16]
}
 800713a:	bf00      	nop
 800713c:	e7fe      	b.n	800713c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	60fb      	str	r3, [r7, #12]
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800715a:	f000 fc73 	bl	8007a44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800715e:	4b1d      	ldr	r3, [pc, #116]	; (80071d4 <xTaskCheckForTimeOut+0xbc>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007176:	d102      	bne.n	800717e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007178:	2300      	movs	r3, #0
 800717a:	61fb      	str	r3, [r7, #28]
 800717c:	e023      	b.n	80071c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	4b15      	ldr	r3, [pc, #84]	; (80071d8 <xTaskCheckForTimeOut+0xc0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d007      	beq.n	800719a <xTaskCheckForTimeOut+0x82>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	429a      	cmp	r2, r3
 8007192:	d302      	bcc.n	800719a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007194:	2301      	movs	r3, #1
 8007196:	61fb      	str	r3, [r7, #28]
 8007198:	e015      	b.n	80071c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d20b      	bcs.n	80071bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	1ad2      	subs	r2, r2, r3
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff ff9b 	bl	80070ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071b6:	2300      	movs	r3, #0
 80071b8:	61fb      	str	r3, [r7, #28]
 80071ba:	e004      	b.n	80071c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071c2:	2301      	movs	r3, #1
 80071c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071c6:	f000 fc6d 	bl	8007aa4 <vPortExitCritical>

	return xReturn;
 80071ca:	69fb      	ldr	r3, [r7, #28]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3720      	adds	r7, #32
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	24004f90 	.word	0x24004f90
 80071d8:	24004fa4 	.word	0x24004fa4

080071dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071dc:	b480      	push	{r7}
 80071de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80071e0:	4b03      	ldr	r3, [pc, #12]	; (80071f0 <vTaskMissedYield+0x14>)
 80071e2:	2201      	movs	r2, #1
 80071e4:	601a      	str	r2, [r3, #0]
}
 80071e6:	bf00      	nop
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	24004fa0 	.word	0x24004fa0

080071f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071fc:	f000 f852 	bl	80072a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007200:	4b06      	ldr	r3, [pc, #24]	; (800721c <prvIdleTask+0x28>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d9f9      	bls.n	80071fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007208:	4b05      	ldr	r3, [pc, #20]	; (8007220 <prvIdleTask+0x2c>)
 800720a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007218:	e7f0      	b.n	80071fc <prvIdleTask+0x8>
 800721a:	bf00      	nop
 800721c:	24004e90 	.word	0x24004e90
 8007220:	e000ed04 	.word	0xe000ed04

08007224 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800722a:	2300      	movs	r3, #0
 800722c:	607b      	str	r3, [r7, #4]
 800722e:	e00c      	b.n	800724a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4a12      	ldr	r2, [pc, #72]	; (8007284 <prvInitialiseTaskLists+0x60>)
 800723c:	4413      	add	r3, r2
 800723e:	4618      	mov	r0, r3
 8007240:	f7fe faac 	bl	800579c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3301      	adds	r3, #1
 8007248:	607b      	str	r3, [r7, #4]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b06      	cmp	r3, #6
 800724e:	d9ef      	bls.n	8007230 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007250:	480d      	ldr	r0, [pc, #52]	; (8007288 <prvInitialiseTaskLists+0x64>)
 8007252:	f7fe faa3 	bl	800579c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007256:	480d      	ldr	r0, [pc, #52]	; (800728c <prvInitialiseTaskLists+0x68>)
 8007258:	f7fe faa0 	bl	800579c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800725c:	480c      	ldr	r0, [pc, #48]	; (8007290 <prvInitialiseTaskLists+0x6c>)
 800725e:	f7fe fa9d 	bl	800579c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007262:	480c      	ldr	r0, [pc, #48]	; (8007294 <prvInitialiseTaskLists+0x70>)
 8007264:	f7fe fa9a 	bl	800579c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007268:	480b      	ldr	r0, [pc, #44]	; (8007298 <prvInitialiseTaskLists+0x74>)
 800726a:	f7fe fa97 	bl	800579c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800726e:	4b0b      	ldr	r3, [pc, #44]	; (800729c <prvInitialiseTaskLists+0x78>)
 8007270:	4a05      	ldr	r2, [pc, #20]	; (8007288 <prvInitialiseTaskLists+0x64>)
 8007272:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007274:	4b0a      	ldr	r3, [pc, #40]	; (80072a0 <prvInitialiseTaskLists+0x7c>)
 8007276:	4a05      	ldr	r2, [pc, #20]	; (800728c <prvInitialiseTaskLists+0x68>)
 8007278:	601a      	str	r2, [r3, #0]
}
 800727a:	bf00      	nop
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	24004e90 	.word	0x24004e90
 8007288:	24004f1c 	.word	0x24004f1c
 800728c:	24004f30 	.word	0x24004f30
 8007290:	24004f4c 	.word	0x24004f4c
 8007294:	24004f60 	.word	0x24004f60
 8007298:	24004f78 	.word	0x24004f78
 800729c:	24004f44 	.word	0x24004f44
 80072a0:	24004f48 	.word	0x24004f48

080072a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072aa:	e019      	b.n	80072e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072ac:	f000 fbca 	bl	8007a44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b0:	4b10      	ldr	r3, [pc, #64]	; (80072f4 <prvCheckTasksWaitingTermination+0x50>)
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3304      	adds	r3, #4
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fe faf7 	bl	80058b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072c2:	4b0d      	ldr	r3, [pc, #52]	; (80072f8 <prvCheckTasksWaitingTermination+0x54>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	4a0b      	ldr	r2, [pc, #44]	; (80072f8 <prvCheckTasksWaitingTermination+0x54>)
 80072ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072cc:	4b0b      	ldr	r3, [pc, #44]	; (80072fc <prvCheckTasksWaitingTermination+0x58>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	4a0a      	ldr	r2, [pc, #40]	; (80072fc <prvCheckTasksWaitingTermination+0x58>)
 80072d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072d6:	f000 fbe5 	bl	8007aa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f810 	bl	8007300 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072e0:	4b06      	ldr	r3, [pc, #24]	; (80072fc <prvCheckTasksWaitingTermination+0x58>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e1      	bne.n	80072ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072e8:	bf00      	nop
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	24004f60 	.word	0x24004f60
 80072f8:	24004f8c 	.word	0x24004f8c
 80072fc:	24004f74 	.word	0x24004f74

08007300 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	334c      	adds	r3, #76	; 0x4c
 800730c:	4618      	mov	r0, r3
 800730e:	f00b fcc3 	bl	8012c98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007318:	2b00      	cmp	r3, #0
 800731a:	d108      	bne.n	800732e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007320:	4618      	mov	r0, r3
 8007322:	f000 fd7d 	bl	8007e20 <vPortFree>
				vPortFree( pxTCB );
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fd7a 	bl	8007e20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800732c:	e018      	b.n	8007360 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007334:	2b01      	cmp	r3, #1
 8007336:	d103      	bne.n	8007340 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fd71 	bl	8007e20 <vPortFree>
	}
 800733e:	e00f      	b.n	8007360 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007346:	2b02      	cmp	r3, #2
 8007348:	d00a      	beq.n	8007360 <prvDeleteTCB+0x60>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	60fb      	str	r3, [r7, #12]
}
 800735c:	bf00      	nop
 800735e:	e7fe      	b.n	800735e <prvDeleteTCB+0x5e>
	}
 8007360:	bf00      	nop
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800736e:	4b0c      	ldr	r3, [pc, #48]	; (80073a0 <prvResetNextTaskUnblockTime+0x38>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007378:	4b0a      	ldr	r3, [pc, #40]	; (80073a4 <prvResetNextTaskUnblockTime+0x3c>)
 800737a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800737e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007380:	e008      	b.n	8007394 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007382:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <prvResetNextTaskUnblockTime+0x38>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	4a04      	ldr	r2, [pc, #16]	; (80073a4 <prvResetNextTaskUnblockTime+0x3c>)
 8007392:	6013      	str	r3, [r2, #0]
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	24004f44 	.word	0x24004f44
 80073a4:	24004fac 	.word	0x24004fac

080073a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073ae:	4b0b      	ldr	r3, [pc, #44]	; (80073dc <xTaskGetSchedulerState+0x34>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d102      	bne.n	80073bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073b6:	2301      	movs	r3, #1
 80073b8:	607b      	str	r3, [r7, #4]
 80073ba:	e008      	b.n	80073ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073bc:	4b08      	ldr	r3, [pc, #32]	; (80073e0 <xTaskGetSchedulerState+0x38>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d102      	bne.n	80073ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073c4:	2302      	movs	r3, #2
 80073c6:	607b      	str	r3, [r7, #4]
 80073c8:	e001      	b.n	80073ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073ca:	2300      	movs	r3, #0
 80073cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073ce:	687b      	ldr	r3, [r7, #4]
	}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	24004f98 	.word	0x24004f98
 80073e0:	24004fb4 	.word	0x24004fb4

080073e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80073f0:	2300      	movs	r3, #0
 80073f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d05e      	beq.n	80074b8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fe:	4b31      	ldr	r3, [pc, #196]	; (80074c4 <xTaskPriorityInherit+0xe0>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007404:	429a      	cmp	r2, r3
 8007406:	d24e      	bcs.n	80074a6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	2b00      	cmp	r3, #0
 800740e:	db06      	blt.n	800741e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007410:	4b2c      	ldr	r3, [pc, #176]	; (80074c4 <xTaskPriorityInherit+0xe0>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007416:	f1c3 0207 	rsb	r2, r3, #7
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	6959      	ldr	r1, [r3, #20]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4a26      	ldr	r2, [pc, #152]	; (80074c8 <xTaskPriorityInherit+0xe4>)
 8007430:	4413      	add	r3, r2
 8007432:	4299      	cmp	r1, r3
 8007434:	d12f      	bne.n	8007496 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	3304      	adds	r3, #4
 800743a:	4618      	mov	r0, r3
 800743c:	f7fe fa38 	bl	80058b0 <uxListRemove>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10a      	bne.n	800745c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	2201      	movs	r2, #1
 800744c:	fa02 f303 	lsl.w	r3, r2, r3
 8007450:	43da      	mvns	r2, r3
 8007452:	4b1e      	ldr	r3, [pc, #120]	; (80074cc <xTaskPriorityInherit+0xe8>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4013      	ands	r3, r2
 8007458:	4a1c      	ldr	r2, [pc, #112]	; (80074cc <xTaskPriorityInherit+0xe8>)
 800745a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800745c:	4b19      	ldr	r3, [pc, #100]	; (80074c4 <xTaskPriorityInherit+0xe0>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	2201      	movs	r2, #1
 800746c:	409a      	lsls	r2, r3
 800746e:	4b17      	ldr	r3, [pc, #92]	; (80074cc <xTaskPriorityInherit+0xe8>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4313      	orrs	r3, r2
 8007474:	4a15      	ldr	r2, [pc, #84]	; (80074cc <xTaskPriorityInherit+0xe8>)
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747c:	4613      	mov	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4a10      	ldr	r2, [pc, #64]	; (80074c8 <xTaskPriorityInherit+0xe4>)
 8007486:	441a      	add	r2, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	3304      	adds	r3, #4
 800748c:	4619      	mov	r1, r3
 800748e:	4610      	mov	r0, r2
 8007490:	f7fe f9b1 	bl	80057f6 <vListInsertEnd>
 8007494:	e004      	b.n	80074a0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007496:	4b0b      	ldr	r3, [pc, #44]	; (80074c4 <xTaskPriorityInherit+0xe0>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80074a0:	2301      	movs	r3, #1
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	e008      	b.n	80074b8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074aa:	4b06      	ldr	r3, [pc, #24]	; (80074c4 <xTaskPriorityInherit+0xe0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d201      	bcs.n	80074b8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80074b4:	2301      	movs	r3, #1
 80074b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074b8:	68fb      	ldr	r3, [r7, #12]
	}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	24004e8c 	.word	0x24004e8c
 80074c8:	24004e90 	.word	0x24004e90
 80074cc:	24004f94 	.word	0x24004f94

080074d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074dc:	2300      	movs	r3, #0
 80074de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d06e      	beq.n	80075c4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074e6:	4b3a      	ldr	r3, [pc, #232]	; (80075d0 <xTaskPriorityDisinherit+0x100>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d00a      	beq.n	8007506 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	60fb      	str	r3, [r7, #12]
}
 8007502:	bf00      	nop
 8007504:	e7fe      	b.n	8007504 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10a      	bne.n	8007524 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	60bb      	str	r3, [r7, #8]
}
 8007520:	bf00      	nop
 8007522:	e7fe      	b.n	8007522 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007528:	1e5a      	subs	r2, r3, #1
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007536:	429a      	cmp	r2, r3
 8007538:	d044      	beq.n	80075c4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800753e:	2b00      	cmp	r3, #0
 8007540:	d140      	bne.n	80075c4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	3304      	adds	r3, #4
 8007546:	4618      	mov	r0, r3
 8007548:	f7fe f9b2 	bl	80058b0 <uxListRemove>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d115      	bne.n	800757e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007556:	491f      	ldr	r1, [pc, #124]	; (80075d4 <xTaskPriorityDisinherit+0x104>)
 8007558:	4613      	mov	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	440b      	add	r3, r1
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10a      	bne.n	800757e <xTaskPriorityDisinherit+0xae>
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756c:	2201      	movs	r2, #1
 800756e:	fa02 f303 	lsl.w	r3, r2, r3
 8007572:	43da      	mvns	r2, r3
 8007574:	4b18      	ldr	r3, [pc, #96]	; (80075d8 <xTaskPriorityDisinherit+0x108>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4013      	ands	r3, r2
 800757a:	4a17      	ldr	r2, [pc, #92]	; (80075d8 <xTaskPriorityDisinherit+0x108>)
 800757c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758a:	f1c3 0207 	rsb	r2, r3, #7
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007596:	2201      	movs	r2, #1
 8007598:	409a      	lsls	r2, r3
 800759a:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <xTaskPriorityDisinherit+0x108>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4313      	orrs	r3, r2
 80075a0:	4a0d      	ldr	r2, [pc, #52]	; (80075d8 <xTaskPriorityDisinherit+0x108>)
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a8:	4613      	mov	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4a08      	ldr	r2, [pc, #32]	; (80075d4 <xTaskPriorityDisinherit+0x104>)
 80075b2:	441a      	add	r2, r3
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	3304      	adds	r3, #4
 80075b8:	4619      	mov	r1, r3
 80075ba:	4610      	mov	r0, r2
 80075bc:	f7fe f91b 	bl	80057f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075c0:	2301      	movs	r3, #1
 80075c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075c4:	697b      	ldr	r3, [r7, #20]
	}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	24004e8c 	.word	0x24004e8c
 80075d4:	24004e90 	.word	0x24004e90
 80075d8:	24004f94 	.word	0x24004f94

080075dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80075ea:	2301      	movs	r3, #1
 80075ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d077      	beq.n	80076e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10a      	bne.n	8007612 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80075fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	60fb      	str	r3, [r7, #12]
}
 800760e:	bf00      	nop
 8007610:	e7fe      	b.n	8007610 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	429a      	cmp	r2, r3
 800761a:	d902      	bls.n	8007622 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	61fb      	str	r3, [r7, #28]
 8007620:	e002      	b.n	8007628 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007626:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762c:	69fa      	ldr	r2, [r7, #28]
 800762e:	429a      	cmp	r2, r3
 8007630:	d058      	beq.n	80076e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	429a      	cmp	r2, r3
 800763a:	d153      	bne.n	80076e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800763c:	4b2b      	ldr	r3, [pc, #172]	; (80076ec <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	429a      	cmp	r2, r3
 8007644:	d10a      	bne.n	800765c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	60bb      	str	r3, [r7, #8]
}
 8007658:	bf00      	nop
 800765a:	e7fe      	b.n	800765a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	69fa      	ldr	r2, [r7, #28]
 8007666:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	2b00      	cmp	r3, #0
 800766e:	db04      	blt.n	800767a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	f1c3 0207 	rsb	r2, r3, #7
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	6959      	ldr	r1, [r3, #20]
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4a19      	ldr	r2, [pc, #100]	; (80076f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800768a:	4413      	add	r3, r2
 800768c:	4299      	cmp	r1, r3
 800768e:	d129      	bne.n	80076e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	3304      	adds	r3, #4
 8007694:	4618      	mov	r0, r3
 8007696:	f7fe f90b 	bl	80058b0 <uxListRemove>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10a      	bne.n	80076b6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	2201      	movs	r2, #1
 80076a6:	fa02 f303 	lsl.w	r3, r2, r3
 80076aa:	43da      	mvns	r2, r3
 80076ac:	4b11      	ldr	r3, [pc, #68]	; (80076f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4013      	ands	r3, r2
 80076b2:	4a10      	ldr	r2, [pc, #64]	; (80076f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80076b4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ba:	2201      	movs	r2, #1
 80076bc:	409a      	lsls	r2, r3
 80076be:	4b0d      	ldr	r3, [pc, #52]	; (80076f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	4a0b      	ldr	r2, [pc, #44]	; (80076f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80076c6:	6013      	str	r3, [r2, #0]
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076cc:	4613      	mov	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4a06      	ldr	r2, [pc, #24]	; (80076f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80076d6:	441a      	add	r2, r3
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	3304      	adds	r3, #4
 80076dc:	4619      	mov	r1, r3
 80076de:	4610      	mov	r0, r2
 80076e0:	f7fe f889 	bl	80057f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076e4:	bf00      	nop
 80076e6:	3720      	adds	r7, #32
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	24004e8c 	.word	0x24004e8c
 80076f0:	24004e90 	.word	0x24004e90
 80076f4:	24004f94 	.word	0x24004f94

080076f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80076fc:	4b07      	ldr	r3, [pc, #28]	; (800771c <pvTaskIncrementMutexHeldCount+0x24>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <pvTaskIncrementMutexHeldCount+0x24>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800770a:	3201      	adds	r2, #1
 800770c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800770e:	4b03      	ldr	r3, [pc, #12]	; (800771c <pvTaskIncrementMutexHeldCount+0x24>)
 8007710:	681b      	ldr	r3, [r3, #0]
	}
 8007712:	4618      	mov	r0, r3
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	24004e8c 	.word	0x24004e8c

08007720 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800772a:	4b29      	ldr	r3, [pc, #164]	; (80077d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007730:	4b28      	ldr	r3, [pc, #160]	; (80077d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3304      	adds	r3, #4
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe f8ba 	bl	80058b0 <uxListRemove>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10b      	bne.n	800775a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007742:	4b24      	ldr	r3, [pc, #144]	; (80077d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	2201      	movs	r2, #1
 800774a:	fa02 f303 	lsl.w	r3, r2, r3
 800774e:	43da      	mvns	r2, r3
 8007750:	4b21      	ldr	r3, [pc, #132]	; (80077d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4013      	ands	r3, r2
 8007756:	4a20      	ldr	r2, [pc, #128]	; (80077d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007758:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007760:	d10a      	bne.n	8007778 <prvAddCurrentTaskToDelayedList+0x58>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d007      	beq.n	8007778 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007768:	4b1a      	ldr	r3, [pc, #104]	; (80077d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3304      	adds	r3, #4
 800776e:	4619      	mov	r1, r3
 8007770:	481a      	ldr	r0, [pc, #104]	; (80077dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007772:	f7fe f840 	bl	80057f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007776:	e026      	b.n	80077c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4413      	add	r3, r2
 800777e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007780:	4b14      	ldr	r3, [pc, #80]	; (80077d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	429a      	cmp	r2, r3
 800778e:	d209      	bcs.n	80077a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007790:	4b13      	ldr	r3, [pc, #76]	; (80077e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	4b0f      	ldr	r3, [pc, #60]	; (80077d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3304      	adds	r3, #4
 800779a:	4619      	mov	r1, r3
 800779c:	4610      	mov	r0, r2
 800779e:	f7fe f84e 	bl	800583e <vListInsert>
}
 80077a2:	e010      	b.n	80077c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077a4:	4b0f      	ldr	r3, [pc, #60]	; (80077e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	4b0a      	ldr	r3, [pc, #40]	; (80077d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3304      	adds	r3, #4
 80077ae:	4619      	mov	r1, r3
 80077b0:	4610      	mov	r0, r2
 80077b2:	f7fe f844 	bl	800583e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077b6:	4b0c      	ldr	r3, [pc, #48]	; (80077e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d202      	bcs.n	80077c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80077c0:	4a09      	ldr	r2, [pc, #36]	; (80077e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	6013      	str	r3, [r2, #0]
}
 80077c6:	bf00      	nop
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	24004f90 	.word	0x24004f90
 80077d4:	24004e8c 	.word	0x24004e8c
 80077d8:	24004f94 	.word	0x24004f94
 80077dc:	24004f78 	.word	0x24004f78
 80077e0:	24004f48 	.word	0x24004f48
 80077e4:	24004f44 	.word	0x24004f44
 80077e8:	24004fac 	.word	0x24004fac

080077ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	3b04      	subs	r3, #4
 80077fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3b04      	subs	r3, #4
 800780a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f023 0201 	bic.w	r2, r3, #1
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3b04      	subs	r3, #4
 800781a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800781c:	4a0c      	ldr	r2, [pc, #48]	; (8007850 <pxPortInitialiseStack+0x64>)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3b14      	subs	r3, #20
 8007826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	3b04      	subs	r3, #4
 8007832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f06f 0202 	mvn.w	r2, #2
 800783a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	3b20      	subs	r3, #32
 8007840:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007842:	68fb      	ldr	r3, [r7, #12]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	08007855 	.word	0x08007855

08007854 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800785a:	2300      	movs	r3, #0
 800785c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800785e:	4b12      	ldr	r3, [pc, #72]	; (80078a8 <prvTaskExitError+0x54>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007866:	d00a      	beq.n	800787e <prvTaskExitError+0x2a>
	__asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	60fb      	str	r3, [r7, #12]
}
 800787a:	bf00      	nop
 800787c:	e7fe      	b.n	800787c <prvTaskExitError+0x28>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	60bb      	str	r3, [r7, #8]
}
 8007890:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007892:	bf00      	nop
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0fc      	beq.n	8007894 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800789a:	bf00      	nop
 800789c:	bf00      	nop
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	24000024 	.word	0x24000024
 80078ac:	00000000 	.word	0x00000000

080078b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078b0:	4b07      	ldr	r3, [pc, #28]	; (80078d0 <pxCurrentTCBConst2>)
 80078b2:	6819      	ldr	r1, [r3, #0]
 80078b4:	6808      	ldr	r0, [r1, #0]
 80078b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ba:	f380 8809 	msr	PSP, r0
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	f04f 0000 	mov.w	r0, #0
 80078c6:	f380 8811 	msr	BASEPRI, r0
 80078ca:	4770      	bx	lr
 80078cc:	f3af 8000 	nop.w

080078d0 <pxCurrentTCBConst2>:
 80078d0:	24004e8c 	.word	0x24004e8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop

080078d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078d8:	4808      	ldr	r0, [pc, #32]	; (80078fc <prvPortStartFirstTask+0x24>)
 80078da:	6800      	ldr	r0, [r0, #0]
 80078dc:	6800      	ldr	r0, [r0, #0]
 80078de:	f380 8808 	msr	MSP, r0
 80078e2:	f04f 0000 	mov.w	r0, #0
 80078e6:	f380 8814 	msr	CONTROL, r0
 80078ea:	b662      	cpsie	i
 80078ec:	b661      	cpsie	f
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	df00      	svc	0
 80078f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078fa:	bf00      	nop
 80078fc:	e000ed08 	.word	0xe000ed08

08007900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007906:	4b46      	ldr	r3, [pc, #280]	; (8007a20 <xPortStartScheduler+0x120>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a46      	ldr	r2, [pc, #280]	; (8007a24 <xPortStartScheduler+0x124>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d10a      	bne.n	8007926 <xPortStartScheduler+0x26>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	613b      	str	r3, [r7, #16]
}
 8007922:	bf00      	nop
 8007924:	e7fe      	b.n	8007924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007926:	4b3e      	ldr	r3, [pc, #248]	; (8007a20 <xPortStartScheduler+0x120>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a3f      	ldr	r2, [pc, #252]	; (8007a28 <xPortStartScheduler+0x128>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d10a      	bne.n	8007946 <xPortStartScheduler+0x46>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	60fb      	str	r3, [r7, #12]
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007946:	4b39      	ldr	r3, [pc, #228]	; (8007a2c <xPortStartScheduler+0x12c>)
 8007948:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	b2db      	uxtb	r3, r3
 8007950:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	22ff      	movs	r2, #255	; 0xff
 8007956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	b2db      	uxtb	r3, r3
 800795e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007960:	78fb      	ldrb	r3, [r7, #3]
 8007962:	b2db      	uxtb	r3, r3
 8007964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007968:	b2da      	uxtb	r2, r3
 800796a:	4b31      	ldr	r3, [pc, #196]	; (8007a30 <xPortStartScheduler+0x130>)
 800796c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800796e:	4b31      	ldr	r3, [pc, #196]	; (8007a34 <xPortStartScheduler+0x134>)
 8007970:	2207      	movs	r2, #7
 8007972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007974:	e009      	b.n	800798a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007976:	4b2f      	ldr	r3, [pc, #188]	; (8007a34 <xPortStartScheduler+0x134>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3b01      	subs	r3, #1
 800797c:	4a2d      	ldr	r2, [pc, #180]	; (8007a34 <xPortStartScheduler+0x134>)
 800797e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	b2db      	uxtb	r3, r3
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	b2db      	uxtb	r3, r3
 8007988:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800798a:	78fb      	ldrb	r3, [r7, #3]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007992:	2b80      	cmp	r3, #128	; 0x80
 8007994:	d0ef      	beq.n	8007976 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007996:	4b27      	ldr	r3, [pc, #156]	; (8007a34 <xPortStartScheduler+0x134>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f1c3 0307 	rsb	r3, r3, #7
 800799e:	2b04      	cmp	r3, #4
 80079a0:	d00a      	beq.n	80079b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	60bb      	str	r3, [r7, #8]
}
 80079b4:	bf00      	nop
 80079b6:	e7fe      	b.n	80079b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079b8:	4b1e      	ldr	r3, [pc, #120]	; (8007a34 <xPortStartScheduler+0x134>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	021b      	lsls	r3, r3, #8
 80079be:	4a1d      	ldr	r2, [pc, #116]	; (8007a34 <xPortStartScheduler+0x134>)
 80079c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079c2:	4b1c      	ldr	r3, [pc, #112]	; (8007a34 <xPortStartScheduler+0x134>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079ca:	4a1a      	ldr	r2, [pc, #104]	; (8007a34 <xPortStartScheduler+0x134>)
 80079cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079d6:	4b18      	ldr	r3, [pc, #96]	; (8007a38 <xPortStartScheduler+0x138>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a17      	ldr	r2, [pc, #92]	; (8007a38 <xPortStartScheduler+0x138>)
 80079dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079e2:	4b15      	ldr	r3, [pc, #84]	; (8007a38 <xPortStartScheduler+0x138>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a14      	ldr	r2, [pc, #80]	; (8007a38 <xPortStartScheduler+0x138>)
 80079e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80079ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079ee:	f000 f8dd 	bl	8007bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079f2:	4b12      	ldr	r3, [pc, #72]	; (8007a3c <xPortStartScheduler+0x13c>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80079f8:	f000 f8fc 	bl	8007bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079fc:	4b10      	ldr	r3, [pc, #64]	; (8007a40 <xPortStartScheduler+0x140>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a0f      	ldr	r2, [pc, #60]	; (8007a40 <xPortStartScheduler+0x140>)
 8007a02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a08:	f7ff ff66 	bl	80078d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a0c:	f7ff fa86 	bl	8006f1c <vTaskSwitchContext>
	prvTaskExitError();
 8007a10:	f7ff ff20 	bl	8007854 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	e000ed00 	.word	0xe000ed00
 8007a24:	410fc271 	.word	0x410fc271
 8007a28:	410fc270 	.word	0x410fc270
 8007a2c:	e000e400 	.word	0xe000e400
 8007a30:	24004fb8 	.word	0x24004fb8
 8007a34:	24004fbc 	.word	0x24004fbc
 8007a38:	e000ed20 	.word	0xe000ed20
 8007a3c:	24000024 	.word	0x24000024
 8007a40:	e000ef34 	.word	0xe000ef34

08007a44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	607b      	str	r3, [r7, #4]
}
 8007a5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a5e:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <vPortEnterCritical+0x58>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3301      	adds	r3, #1
 8007a64:	4a0d      	ldr	r2, [pc, #52]	; (8007a9c <vPortEnterCritical+0x58>)
 8007a66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a68:	4b0c      	ldr	r3, [pc, #48]	; (8007a9c <vPortEnterCritical+0x58>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d10f      	bne.n	8007a90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a70:	4b0b      	ldr	r3, [pc, #44]	; (8007aa0 <vPortEnterCritical+0x5c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	603b      	str	r3, [r7, #0]
}
 8007a8c:	bf00      	nop
 8007a8e:	e7fe      	b.n	8007a8e <vPortEnterCritical+0x4a>
	}
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr
 8007a9c:	24000024 	.word	0x24000024
 8007aa0:	e000ed04 	.word	0xe000ed04

08007aa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007aaa:	4b12      	ldr	r3, [pc, #72]	; (8007af4 <vPortExitCritical+0x50>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10a      	bne.n	8007ac8 <vPortExitCritical+0x24>
	__asm volatile
 8007ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab6:	f383 8811 	msr	BASEPRI, r3
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	607b      	str	r3, [r7, #4]
}
 8007ac4:	bf00      	nop
 8007ac6:	e7fe      	b.n	8007ac6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ac8:	4b0a      	ldr	r3, [pc, #40]	; (8007af4 <vPortExitCritical+0x50>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3b01      	subs	r3, #1
 8007ace:	4a09      	ldr	r2, [pc, #36]	; (8007af4 <vPortExitCritical+0x50>)
 8007ad0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ad2:	4b08      	ldr	r3, [pc, #32]	; (8007af4 <vPortExitCritical+0x50>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d105      	bne.n	8007ae6 <vPortExitCritical+0x42>
 8007ada:	2300      	movs	r3, #0
 8007adc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	f383 8811 	msr	BASEPRI, r3
}
 8007ae4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ae6:	bf00      	nop
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	24000024 	.word	0x24000024
	...

08007b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b00:	f3ef 8009 	mrs	r0, PSP
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	4b15      	ldr	r3, [pc, #84]	; (8007b60 <pxCurrentTCBConst>)
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	f01e 0f10 	tst.w	lr, #16
 8007b10:	bf08      	it	eq
 8007b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1a:	6010      	str	r0, [r2, #0]
 8007b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b24:	f380 8811 	msr	BASEPRI, r0
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f7ff f9f4 	bl	8006f1c <vTaskSwitchContext>
 8007b34:	f04f 0000 	mov.w	r0, #0
 8007b38:	f380 8811 	msr	BASEPRI, r0
 8007b3c:	bc09      	pop	{r0, r3}
 8007b3e:	6819      	ldr	r1, [r3, #0]
 8007b40:	6808      	ldr	r0, [r1, #0]
 8007b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b46:	f01e 0f10 	tst.w	lr, #16
 8007b4a:	bf08      	it	eq
 8007b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b50:	f380 8809 	msr	PSP, r0
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	f3af 8000 	nop.w

08007b60 <pxCurrentTCBConst>:
 8007b60:	24004e8c 	.word	0x24004e8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b64:	bf00      	nop
 8007b66:	bf00      	nop

08007b68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	607b      	str	r3, [r7, #4]
}
 8007b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b82:	f7ff f913 	bl	8006dac <xTaskIncrementTick>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d003      	beq.n	8007b94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b8c:	4b06      	ldr	r3, [pc, #24]	; (8007ba8 <SysTick_Handler+0x40>)
 8007b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	2300      	movs	r3, #0
 8007b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	f383 8811 	msr	BASEPRI, r3
}
 8007b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ba0:	bf00      	nop
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	e000ed04 	.word	0xe000ed04

08007bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bac:	b480      	push	{r7}
 8007bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bb0:	4b0b      	ldr	r3, [pc, #44]	; (8007be0 <vPortSetupTimerInterrupt+0x34>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bb6:	4b0b      	ldr	r3, [pc, #44]	; (8007be4 <vPortSetupTimerInterrupt+0x38>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bbc:	4b0a      	ldr	r3, [pc, #40]	; (8007be8 <vPortSetupTimerInterrupt+0x3c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a0a      	ldr	r2, [pc, #40]	; (8007bec <vPortSetupTimerInterrupt+0x40>)
 8007bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc6:	099b      	lsrs	r3, r3, #6
 8007bc8:	4a09      	ldr	r2, [pc, #36]	; (8007bf0 <vPortSetupTimerInterrupt+0x44>)
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bce:	4b04      	ldr	r3, [pc, #16]	; (8007be0 <vPortSetupTimerInterrupt+0x34>)
 8007bd0:	2207      	movs	r2, #7
 8007bd2:	601a      	str	r2, [r3, #0]
}
 8007bd4:	bf00      	nop
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	e000e010 	.word	0xe000e010
 8007be4:	e000e018 	.word	0xe000e018
 8007be8:	24000000 	.word	0x24000000
 8007bec:	10624dd3 	.word	0x10624dd3
 8007bf0:	e000e014 	.word	0xe000e014

08007bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c04 <vPortEnableVFP+0x10>
 8007bf8:	6801      	ldr	r1, [r0, #0]
 8007bfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007bfe:	6001      	str	r1, [r0, #0]
 8007c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c02:	bf00      	nop
 8007c04:	e000ed88 	.word	0xe000ed88

08007c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c0e:	f3ef 8305 	mrs	r3, IPSR
 8007c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2b0f      	cmp	r3, #15
 8007c18:	d914      	bls.n	8007c44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c1a:	4a17      	ldr	r2, [pc, #92]	; (8007c78 <vPortValidateInterruptPriority+0x70>)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4413      	add	r3, r2
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c24:	4b15      	ldr	r3, [pc, #84]	; (8007c7c <vPortValidateInterruptPriority+0x74>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	7afa      	ldrb	r2, [r7, #11]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d20a      	bcs.n	8007c44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	607b      	str	r3, [r7, #4]
}
 8007c40:	bf00      	nop
 8007c42:	e7fe      	b.n	8007c42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c44:	4b0e      	ldr	r3, [pc, #56]	; (8007c80 <vPortValidateInterruptPriority+0x78>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c4c:	4b0d      	ldr	r3, [pc, #52]	; (8007c84 <vPortValidateInterruptPriority+0x7c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d90a      	bls.n	8007c6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	603b      	str	r3, [r7, #0]
}
 8007c66:	bf00      	nop
 8007c68:	e7fe      	b.n	8007c68 <vPortValidateInterruptPriority+0x60>
	}
 8007c6a:	bf00      	nop
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	e000e3f0 	.word	0xe000e3f0
 8007c7c:	24004fb8 	.word	0x24004fb8
 8007c80:	e000ed0c 	.word	0xe000ed0c
 8007c84:	24004fbc 	.word	0x24004fbc

08007c88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b08a      	sub	sp, #40	; 0x28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c90:	2300      	movs	r3, #0
 8007c92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c94:	f7fe ffbe 	bl	8006c14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c98:	4b5b      	ldr	r3, [pc, #364]	; (8007e08 <pvPortMalloc+0x180>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d101      	bne.n	8007ca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ca0:	f000 f920 	bl	8007ee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ca4:	4b59      	ldr	r3, [pc, #356]	; (8007e0c <pvPortMalloc+0x184>)
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4013      	ands	r3, r2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f040 8093 	bne.w	8007dd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d01d      	beq.n	8007cf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007cb8:	2208      	movs	r2, #8
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f003 0307 	and.w	r3, r3, #7
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d014      	beq.n	8007cf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f023 0307 	bic.w	r3, r3, #7
 8007cd0:	3308      	adds	r3, #8
 8007cd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f003 0307 	and.w	r3, r3, #7
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00a      	beq.n	8007cf4 <pvPortMalloc+0x6c>
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	617b      	str	r3, [r7, #20]
}
 8007cf0:	bf00      	nop
 8007cf2:	e7fe      	b.n	8007cf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d06e      	beq.n	8007dd8 <pvPortMalloc+0x150>
 8007cfa:	4b45      	ldr	r3, [pc, #276]	; (8007e10 <pvPortMalloc+0x188>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d869      	bhi.n	8007dd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d04:	4b43      	ldr	r3, [pc, #268]	; (8007e14 <pvPortMalloc+0x18c>)
 8007d06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d08:	4b42      	ldr	r3, [pc, #264]	; (8007e14 <pvPortMalloc+0x18c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d0e:	e004      	b.n	8007d1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d903      	bls.n	8007d2c <pvPortMalloc+0xa4>
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1f1      	bne.n	8007d10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d2c:	4b36      	ldr	r3, [pc, #216]	; (8007e08 <pvPortMalloc+0x180>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d050      	beq.n	8007dd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2208      	movs	r2, #8
 8007d3c:	4413      	add	r3, r2
 8007d3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	1ad2      	subs	r2, r2, r3
 8007d50:	2308      	movs	r3, #8
 8007d52:	005b      	lsls	r3, r3, #1
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d91f      	bls.n	8007d98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	f003 0307 	and.w	r3, r3, #7
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <pvPortMalloc+0xf8>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	613b      	str	r3, [r7, #16]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	1ad2      	subs	r2, r2, r3
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d92:	69b8      	ldr	r0, [r7, #24]
 8007d94:	f000 f908 	bl	8007fa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d98:	4b1d      	ldr	r3, [pc, #116]	; (8007e10 <pvPortMalloc+0x188>)
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	4a1b      	ldr	r2, [pc, #108]	; (8007e10 <pvPortMalloc+0x188>)
 8007da4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007da6:	4b1a      	ldr	r3, [pc, #104]	; (8007e10 <pvPortMalloc+0x188>)
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	4b1b      	ldr	r3, [pc, #108]	; (8007e18 <pvPortMalloc+0x190>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d203      	bcs.n	8007dba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007db2:	4b17      	ldr	r3, [pc, #92]	; (8007e10 <pvPortMalloc+0x188>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a18      	ldr	r2, [pc, #96]	; (8007e18 <pvPortMalloc+0x190>)
 8007db8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	4b13      	ldr	r3, [pc, #76]	; (8007e0c <pvPortMalloc+0x184>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	2200      	movs	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007dce:	4b13      	ldr	r3, [pc, #76]	; (8007e1c <pvPortMalloc+0x194>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	4a11      	ldr	r2, [pc, #68]	; (8007e1c <pvPortMalloc+0x194>)
 8007dd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007dd8:	f7fe ff2a 	bl	8006c30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	f003 0307 	and.w	r3, r3, #7
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <pvPortMalloc+0x174>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	60fb      	str	r3, [r7, #12]
}
 8007df8:	bf00      	nop
 8007dfa:	e7fe      	b.n	8007dfa <pvPortMalloc+0x172>
	return pvReturn;
 8007dfc:	69fb      	ldr	r3, [r7, #28]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3728      	adds	r7, #40	; 0x28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	24008bc8 	.word	0x24008bc8
 8007e0c:	24008bdc 	.word	0x24008bdc
 8007e10:	24008bcc 	.word	0x24008bcc
 8007e14:	24008bc0 	.word	0x24008bc0
 8007e18:	24008bd0 	.word	0x24008bd0
 8007e1c:	24008bd4 	.word	0x24008bd4

08007e20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d04d      	beq.n	8007ece <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e32:	2308      	movs	r3, #8
 8007e34:	425b      	negs	r3, r3
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	4413      	add	r3, r2
 8007e3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	4b24      	ldr	r3, [pc, #144]	; (8007ed8 <vPortFree+0xb8>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4013      	ands	r3, r2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10a      	bne.n	8007e64 <vPortFree+0x44>
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	60fb      	str	r3, [r7, #12]
}
 8007e60:	bf00      	nop
 8007e62:	e7fe      	b.n	8007e62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00a      	beq.n	8007e82 <vPortFree+0x62>
	__asm volatile
 8007e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	60bb      	str	r3, [r7, #8]
}
 8007e7e:	bf00      	nop
 8007e80:	e7fe      	b.n	8007e80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	4b14      	ldr	r3, [pc, #80]	; (8007ed8 <vPortFree+0xb8>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d01e      	beq.n	8007ece <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d11a      	bne.n	8007ece <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	4b0e      	ldr	r3, [pc, #56]	; (8007ed8 <vPortFree+0xb8>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	43db      	mvns	r3, r3
 8007ea2:	401a      	ands	r2, r3
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ea8:	f7fe feb4 	bl	8006c14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	4b0a      	ldr	r3, [pc, #40]	; (8007edc <vPortFree+0xbc>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	4a09      	ldr	r2, [pc, #36]	; (8007edc <vPortFree+0xbc>)
 8007eb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eba:	6938      	ldr	r0, [r7, #16]
 8007ebc:	f000 f874 	bl	8007fa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ec0:	4b07      	ldr	r3, [pc, #28]	; (8007ee0 <vPortFree+0xc0>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	4a06      	ldr	r2, [pc, #24]	; (8007ee0 <vPortFree+0xc0>)
 8007ec8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007eca:	f7fe feb1 	bl	8006c30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ece:	bf00      	nop
 8007ed0:	3718      	adds	r7, #24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	24008bdc 	.word	0x24008bdc
 8007edc:	24008bcc 	.word	0x24008bcc
 8007ee0:	24008bd8 	.word	0x24008bd8

08007ee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007eea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007eee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ef0:	4b27      	ldr	r3, [pc, #156]	; (8007f90 <prvHeapInit+0xac>)
 8007ef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f003 0307 	and.w	r3, r3, #7
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00c      	beq.n	8007f18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	3307      	adds	r3, #7
 8007f02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f023 0307 	bic.w	r3, r3, #7
 8007f0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	4a1f      	ldr	r2, [pc, #124]	; (8007f90 <prvHeapInit+0xac>)
 8007f14:	4413      	add	r3, r2
 8007f16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f1c:	4a1d      	ldr	r2, [pc, #116]	; (8007f94 <prvHeapInit+0xb0>)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f22:	4b1c      	ldr	r3, [pc, #112]	; (8007f94 <prvHeapInit+0xb0>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f30:	2208      	movs	r2, #8
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	1a9b      	subs	r3, r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f023 0307 	bic.w	r3, r3, #7
 8007f3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4a15      	ldr	r2, [pc, #84]	; (8007f98 <prvHeapInit+0xb4>)
 8007f44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f46:	4b14      	ldr	r3, [pc, #80]	; (8007f98 <prvHeapInit+0xb4>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f4e:	4b12      	ldr	r3, [pc, #72]	; (8007f98 <prvHeapInit+0xb4>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2200      	movs	r2, #0
 8007f54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	1ad2      	subs	r2, r2, r3
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f64:	4b0c      	ldr	r3, [pc, #48]	; (8007f98 <prvHeapInit+0xb4>)
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	4a0a      	ldr	r2, [pc, #40]	; (8007f9c <prvHeapInit+0xb8>)
 8007f72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	4a09      	ldr	r2, [pc, #36]	; (8007fa0 <prvHeapInit+0xbc>)
 8007f7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f7c:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <prvHeapInit+0xc0>)
 8007f7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f82:	601a      	str	r2, [r3, #0]
}
 8007f84:	bf00      	nop
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	24004fc0 	.word	0x24004fc0
 8007f94:	24008bc0 	.word	0x24008bc0
 8007f98:	24008bc8 	.word	0x24008bc8
 8007f9c:	24008bd0 	.word	0x24008bd0
 8007fa0:	24008bcc 	.word	0x24008bcc
 8007fa4:	24008bdc 	.word	0x24008bdc

08007fa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fb0:	4b28      	ldr	r3, [pc, #160]	; (8008054 <prvInsertBlockIntoFreeList+0xac>)
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	e002      	b.n	8007fbc <prvInsertBlockIntoFreeList+0x14>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d8f7      	bhi.n	8007fb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d108      	bne.n	8007fea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	441a      	add	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	441a      	add	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d118      	bne.n	8008030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	4b15      	ldr	r3, [pc, #84]	; (8008058 <prvInsertBlockIntoFreeList+0xb0>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	429a      	cmp	r2, r3
 8008008:	d00d      	beq.n	8008026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	441a      	add	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	e008      	b.n	8008038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008026:	4b0c      	ldr	r3, [pc, #48]	; (8008058 <prvInsertBlockIntoFreeList+0xb0>)
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	e003      	b.n	8008038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	429a      	cmp	r2, r3
 800803e:	d002      	beq.n	8008046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008046:	bf00      	nop
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	24008bc0 	.word	0x24008bc0
 8008058:	24008bc8 	.word	0x24008bc8

0800805c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8008066:	f007 fb79 	bl	800f75c <sys_timeouts_sleeptime>
 800806a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008072:	d10b      	bne.n	800808c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8008074:	4813      	ldr	r0, [pc, #76]	; (80080c4 <tcpip_timeouts_mbox_fetch+0x68>)
 8008076:	f00a fc52 	bl	801291e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800807a:	2200      	movs	r2, #0
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f00a fbc4 	bl	801280c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008084:	480f      	ldr	r0, [pc, #60]	; (80080c4 <tcpip_timeouts_mbox_fetch+0x68>)
 8008086:	f00a fc3b 	bl	8012900 <sys_mutex_lock>
    return;
 800808a:	e018      	b.n	80080be <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d102      	bne.n	8008098 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8008092:	f007 fb29 	bl	800f6e8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008096:	e7e6      	b.n	8008066 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8008098:	480a      	ldr	r0, [pc, #40]	; (80080c4 <tcpip_timeouts_mbox_fetch+0x68>)
 800809a:	f00a fc40 	bl	801291e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f00a fbb2 	bl	801280c <sys_arch_mbox_fetch>
 80080a8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80080aa:	4806      	ldr	r0, [pc, #24]	; (80080c4 <tcpip_timeouts_mbox_fetch+0x68>)
 80080ac:	f00a fc28 	bl	8012900 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080b6:	d102      	bne.n	80080be <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80080b8:	f007 fb16 	bl	800f6e8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80080bc:	e7d3      	b.n	8008066 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	24008bec 	.word	0x24008bec

080080c8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80080d0:	4810      	ldr	r0, [pc, #64]	; (8008114 <tcpip_thread+0x4c>)
 80080d2:	f00a fc15 	bl	8012900 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80080d6:	4b10      	ldr	r3, [pc, #64]	; (8008118 <tcpip_thread+0x50>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d005      	beq.n	80080ea <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80080de:	4b0e      	ldr	r3, [pc, #56]	; (8008118 <tcpip_thread+0x50>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a0e      	ldr	r2, [pc, #56]	; (800811c <tcpip_thread+0x54>)
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	4610      	mov	r0, r2
 80080e8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80080ea:	f107 030c 	add.w	r3, r7, #12
 80080ee:	4619      	mov	r1, r3
 80080f0:	480b      	ldr	r0, [pc, #44]	; (8008120 <tcpip_thread+0x58>)
 80080f2:	f7ff ffb3 	bl	800805c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d106      	bne.n	800810a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80080fc:	4b09      	ldr	r3, [pc, #36]	; (8008124 <tcpip_thread+0x5c>)
 80080fe:	2291      	movs	r2, #145	; 0x91
 8008100:	4909      	ldr	r1, [pc, #36]	; (8008128 <tcpip_thread+0x60>)
 8008102:	480a      	ldr	r0, [pc, #40]	; (800812c <tcpip_thread+0x64>)
 8008104:	f00a fd4a 	bl	8012b9c <iprintf>
      continue;
 8008108:	e003      	b.n	8008112 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4618      	mov	r0, r3
 800810e:	f000 f80f 	bl	8008130 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008112:	e7ea      	b.n	80080ea <tcpip_thread+0x22>
 8008114:	24008bec 	.word	0x24008bec
 8008118:	24008be0 	.word	0x24008be0
 800811c:	24008be4 	.word	0x24008be4
 8008120:	24008be8 	.word	0x24008be8
 8008124:	08013b64 	.word	0x08013b64
 8008128:	08013b94 	.word	0x08013b94
 800812c:	08013bb4 	.word	0x08013bb4

08008130 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b02      	cmp	r3, #2
 800813e:	d026      	beq.n	800818e <tcpip_thread_handle_msg+0x5e>
 8008140:	2b02      	cmp	r3, #2
 8008142:	dc2b      	bgt.n	800819c <tcpip_thread_handle_msg+0x6c>
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <tcpip_thread_handle_msg+0x1e>
 8008148:	2b01      	cmp	r3, #1
 800814a:	d015      	beq.n	8008178 <tcpip_thread_handle_msg+0x48>
 800814c:	e026      	b.n	800819c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	6850      	ldr	r0, [r2, #4]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	6892      	ldr	r2, [r2, #8]
 800815a:	4611      	mov	r1, r2
 800815c:	4798      	blx	r3
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d004      	beq.n	800816e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	4618      	mov	r0, r3
 800816a:	f001 fdaf 	bl	8009ccc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800816e:	6879      	ldr	r1, [r7, #4]
 8008170:	2009      	movs	r0, #9
 8008172:	f000 ff09 	bl	8008f88 <memp_free>
      break;
 8008176:	e018      	b.n	80081aa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	6892      	ldr	r2, [r2, #8]
 8008180:	4610      	mov	r0, r2
 8008182:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008184:	6879      	ldr	r1, [r7, #4]
 8008186:	2008      	movs	r0, #8
 8008188:	f000 fefe 	bl	8008f88 <memp_free>
      break;
 800818c:	e00d      	b.n	80081aa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	6892      	ldr	r2, [r2, #8]
 8008196:	4610      	mov	r0, r2
 8008198:	4798      	blx	r3
      break;
 800819a:	e006      	b.n	80081aa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800819c:	4b05      	ldr	r3, [pc, #20]	; (80081b4 <tcpip_thread_handle_msg+0x84>)
 800819e:	22cf      	movs	r2, #207	; 0xcf
 80081a0:	4905      	ldr	r1, [pc, #20]	; (80081b8 <tcpip_thread_handle_msg+0x88>)
 80081a2:	4806      	ldr	r0, [pc, #24]	; (80081bc <tcpip_thread_handle_msg+0x8c>)
 80081a4:	f00a fcfa 	bl	8012b9c <iprintf>
      break;
 80081a8:	bf00      	nop
  }
}
 80081aa:	bf00      	nop
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	08013b64 	.word	0x08013b64
 80081b8:	08013b94 	.word	0x08013b94
 80081bc:	08013bb4 	.word	0x08013bb4

080081c0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80081cc:	481a      	ldr	r0, [pc, #104]	; (8008238 <tcpip_inpkt+0x78>)
 80081ce:	f00a fb5c 	bl	801288a <sys_mbox_valid>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d105      	bne.n	80081e4 <tcpip_inpkt+0x24>
 80081d8:	4b18      	ldr	r3, [pc, #96]	; (800823c <tcpip_inpkt+0x7c>)
 80081da:	22fc      	movs	r2, #252	; 0xfc
 80081dc:	4918      	ldr	r1, [pc, #96]	; (8008240 <tcpip_inpkt+0x80>)
 80081de:	4819      	ldr	r0, [pc, #100]	; (8008244 <tcpip_inpkt+0x84>)
 80081e0:	f00a fcdc 	bl	8012b9c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80081e4:	2009      	movs	r0, #9
 80081e6:	f000 fe59 	bl	8008e9c <memp_malloc>
 80081ea:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d102      	bne.n	80081f8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80081f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081f6:	e01a      	b.n	800822e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	2200      	movs	r2, #0
 80081fc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008210:	6979      	ldr	r1, [r7, #20]
 8008212:	4809      	ldr	r0, [pc, #36]	; (8008238 <tcpip_inpkt+0x78>)
 8008214:	f00a fae0 	bl	80127d8 <sys_mbox_trypost>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d006      	beq.n	800822c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800821e:	6979      	ldr	r1, [r7, #20]
 8008220:	2009      	movs	r0, #9
 8008222:	f000 feb1 	bl	8008f88 <memp_free>
    return ERR_MEM;
 8008226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800822a:	e000      	b.n	800822e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800822c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	24008be8 	.word	0x24008be8
 800823c:	08013b64 	.word	0x08013b64
 8008240:	08013bdc 	.word	0x08013bdc
 8008244:	08013bb4 	.word	0x08013bb4

08008248 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008258:	f003 0318 	and.w	r3, r3, #24
 800825c:	2b00      	cmp	r3, #0
 800825e:	d006      	beq.n	800826e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008260:	4a08      	ldr	r2, [pc, #32]	; (8008284 <tcpip_input+0x3c>)
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7ff ffab 	bl	80081c0 <tcpip_inpkt>
 800826a:	4603      	mov	r3, r0
 800826c:	e005      	b.n	800827a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800826e:	4a06      	ldr	r2, [pc, #24]	; (8008288 <tcpip_input+0x40>)
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff ffa4 	bl	80081c0 <tcpip_inpkt>
 8008278:	4603      	mov	r3, r0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	080125e9 	.word	0x080125e9
 8008288:	080114f1 	.word	0x080114f1

0800828c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008296:	4819      	ldr	r0, [pc, #100]	; (80082fc <tcpip_try_callback+0x70>)
 8008298:	f00a faf7 	bl	801288a <sys_mbox_valid>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d106      	bne.n	80082b0 <tcpip_try_callback+0x24>
 80082a2:	4b17      	ldr	r3, [pc, #92]	; (8008300 <tcpip_try_callback+0x74>)
 80082a4:	f240 125d 	movw	r2, #349	; 0x15d
 80082a8:	4916      	ldr	r1, [pc, #88]	; (8008304 <tcpip_try_callback+0x78>)
 80082aa:	4817      	ldr	r0, [pc, #92]	; (8008308 <tcpip_try_callback+0x7c>)
 80082ac:	f00a fc76 	bl	8012b9c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80082b0:	2008      	movs	r0, #8
 80082b2:	f000 fdf3 	bl	8008e9c <memp_malloc>
 80082b6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d102      	bne.n	80082c4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80082be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082c2:	e017      	b.n	80082f4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2201      	movs	r2, #1
 80082c8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80082d6:	68f9      	ldr	r1, [r7, #12]
 80082d8:	4808      	ldr	r0, [pc, #32]	; (80082fc <tcpip_try_callback+0x70>)
 80082da:	f00a fa7d 	bl	80127d8 <sys_mbox_trypost>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d006      	beq.n	80082f2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80082e4:	68f9      	ldr	r1, [r7, #12]
 80082e6:	2008      	movs	r0, #8
 80082e8:	f000 fe4e 	bl	8008f88 <memp_free>
    return ERR_MEM;
 80082ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082f0:	e000      	b.n	80082f4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	24008be8 	.word	0x24008be8
 8008300:	08013b64 	.word	0x08013b64
 8008304:	08013bdc 	.word	0x08013bdc
 8008308:	08013bb4 	.word	0x08013bb4

0800830c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af02      	add	r7, sp, #8
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008316:	f000 f92d 	bl	8008574 <lwip_init>

  tcpip_init_done = initfunc;
 800831a:	4a17      	ldr	r2, [pc, #92]	; (8008378 <tcpip_init+0x6c>)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008320:	4a16      	ldr	r2, [pc, #88]	; (800837c <tcpip_init+0x70>)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008326:	2106      	movs	r1, #6
 8008328:	4815      	ldr	r0, [pc, #84]	; (8008380 <tcpip_init+0x74>)
 800832a:	f00a fa33 	bl	8012794 <sys_mbox_new>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d006      	beq.n	8008342 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008334:	4b13      	ldr	r3, [pc, #76]	; (8008384 <tcpip_init+0x78>)
 8008336:	f240 2261 	movw	r2, #609	; 0x261
 800833a:	4913      	ldr	r1, [pc, #76]	; (8008388 <tcpip_init+0x7c>)
 800833c:	4813      	ldr	r0, [pc, #76]	; (800838c <tcpip_init+0x80>)
 800833e:	f00a fc2d 	bl	8012b9c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008342:	4813      	ldr	r0, [pc, #76]	; (8008390 <tcpip_init+0x84>)
 8008344:	f00a fac0 	bl	80128c8 <sys_mutex_new>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d006      	beq.n	800835c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800834e:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <tcpip_init+0x78>)
 8008350:	f240 2265 	movw	r2, #613	; 0x265
 8008354:	490f      	ldr	r1, [pc, #60]	; (8008394 <tcpip_init+0x88>)
 8008356:	480d      	ldr	r0, [pc, #52]	; (800838c <tcpip_init+0x80>)
 8008358:	f00a fc20 	bl	8012b9c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800835c:	2300      	movs	r3, #0
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008364:	2200      	movs	r2, #0
 8008366:	490c      	ldr	r1, [pc, #48]	; (8008398 <tcpip_init+0x8c>)
 8008368:	480c      	ldr	r0, [pc, #48]	; (800839c <tcpip_init+0x90>)
 800836a:	f00a fae5 	bl	8012938 <sys_thread_new>
}
 800836e:	bf00      	nop
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	24008be0 	.word	0x24008be0
 800837c:	24008be4 	.word	0x24008be4
 8008380:	24008be8 	.word	0x24008be8
 8008384:	08013b64 	.word	0x08013b64
 8008388:	08013bec 	.word	0x08013bec
 800838c:	08013bb4 	.word	0x08013bb4
 8008390:	24008bec 	.word	0x24008bec
 8008394:	08013c10 	.word	0x08013c10
 8008398:	080080c9 	.word	0x080080c9
 800839c:	08013c34 	.word	0x08013c34

080083a0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80083aa:	88fb      	ldrh	r3, [r7, #6]
 80083ac:	021b      	lsls	r3, r3, #8
 80083ae:	b21a      	sxth	r2, r3
 80083b0:	88fb      	ldrh	r3, [r7, #6]
 80083b2:	0a1b      	lsrs	r3, r3, #8
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	b21b      	sxth	r3, r3
 80083b8:	4313      	orrs	r3, r2
 80083ba:	b21b      	sxth	r3, r3
 80083bc:	b29b      	uxth	r3, r3
}
 80083be:	4618      	mov	r0, r3
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	061a      	lsls	r2, r3, #24
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	021b      	lsls	r3, r3, #8
 80083da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083de:	431a      	orrs	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	0a1b      	lsrs	r3, r3, #8
 80083e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80083e8:	431a      	orrs	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	0e1b      	lsrs	r3, r3, #24
 80083ee:	4313      	orrs	r3, r2
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b089      	sub	sp, #36	; 0x24
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800840e:	2300      	movs	r3, #0
 8008410:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00d      	beq.n	800843c <lwip_standard_chksum+0x40>
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	dd0a      	ble.n	800843c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8008426:	69fa      	ldr	r2, [r7, #28]
 8008428:	1c53      	adds	r3, r2, #1
 800842a:	61fb      	str	r3, [r7, #28]
 800842c:	f107 030e 	add.w	r3, r7, #14
 8008430:	3301      	adds	r3, #1
 8008432:	7812      	ldrb	r2, [r2, #0]
 8008434:	701a      	strb	r2, [r3, #0]
    len--;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	3b01      	subs	r3, #1
 800843a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8008440:	e00a      	b.n	8008458 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	1c9a      	adds	r2, r3, #2
 8008446:	61ba      	str	r2, [r7, #24]
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	4413      	add	r3, r2
 8008450:	617b      	str	r3, [r7, #20]
    len -= 2;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	3b02      	subs	r3, #2
 8008456:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	2b01      	cmp	r3, #1
 800845c:	dcf1      	bgt.n	8008442 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	dd04      	ble.n	800846e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8008464:	f107 030e 	add.w	r3, r7, #14
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	7812      	ldrb	r2, [r2, #0]
 800846c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800846e:	89fb      	ldrh	r3, [r7, #14]
 8008470:	461a      	mov	r2, r3
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	4413      	add	r3, r2
 8008476:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	0c1a      	lsrs	r2, r3, #16
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	b29b      	uxth	r3, r3
 8008480:	4413      	add	r3, r2
 8008482:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	0c1a      	lsrs	r2, r3, #16
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	b29b      	uxth	r3, r3
 800848c:	4413      	add	r3, r2
 800848e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d007      	beq.n	80084a6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	021b      	lsls	r3, r3, #8
 800849a:	b29a      	uxth	r2, r3
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	0a1b      	lsrs	r3, r3, #8
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	4313      	orrs	r3, r2
 80084a4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	b29b      	uxth	r3, r3
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3724      	adds	r7, #36	; 0x24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b082      	sub	sp, #8
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	460b      	mov	r3, r1
 80084c0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80084c2:	887b      	ldrh	r3, [r7, #2]
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7ff ff98 	bl	80083fc <lwip_standard_chksum>
 80084cc:	4603      	mov	r3, r0
 80084ce:	43db      	mvns	r3, r3
 80084d0:	b29b      	uxth	r3, r3
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b086      	sub	sp, #24
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	613b      	str	r3, [r7, #16]
 80084ee:	e02b      	b.n	8008548 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	895b      	ldrh	r3, [r3, #10]
 80084f8:	4619      	mov	r1, r3
 80084fa:	4610      	mov	r0, r2
 80084fc:	f7ff ff7e 	bl	80083fc <lwip_standard_chksum>
 8008500:	4603      	mov	r3, r0
 8008502:	461a      	mov	r2, r3
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	4413      	add	r3, r2
 8008508:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	0c1a      	lsrs	r2, r3, #16
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	b29b      	uxth	r3, r3
 8008512:	4413      	add	r3, r2
 8008514:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	895b      	ldrh	r3, [r3, #10]
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	b29b      	uxth	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00e      	beq.n	8008542 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	bf0c      	ite	eq
 800852a:	2301      	moveq	r3, #1
 800852c:	2300      	movne	r3, #0
 800852e:	b2db      	uxtb	r3, r3
 8008530:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	021b      	lsls	r3, r3, #8
 8008536:	b29a      	uxth	r2, r3
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	0a1b      	lsrs	r3, r3, #8
 800853c:	b2db      	uxtb	r3, r3
 800853e:	4313      	orrs	r3, r2
 8008540:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	613b      	str	r3, [r7, #16]
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1d0      	bne.n	80084f0 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d007      	beq.n	8008564 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	021b      	lsls	r3, r3, #8
 8008558:	b29a      	uxth	r2, r3
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	0a1b      	lsrs	r3, r3, #8
 800855e:	b2db      	uxtb	r3, r3
 8008560:	4313      	orrs	r3, r2
 8008562:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	b29b      	uxth	r3, r3
 8008568:	43db      	mvns	r3, r3
 800856a:	b29b      	uxth	r3, r3
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800857a:	2300      	movs	r3, #0
 800857c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800857e:	f00a f995 	bl	80128ac <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8008582:	f000 f8d3 	bl	800872c <mem_init>
  memp_init();
 8008586:	f000 fc1b 	bl	8008dc0 <memp_init>
  pbuf_init();
  netif_init();
 800858a:	f000 fd27 	bl	8008fdc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800858e:	f007 f91d 	bl	800f7cc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008592:	f001 fe45 	bl	800a220 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008596:	f007 f85f 	bl	800f658 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800859a:	bf00      	nop
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 80085ac:	4b04      	ldr	r3, [pc, #16]	; (80085c0 <ptr_to_mem+0x1c>)
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4413      	add	r3, r2
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	24008c08 	.word	0x24008c08

080085c4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80085cc:	4b04      	ldr	r3, [pc, #16]	; (80085e0 <mem_to_ptr+0x1c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	1ad3      	subs	r3, r2, r3
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	24008c08 	.word	0x24008c08

080085e4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80085e4:	b590      	push	{r4, r7, lr}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80085ec:	4b45      	ldr	r3, [pc, #276]	; (8008704 <plug_holes+0x120>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d206      	bcs.n	8008604 <plug_holes+0x20>
 80085f6:	4b44      	ldr	r3, [pc, #272]	; (8008708 <plug_holes+0x124>)
 80085f8:	f240 12df 	movw	r2, #479	; 0x1df
 80085fc:	4943      	ldr	r1, [pc, #268]	; (800870c <plug_holes+0x128>)
 80085fe:	4844      	ldr	r0, [pc, #272]	; (8008710 <plug_holes+0x12c>)
 8008600:	f00a facc 	bl	8012b9c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008604:	4b43      	ldr	r3, [pc, #268]	; (8008714 <plug_holes+0x130>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	429a      	cmp	r2, r3
 800860c:	d306      	bcc.n	800861c <plug_holes+0x38>
 800860e:	4b3e      	ldr	r3, [pc, #248]	; (8008708 <plug_holes+0x124>)
 8008610:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008614:	4940      	ldr	r1, [pc, #256]	; (8008718 <plug_holes+0x134>)
 8008616:	483e      	ldr	r0, [pc, #248]	; (8008710 <plug_holes+0x12c>)
 8008618:	f00a fac0 	bl	8012b9c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	7a1b      	ldrb	r3, [r3, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d006      	beq.n	8008632 <plug_holes+0x4e>
 8008624:	4b38      	ldr	r3, [pc, #224]	; (8008708 <plug_holes+0x124>)
 8008626:	f240 12e1 	movw	r2, #481	; 0x1e1
 800862a:	493c      	ldr	r1, [pc, #240]	; (800871c <plug_holes+0x138>)
 800862c:	4838      	ldr	r0, [pc, #224]	; (8008710 <plug_holes+0x12c>)
 800862e:	f00a fab5 	bl	8012b9c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a3a      	ldr	r2, [pc, #232]	; (8008720 <plug_holes+0x13c>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d906      	bls.n	800864a <plug_holes+0x66>
 800863c:	4b32      	ldr	r3, [pc, #200]	; (8008708 <plug_holes+0x124>)
 800863e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008642:	4938      	ldr	r1, [pc, #224]	; (8008724 <plug_holes+0x140>)
 8008644:	4832      	ldr	r0, [pc, #200]	; (8008710 <plug_holes+0x12c>)
 8008646:	f00a faa9 	bl	8012b9c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff ffa8 	bl	80085a4 <ptr_to_mem>
 8008654:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	429a      	cmp	r2, r3
 800865c:	d024      	beq.n	80086a8 <plug_holes+0xc4>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	7a1b      	ldrb	r3, [r3, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d120      	bne.n	80086a8 <plug_holes+0xc4>
 8008666:	4b2b      	ldr	r3, [pc, #172]	; (8008714 <plug_holes+0x130>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	429a      	cmp	r2, r3
 800866e:	d01b      	beq.n	80086a8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008670:	4b2d      	ldr	r3, [pc, #180]	; (8008728 <plug_holes+0x144>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	429a      	cmp	r2, r3
 8008678:	d102      	bne.n	8008680 <plug_holes+0x9c>
      lfree = mem;
 800867a:	4a2b      	ldr	r2, [pc, #172]	; (8008728 <plug_holes+0x144>)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a24      	ldr	r2, [pc, #144]	; (8008720 <plug_holes+0x13c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d00a      	beq.n	80086a8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff ff84 	bl	80085a4 <ptr_to_mem>
 800869c:	4604      	mov	r4, r0
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff ff90 	bl	80085c4 <mem_to_ptr>
 80086a4:	4603      	mov	r3, r0
 80086a6:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7ff ff79 	bl	80085a4 <ptr_to_mem>
 80086b2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d01f      	beq.n	80086fc <plug_holes+0x118>
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	7a1b      	ldrb	r3, [r3, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d11b      	bne.n	80086fc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80086c4:	4b18      	ldr	r3, [pc, #96]	; (8008728 <plug_holes+0x144>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d102      	bne.n	80086d4 <plug_holes+0xf0>
      lfree = pmem;
 80086ce:	4a16      	ldr	r2, [pc, #88]	; (8008728 <plug_holes+0x144>)
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a0f      	ldr	r2, [pc, #60]	; (8008720 <plug_holes+0x13c>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d00a      	beq.n	80086fc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff ff5a 	bl	80085a4 <ptr_to_mem>
 80086f0:	4604      	mov	r4, r0
 80086f2:	68b8      	ldr	r0, [r7, #8]
 80086f4:	f7ff ff66 	bl	80085c4 <mem_to_ptr>
 80086f8:	4603      	mov	r3, r0
 80086fa:	6063      	str	r3, [r4, #4]
    }
  }
}
 80086fc:	bf00      	nop
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	bd90      	pop	{r4, r7, pc}
 8008704:	24008c08 	.word	0x24008c08
 8008708:	08013c44 	.word	0x08013c44
 800870c:	08013c74 	.word	0x08013c74
 8008710:	08013c8c 	.word	0x08013c8c
 8008714:	24008c0c 	.word	0x24008c0c
 8008718:	08013cb4 	.word	0x08013cb4
 800871c:	08013cd0 	.word	0x08013cd0
 8008720:	0001ffe8 	.word	0x0001ffe8
 8008724:	08013cec 	.word	0x08013cec
 8008728:	24008c14 	.word	0x24008c14

0800872c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008732:	4b1b      	ldr	r3, [pc, #108]	; (80087a0 <mem_init+0x74>)
 8008734:	4a1b      	ldr	r2, [pc, #108]	; (80087a4 <mem_init+0x78>)
 8008736:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008738:	4b19      	ldr	r3, [pc, #100]	; (80087a0 <mem_init+0x74>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a19      	ldr	r2, [pc, #100]	; (80087a8 <mem_init+0x7c>)
 8008742:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008750:	4815      	ldr	r0, [pc, #84]	; (80087a8 <mem_init+0x7c>)
 8008752:	f7ff ff27 	bl	80085a4 <ptr_to_mem>
 8008756:	4603      	mov	r3, r0
 8008758:	4a14      	ldr	r2, [pc, #80]	; (80087ac <mem_init+0x80>)
 800875a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800875c:	4b13      	ldr	r3, [pc, #76]	; (80087ac <mem_init+0x80>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2201      	movs	r2, #1
 8008762:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008764:	4b11      	ldr	r3, [pc, #68]	; (80087ac <mem_init+0x80>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a0f      	ldr	r2, [pc, #60]	; (80087a8 <mem_init+0x7c>)
 800876a:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800876c:	4b0f      	ldr	r3, [pc, #60]	; (80087ac <mem_init+0x80>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a0d      	ldr	r2, [pc, #52]	; (80087a8 <mem_init+0x7c>)
 8008772:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008774:	4b0a      	ldr	r3, [pc, #40]	; (80087a0 <mem_init+0x74>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a0d      	ldr	r2, [pc, #52]	; (80087b0 <mem_init+0x84>)
 800877a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800877c:	480d      	ldr	r0, [pc, #52]	; (80087b4 <mem_init+0x88>)
 800877e:	f00a f8a3 	bl	80128c8 <sys_mutex_new>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d006      	beq.n	8008796 <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8008788:	4b0b      	ldr	r3, [pc, #44]	; (80087b8 <mem_init+0x8c>)
 800878a:	f240 221f 	movw	r2, #543	; 0x21f
 800878e:	490b      	ldr	r1, [pc, #44]	; (80087bc <mem_init+0x90>)
 8008790:	480b      	ldr	r0, [pc, #44]	; (80087c0 <mem_init+0x94>)
 8008792:	f00a fa03 	bl	8012b9c <iprintf>
  }
}
 8008796:	bf00      	nop
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	24008c08 	.word	0x24008c08
 80087a4:	03002000 	.word	0x03002000
 80087a8:	0001ffe8 	.word	0x0001ffe8
 80087ac:	24008c0c 	.word	0x24008c0c
 80087b0:	24008c14 	.word	0x24008c14
 80087b4:	24008c10 	.word	0x24008c10
 80087b8:	08013c44 	.word	0x08013c44
 80087bc:	08013d18 	.word	0x08013d18
 80087c0:	08013c8c 	.word	0x08013c8c

080087c4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7ff fef9 	bl	80085c4 <mem_to_ptr>
 80087d2:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff fee3 	bl	80085a4 <ptr_to_mem>
 80087de:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7ff fedd 	bl	80085a4 <ptr_to_mem>
 80087ea:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a11      	ldr	r2, [pc, #68]	; (8008838 <mem_link_valid+0x74>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d818      	bhi.n	8008828 <mem_link_valid+0x64>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	4a0f      	ldr	r2, [pc, #60]	; (8008838 <mem_link_valid+0x74>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d813      	bhi.n	8008828 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	429a      	cmp	r2, r3
 8008808:	d004      	beq.n	8008814 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	429a      	cmp	r2, r3
 8008812:	d109      	bne.n	8008828 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008814:	4b09      	ldr	r3, [pc, #36]	; (800883c <mem_link_valid+0x78>)
 8008816:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	429a      	cmp	r2, r3
 800881c:	d006      	beq.n	800882c <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	429a      	cmp	r2, r3
 8008826:	d001      	beq.n	800882c <mem_link_valid+0x68>
    return 0;
 8008828:	2300      	movs	r3, #0
 800882a:	e000      	b.n	800882e <mem_link_valid+0x6a>
  }
  return 1;
 800882c:	2301      	movs	r3, #1
}
 800882e:	4618      	mov	r0, r3
 8008830:	3718      	adds	r7, #24
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	0001ffe8 	.word	0x0001ffe8
 800883c:	24008c0c 	.word	0x24008c0c

08008840 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b088      	sub	sp, #32
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d070      	beq.n	8008930 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f003 0303 	and.w	r3, r3, #3
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00d      	beq.n	8008874 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008858:	4b37      	ldr	r3, [pc, #220]	; (8008938 <mem_free+0xf8>)
 800885a:	f240 2273 	movw	r2, #627	; 0x273
 800885e:	4937      	ldr	r1, [pc, #220]	; (800893c <mem_free+0xfc>)
 8008860:	4837      	ldr	r0, [pc, #220]	; (8008940 <mem_free+0x100>)
 8008862:	f00a f99b 	bl	8012b9c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008866:	f00a f88d 	bl	8012984 <sys_arch_protect>
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f00a f897 	bl	80129a0 <sys_arch_unprotect>
    return;
 8008872:	e05e      	b.n	8008932 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	3b0c      	subs	r3, #12
 8008878:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800887a:	4b32      	ldr	r3, [pc, #200]	; (8008944 <mem_free+0x104>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69fa      	ldr	r2, [r7, #28]
 8008880:	429a      	cmp	r2, r3
 8008882:	d306      	bcc.n	8008892 <mem_free+0x52>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f103 020c 	add.w	r2, r3, #12
 800888a:	4b2f      	ldr	r3, [pc, #188]	; (8008948 <mem_free+0x108>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	429a      	cmp	r2, r3
 8008890:	d90d      	bls.n	80088ae <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008892:	4b29      	ldr	r3, [pc, #164]	; (8008938 <mem_free+0xf8>)
 8008894:	f240 227f 	movw	r2, #639	; 0x27f
 8008898:	492c      	ldr	r1, [pc, #176]	; (800894c <mem_free+0x10c>)
 800889a:	4829      	ldr	r0, [pc, #164]	; (8008940 <mem_free+0x100>)
 800889c:	f00a f97e 	bl	8012b9c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80088a0:	f00a f870 	bl	8012984 <sys_arch_protect>
 80088a4:	6138      	str	r0, [r7, #16]
 80088a6:	6938      	ldr	r0, [r7, #16]
 80088a8:	f00a f87a 	bl	80129a0 <sys_arch_unprotect>
    return;
 80088ac:	e041      	b.n	8008932 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80088ae:	4828      	ldr	r0, [pc, #160]	; (8008950 <mem_free+0x110>)
 80088b0:	f00a f826 	bl	8012900 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	7a1b      	ldrb	r3, [r3, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d110      	bne.n	80088de <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80088bc:	4b1e      	ldr	r3, [pc, #120]	; (8008938 <mem_free+0xf8>)
 80088be:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80088c2:	4924      	ldr	r1, [pc, #144]	; (8008954 <mem_free+0x114>)
 80088c4:	481e      	ldr	r0, [pc, #120]	; (8008940 <mem_free+0x100>)
 80088c6:	f00a f969 	bl	8012b9c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80088ca:	4821      	ldr	r0, [pc, #132]	; (8008950 <mem_free+0x110>)
 80088cc:	f00a f827 	bl	801291e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80088d0:	f00a f858 	bl	8012984 <sys_arch_protect>
 80088d4:	6178      	str	r0, [r7, #20]
 80088d6:	6978      	ldr	r0, [r7, #20]
 80088d8:	f00a f862 	bl	80129a0 <sys_arch_unprotect>
    return;
 80088dc:	e029      	b.n	8008932 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80088de:	69f8      	ldr	r0, [r7, #28]
 80088e0:	f7ff ff70 	bl	80087c4 <mem_link_valid>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d110      	bne.n	800890c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80088ea:	4b13      	ldr	r3, [pc, #76]	; (8008938 <mem_free+0xf8>)
 80088ec:	f240 2295 	movw	r2, #661	; 0x295
 80088f0:	4919      	ldr	r1, [pc, #100]	; (8008958 <mem_free+0x118>)
 80088f2:	4813      	ldr	r0, [pc, #76]	; (8008940 <mem_free+0x100>)
 80088f4:	f00a f952 	bl	8012b9c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80088f8:	4815      	ldr	r0, [pc, #84]	; (8008950 <mem_free+0x110>)
 80088fa:	f00a f810 	bl	801291e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80088fe:	f00a f841 	bl	8012984 <sys_arch_protect>
 8008902:	61b8      	str	r0, [r7, #24]
 8008904:	69b8      	ldr	r0, [r7, #24]
 8008906:	f00a f84b 	bl	80129a0 <sys_arch_unprotect>
    return;
 800890a:	e012      	b.n	8008932 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	2200      	movs	r2, #0
 8008910:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 8008912:	4b12      	ldr	r3, [pc, #72]	; (800895c <mem_free+0x11c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	69fa      	ldr	r2, [r7, #28]
 8008918:	429a      	cmp	r2, r3
 800891a:	d202      	bcs.n	8008922 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800891c:	4a0f      	ldr	r2, [pc, #60]	; (800895c <mem_free+0x11c>)
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008922:	69f8      	ldr	r0, [r7, #28]
 8008924:	f7ff fe5e 	bl	80085e4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008928:	4809      	ldr	r0, [pc, #36]	; (8008950 <mem_free+0x110>)
 800892a:	f009 fff8 	bl	801291e <sys_mutex_unlock>
 800892e:	e000      	b.n	8008932 <mem_free+0xf2>
    return;
 8008930:	bf00      	nop
}
 8008932:	3720      	adds	r7, #32
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	08013c44 	.word	0x08013c44
 800893c:	08013d34 	.word	0x08013d34
 8008940:	08013c8c 	.word	0x08013c8c
 8008944:	24008c08 	.word	0x24008c08
 8008948:	24008c0c 	.word	0x24008c0c
 800894c:	08013d58 	.word	0x08013d58
 8008950:	24008c10 	.word	0x24008c10
 8008954:	08013d74 	.word	0x08013d74
 8008958:	08013d9c 	.word	0x08013d9c
 800895c:	24008c14 	.word	0x24008c14

08008960 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b08a      	sub	sp, #40	; 0x28
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	3303      	adds	r3, #3
 800896e:	f023 0303 	bic.w	r3, r3, #3
 8008972:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	2b0b      	cmp	r3, #11
 8008978:	d801      	bhi.n	800897e <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800897a:	230c      	movs	r3, #12
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	4a6e      	ldr	r2, [pc, #440]	; (8008b3c <mem_trim+0x1dc>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d803      	bhi.n	800898e <mem_trim+0x2e>
 8008986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	429a      	cmp	r2, r3
 800898c:	d201      	bcs.n	8008992 <mem_trim+0x32>
    return NULL;
 800898e:	2300      	movs	r3, #0
 8008990:	e0d0      	b.n	8008b34 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008992:	4b6b      	ldr	r3, [pc, #428]	; (8008b40 <mem_trim+0x1e0>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	429a      	cmp	r2, r3
 800899a:	d304      	bcc.n	80089a6 <mem_trim+0x46>
 800899c:	4b69      	ldr	r3, [pc, #420]	; (8008b44 <mem_trim+0x1e4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d306      	bcc.n	80089b4 <mem_trim+0x54>
 80089a6:	4b68      	ldr	r3, [pc, #416]	; (8008b48 <mem_trim+0x1e8>)
 80089a8:	f240 22d1 	movw	r2, #721	; 0x2d1
 80089ac:	4967      	ldr	r1, [pc, #412]	; (8008b4c <mem_trim+0x1ec>)
 80089ae:	4868      	ldr	r0, [pc, #416]	; (8008b50 <mem_trim+0x1f0>)
 80089b0:	f00a f8f4 	bl	8012b9c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80089b4:	4b62      	ldr	r3, [pc, #392]	; (8008b40 <mem_trim+0x1e0>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d304      	bcc.n	80089c8 <mem_trim+0x68>
 80089be:	4b61      	ldr	r3, [pc, #388]	; (8008b44 <mem_trim+0x1e4>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d307      	bcc.n	80089d8 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80089c8:	f009 ffdc 	bl	8012984 <sys_arch_protect>
 80089cc:	60b8      	str	r0, [r7, #8]
 80089ce:	68b8      	ldr	r0, [r7, #8]
 80089d0:	f009 ffe6 	bl	80129a0 <sys_arch_unprotect>
    return rmem;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	e0ad      	b.n	8008b34 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3b0c      	subs	r3, #12
 80089dc:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80089de:	6a38      	ldr	r0, [r7, #32]
 80089e0:	f7ff fdf0 	bl	80085c4 <mem_to_ptr>
 80089e4:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80089e6:	6a3b      	ldr	r3, [r7, #32]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	3b0c      	subs	r3, #12
 80089f0:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80089f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d906      	bls.n	8008a08 <mem_trim+0xa8>
 80089fa:	4b53      	ldr	r3, [pc, #332]	; (8008b48 <mem_trim+0x1e8>)
 80089fc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008a00:	4954      	ldr	r1, [pc, #336]	; (8008b54 <mem_trim+0x1f4>)
 8008a02:	4853      	ldr	r0, [pc, #332]	; (8008b50 <mem_trim+0x1f0>)
 8008a04:	f00a f8ca 	bl	8012b9c <iprintf>
  if (newsize > size) {
 8008a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d901      	bls.n	8008a14 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 8008a10:	2300      	movs	r3, #0
 8008a12:	e08f      	b.n	8008b34 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 8008a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d101      	bne.n	8008a20 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	e089      	b.n	8008b34 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8008a20:	484d      	ldr	r0, [pc, #308]	; (8008b58 <mem_trim+0x1f8>)
 8008a22:	f009 ff6d 	bl	8012900 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7ff fdba 	bl	80085a4 <ptr_to_mem>
 8008a30:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	7a1b      	ldrb	r3, [r3, #8]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d13c      	bne.n	8008ab4 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a3f      	ldr	r2, [pc, #252]	; (8008b3c <mem_trim+0x1dc>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d106      	bne.n	8008a52 <mem_trim+0xf2>
 8008a44:	4b40      	ldr	r3, [pc, #256]	; (8008b48 <mem_trim+0x1e8>)
 8008a46:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008a4a:	4944      	ldr	r1, [pc, #272]	; (8008b5c <mem_trim+0x1fc>)
 8008a4c:	4840      	ldr	r0, [pc, #256]	; (8008b50 <mem_trim+0x1f0>)
 8008a4e:	f00a f8a5 	bl	8012b9c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008a58:	69fa      	ldr	r2, [r7, #28]
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5c:	4413      	add	r3, r2
 8008a5e:	330c      	adds	r3, #12
 8008a60:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 8008a62:	4b3f      	ldr	r3, [pc, #252]	; (8008b60 <mem_trim+0x200>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d105      	bne.n	8008a78 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 8008a6c:	6938      	ldr	r0, [r7, #16]
 8008a6e:	f7ff fd99 	bl	80085a4 <ptr_to_mem>
 8008a72:	4603      	mov	r3, r0
 8008a74:	4a3a      	ldr	r2, [pc, #232]	; (8008b60 <mem_trim+0x200>)
 8008a76:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008a78:	6938      	ldr	r0, [r7, #16]
 8008a7a:	f7ff fd93 	bl	80085a4 <ptr_to_mem>
 8008a7e:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	2200      	movs	r2, #0
 8008a84:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	69fa      	ldr	r2, [r7, #28]
 8008a90:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a27      	ldr	r2, [pc, #156]	; (8008b3c <mem_trim+0x1dc>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d044      	beq.n	8008b2c <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7ff fd7c 	bl	80085a4 <ptr_to_mem>
 8008aac:	4602      	mov	r2, r0
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	6053      	str	r3, [r2, #4]
 8008ab2:	e03b      	b.n	8008b2c <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	3318      	adds	r3, #24
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d336      	bcc.n	8008b2c <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008abe:	69fa      	ldr	r2, [r7, #28]
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	4413      	add	r3, r2
 8008ac4:	330c      	adds	r3, #12
 8008ac6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a1b      	ldr	r2, [pc, #108]	; (8008b3c <mem_trim+0x1dc>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d106      	bne.n	8008ae0 <mem_trim+0x180>
 8008ad2:	4b1d      	ldr	r3, [pc, #116]	; (8008b48 <mem_trim+0x1e8>)
 8008ad4:	f240 3216 	movw	r2, #790	; 0x316
 8008ad8:	4920      	ldr	r1, [pc, #128]	; (8008b5c <mem_trim+0x1fc>)
 8008ada:	481d      	ldr	r0, [pc, #116]	; (8008b50 <mem_trim+0x1f0>)
 8008adc:	f00a f85e 	bl	8012b9c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008ae0:	6938      	ldr	r0, [r7, #16]
 8008ae2:	f7ff fd5f 	bl	80085a4 <ptr_to_mem>
 8008ae6:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 8008ae8:	4b1d      	ldr	r3, [pc, #116]	; (8008b60 <mem_trim+0x200>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d202      	bcs.n	8008af8 <mem_trim+0x198>
      lfree = mem2;
 8008af2:	4a1b      	ldr	r2, [pc, #108]	; (8008b60 <mem_trim+0x200>)
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2200      	movs	r2, #0
 8008afc:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	69fa      	ldr	r2, [r7, #28]
 8008b0a:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a09      	ldr	r2, [pc, #36]	; (8008b3c <mem_trim+0x1dc>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d007      	beq.n	8008b2c <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7ff fd3f 	bl	80085a4 <ptr_to_mem>
 8008b26:	4602      	mov	r2, r0
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008b2c:	480a      	ldr	r0, [pc, #40]	; (8008b58 <mem_trim+0x1f8>)
 8008b2e:	f009 fef6 	bl	801291e <sys_mutex_unlock>
  return rmem;
 8008b32:	687b      	ldr	r3, [r7, #4]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3728      	adds	r7, #40	; 0x28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	0001ffe8 	.word	0x0001ffe8
 8008b40:	24008c08 	.word	0x24008c08
 8008b44:	24008c0c 	.word	0x24008c0c
 8008b48:	08013c44 	.word	0x08013c44
 8008b4c:	08013dd0 	.word	0x08013dd0
 8008b50:	08013c8c 	.word	0x08013c8c
 8008b54:	08013de8 	.word	0x08013de8
 8008b58:	24008c10 	.word	0x24008c10
 8008b5c:	08013e08 	.word	0x08013e08
 8008b60:	24008c14 	.word	0x24008c14

08008b64 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b088      	sub	sp, #32
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <mem_malloc+0x12>
    return NULL;
 8008b72:	2300      	movs	r3, #0
 8008b74:	e0d9      	b.n	8008d2a <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	3303      	adds	r3, #3
 8008b7a:	f023 0303 	bic.w	r3, r3, #3
 8008b7e:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	2b0b      	cmp	r3, #11
 8008b84:	d801      	bhi.n	8008b8a <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008b86:	230c      	movs	r3, #12
 8008b88:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	4a69      	ldr	r2, [pc, #420]	; (8008d34 <mem_malloc+0x1d0>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d803      	bhi.n	8008b9a <mem_malloc+0x36>
 8008b92:	69ba      	ldr	r2, [r7, #24]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d201      	bcs.n	8008b9e <mem_malloc+0x3a>
    return NULL;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	e0c5      	b.n	8008d2a <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8008b9e:	4866      	ldr	r0, [pc, #408]	; (8008d38 <mem_malloc+0x1d4>)
 8008ba0:	f009 feae 	bl	8012900 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008ba4:	4b65      	ldr	r3, [pc, #404]	; (8008d3c <mem_malloc+0x1d8>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7ff fd0b 	bl	80085c4 <mem_to_ptr>
 8008bae:	61f8      	str	r0, [r7, #28]
 8008bb0:	e0b0      	b.n	8008d14 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008bb2:	69f8      	ldr	r0, [r7, #28]
 8008bb4:	f7ff fcf6 	bl	80085a4 <ptr_to_mem>
 8008bb8:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	7a1b      	ldrb	r3, [r3, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f040 80a2 	bne.w	8008d08 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	f200 8099 	bhi.w	8008d08 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	f1a3 020c 	sub.w	r2, r3, #12
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	3318      	adds	r3, #24
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d331      	bcc.n	8008c4e <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008bea:	69fa      	ldr	r2, [r7, #28]
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	4413      	add	r3, r2
 8008bf0:	330c      	adds	r3, #12
 8008bf2:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4a4f      	ldr	r2, [pc, #316]	; (8008d34 <mem_malloc+0x1d0>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d106      	bne.n	8008c0a <mem_malloc+0xa6>
 8008bfc:	4b50      	ldr	r3, [pc, #320]	; (8008d40 <mem_malloc+0x1dc>)
 8008bfe:	f240 3287 	movw	r2, #903	; 0x387
 8008c02:	4950      	ldr	r1, [pc, #320]	; (8008d44 <mem_malloc+0x1e0>)
 8008c04:	4850      	ldr	r0, [pc, #320]	; (8008d48 <mem_malloc+0x1e4>)
 8008c06:	f009 ffc9 	bl	8012b9c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f7ff fcca 	bl	80085a4 <ptr_to_mem>
 8008c10:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2200      	movs	r2, #0
 8008c16:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	69fa      	ldr	r2, [r7, #28]
 8008c24:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a3f      	ldr	r2, [pc, #252]	; (8008d34 <mem_malloc+0x1d0>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d00b      	beq.n	8008c54 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7ff fcaf 	bl	80085a4 <ptr_to_mem>
 8008c46:	4602      	mov	r2, r0
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6053      	str	r3, [r2, #4]
 8008c4c:	e002      	b.n	8008c54 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	2201      	movs	r2, #1
 8008c52:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008c54:	4b39      	ldr	r3, [pc, #228]	; (8008d3c <mem_malloc+0x1d8>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d127      	bne.n	8008cae <mem_malloc+0x14a>
          struct mem *cur = lfree;
 8008c5e:	4b37      	ldr	r3, [pc, #220]	; (8008d3c <mem_malloc+0x1d8>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008c64:	e005      	b.n	8008c72 <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7ff fc9a 	bl	80085a4 <ptr_to_mem>
 8008c70:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	7a1b      	ldrb	r3, [r3, #8]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d004      	beq.n	8008c84 <mem_malloc+0x120>
 8008c7a:	4b34      	ldr	r3, [pc, #208]	; (8008d4c <mem_malloc+0x1e8>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d1f0      	bne.n	8008c66 <mem_malloc+0x102>
          }
          lfree = cur;
 8008c84:	4a2d      	ldr	r2, [pc, #180]	; (8008d3c <mem_malloc+0x1d8>)
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008c8a:	4b2c      	ldr	r3, [pc, #176]	; (8008d3c <mem_malloc+0x1d8>)
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	4b2f      	ldr	r3, [pc, #188]	; (8008d4c <mem_malloc+0x1e8>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d00b      	beq.n	8008cae <mem_malloc+0x14a>
 8008c96:	4b29      	ldr	r3, [pc, #164]	; (8008d3c <mem_malloc+0x1d8>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	7a1b      	ldrb	r3, [r3, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d006      	beq.n	8008cae <mem_malloc+0x14a>
 8008ca0:	4b27      	ldr	r3, [pc, #156]	; (8008d40 <mem_malloc+0x1dc>)
 8008ca2:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008ca6:	492a      	ldr	r1, [pc, #168]	; (8008d50 <mem_malloc+0x1ec>)
 8008ca8:	4827      	ldr	r0, [pc, #156]	; (8008d48 <mem_malloc+0x1e4>)
 8008caa:	f009 ff77 	bl	8012b9c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8008cae:	4822      	ldr	r0, [pc, #136]	; (8008d38 <mem_malloc+0x1d4>)
 8008cb0:	f009 fe35 	bl	801291e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	4413      	add	r3, r2
 8008cba:	330c      	adds	r3, #12
 8008cbc:	4a23      	ldr	r2, [pc, #140]	; (8008d4c <mem_malloc+0x1e8>)
 8008cbe:	6812      	ldr	r2, [r2, #0]
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d906      	bls.n	8008cd2 <mem_malloc+0x16e>
 8008cc4:	4b1e      	ldr	r3, [pc, #120]	; (8008d40 <mem_malloc+0x1dc>)
 8008cc6:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008cca:	4922      	ldr	r1, [pc, #136]	; (8008d54 <mem_malloc+0x1f0>)
 8008ccc:	481e      	ldr	r0, [pc, #120]	; (8008d48 <mem_malloc+0x1e4>)
 8008cce:	f009 ff65 	bl	8012b9c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f003 0303 	and.w	r3, r3, #3
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d006      	beq.n	8008cea <mem_malloc+0x186>
 8008cdc:	4b18      	ldr	r3, [pc, #96]	; (8008d40 <mem_malloc+0x1dc>)
 8008cde:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008ce2:	491d      	ldr	r1, [pc, #116]	; (8008d58 <mem_malloc+0x1f4>)
 8008ce4:	4818      	ldr	r0, [pc, #96]	; (8008d48 <mem_malloc+0x1e4>)
 8008ce6:	f009 ff59 	bl	8012b9c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	f003 0303 	and.w	r3, r3, #3
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d006      	beq.n	8008d02 <mem_malloc+0x19e>
 8008cf4:	4b12      	ldr	r3, [pc, #72]	; (8008d40 <mem_malloc+0x1dc>)
 8008cf6:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008cfa:	4918      	ldr	r1, [pc, #96]	; (8008d5c <mem_malloc+0x1f8>)
 8008cfc:	4812      	ldr	r0, [pc, #72]	; (8008d48 <mem_malloc+0x1e4>)
 8008cfe:	f009 ff4d 	bl	8012b9c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	330c      	adds	r3, #12
 8008d06:	e010      	b.n	8008d2a <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 8008d08:	69f8      	ldr	r0, [r7, #28]
 8008d0a:	f7ff fc4b 	bl	80085a4 <ptr_to_mem>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008d14:	69ba      	ldr	r2, [r7, #24]
 8008d16:	4b07      	ldr	r3, [pc, #28]	; (8008d34 <mem_malloc+0x1d0>)
 8008d18:	1a9b      	subs	r3, r3, r2
 8008d1a:	69fa      	ldr	r2, [r7, #28]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	f4ff af48 	bcc.w	8008bb2 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8008d22:	4805      	ldr	r0, [pc, #20]	; (8008d38 <mem_malloc+0x1d4>)
 8008d24:	f009 fdfb 	bl	801291e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3720      	adds	r7, #32
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	0001ffe8 	.word	0x0001ffe8
 8008d38:	24008c10 	.word	0x24008c10
 8008d3c:	24008c14 	.word	0x24008c14
 8008d40:	08013c44 	.word	0x08013c44
 8008d44:	08013e08 	.word	0x08013e08
 8008d48:	08013c8c 	.word	0x08013c8c
 8008d4c:	24008c0c 	.word	0x24008c0c
 8008d50:	08013e1c 	.word	0x08013e1c
 8008d54:	08013e38 	.word	0x08013e38
 8008d58:	08013e68 	.word	0x08013e68
 8008d5c:	08013e98 	.word	0x08013e98

08008d60 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	3303      	adds	r3, #3
 8008d76:	f023 0303 	bic.w	r3, r3, #3
 8008d7a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	e011      	b.n	8008da6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3301      	adds	r3, #1
 8008da4:	60fb      	str	r3, [r7, #12]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	885b      	ldrh	r3, [r3, #2]
 8008daa:	461a      	mov	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	4293      	cmp	r3, r2
 8008db0:	dbe7      	blt.n	8008d82 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008db2:	bf00      	nop
 8008db4:	bf00      	nop
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	80fb      	strh	r3, [r7, #6]
 8008dca:	e009      	b.n	8008de0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008dcc:	88fb      	ldrh	r3, [r7, #6]
 8008dce:	4a08      	ldr	r2, [pc, #32]	; (8008df0 <memp_init+0x30>)
 8008dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7ff ffc3 	bl	8008d60 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008dda:	88fb      	ldrh	r3, [r7, #6]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	80fb      	strh	r3, [r7, #6]
 8008de0:	88fb      	ldrh	r3, [r7, #6]
 8008de2:	2b0c      	cmp	r3, #12
 8008de4:	d9f2      	bls.n	8008dcc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008de6:	bf00      	nop
 8008de8:	bf00      	nop
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	080166a4 	.word	0x080166a4

08008df4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008dfc:	f009 fdc2 	bl	8012984 <sys_arch_protect>
 8008e00:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d015      	beq.n	8008e3c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	6812      	ldr	r2, [r2, #0]
 8008e18:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	f003 0303 	and.w	r3, r3, #3
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d006      	beq.n	8008e32 <do_memp_malloc_pool+0x3e>
 8008e24:	4b09      	ldr	r3, [pc, #36]	; (8008e4c <do_memp_malloc_pool+0x58>)
 8008e26:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008e2a:	4909      	ldr	r1, [pc, #36]	; (8008e50 <do_memp_malloc_pool+0x5c>)
 8008e2c:	4809      	ldr	r0, [pc, #36]	; (8008e54 <do_memp_malloc_pool+0x60>)
 8008e2e:	f009 feb5 	bl	8012b9c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f009 fdb4 	bl	80129a0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	e003      	b.n	8008e44 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f009 fdaf 	bl	80129a0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	08013ebc 	.word	0x08013ebc
 8008e50:	08013eec 	.word	0x08013eec
 8008e54:	08013f10 	.word	0x08013f10

08008e58 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d106      	bne.n	8008e74 <memp_malloc_pool+0x1c>
 8008e66:	4b0a      	ldr	r3, [pc, #40]	; (8008e90 <memp_malloc_pool+0x38>)
 8008e68:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8008e6c:	4909      	ldr	r1, [pc, #36]	; (8008e94 <memp_malloc_pool+0x3c>)
 8008e6e:	480a      	ldr	r0, [pc, #40]	; (8008e98 <memp_malloc_pool+0x40>)
 8008e70:	f009 fe94 	bl	8012b9c <iprintf>
  if (desc == NULL) {
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d101      	bne.n	8008e7e <memp_malloc_pool+0x26>
    return NULL;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	e003      	b.n	8008e86 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7ff ffb8 	bl	8008df4 <do_memp_malloc_pool>
 8008e84:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	08013ebc 	.word	0x08013ebc
 8008e94:	08013f38 	.word	0x08013f38
 8008e98:	08013f10 	.word	0x08013f10

08008e9c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008ea6:	79fb      	ldrb	r3, [r7, #7]
 8008ea8:	2b0c      	cmp	r3, #12
 8008eaa:	d908      	bls.n	8008ebe <memp_malloc+0x22>
 8008eac:	4b0a      	ldr	r3, [pc, #40]	; (8008ed8 <memp_malloc+0x3c>)
 8008eae:	f240 1257 	movw	r2, #343	; 0x157
 8008eb2:	490a      	ldr	r1, [pc, #40]	; (8008edc <memp_malloc+0x40>)
 8008eb4:	480a      	ldr	r0, [pc, #40]	; (8008ee0 <memp_malloc+0x44>)
 8008eb6:	f009 fe71 	bl	8012b9c <iprintf>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e008      	b.n	8008ed0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008ebe:	79fb      	ldrb	r3, [r7, #7]
 8008ec0:	4a08      	ldr	r2, [pc, #32]	; (8008ee4 <memp_malloc+0x48>)
 8008ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7ff ff94 	bl	8008df4 <do_memp_malloc_pool>
 8008ecc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008ece:	68fb      	ldr	r3, [r7, #12]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	08013ebc 	.word	0x08013ebc
 8008edc:	08013f4c 	.word	0x08013f4c
 8008ee0:	08013f10 	.word	0x08013f10
 8008ee4:	080166a4 	.word	0x080166a4

08008ee8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	f003 0303 	and.w	r3, r3, #3
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d006      	beq.n	8008f0a <do_memp_free_pool+0x22>
 8008efc:	4b0d      	ldr	r3, [pc, #52]	; (8008f34 <do_memp_free_pool+0x4c>)
 8008efe:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008f02:	490d      	ldr	r1, [pc, #52]	; (8008f38 <do_memp_free_pool+0x50>)
 8008f04:	480d      	ldr	r0, [pc, #52]	; (8008f3c <do_memp_free_pool+0x54>)
 8008f06:	f009 fe49 	bl	8012b9c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8008f0e:	f009 fd39 	bl	8012984 <sys_arch_protect>
 8008f12:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8008f26:	68b8      	ldr	r0, [r7, #8]
 8008f28:	f009 fd3a 	bl	80129a0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8008f2c:	bf00      	nop
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	08013ebc 	.word	0x08013ebc
 8008f38:	08013f6c 	.word	0x08013f6c
 8008f3c:	08013f10 	.word	0x08013f10

08008f40 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d106      	bne.n	8008f5e <memp_free_pool+0x1e>
 8008f50:	4b0a      	ldr	r3, [pc, #40]	; (8008f7c <memp_free_pool+0x3c>)
 8008f52:	f240 1295 	movw	r2, #405	; 0x195
 8008f56:	490a      	ldr	r1, [pc, #40]	; (8008f80 <memp_free_pool+0x40>)
 8008f58:	480a      	ldr	r0, [pc, #40]	; (8008f84 <memp_free_pool+0x44>)
 8008f5a:	f009 fe1f 	bl	8012b9c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d007      	beq.n	8008f74 <memp_free_pool+0x34>
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d004      	beq.n	8008f74 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7ff ffbb 	bl	8008ee8 <do_memp_free_pool>
 8008f72:	e000      	b.n	8008f76 <memp_free_pool+0x36>
    return;
 8008f74:	bf00      	nop
}
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	08013ebc 	.word	0x08013ebc
 8008f80:	08013f38 	.word	0x08013f38
 8008f84:	08013f10 	.word	0x08013f10

08008f88 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	6039      	str	r1, [r7, #0]
 8008f92:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008f94:	79fb      	ldrb	r3, [r7, #7]
 8008f96:	2b0c      	cmp	r3, #12
 8008f98:	d907      	bls.n	8008faa <memp_free+0x22>
 8008f9a:	4b0c      	ldr	r3, [pc, #48]	; (8008fcc <memp_free+0x44>)
 8008f9c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008fa0:	490b      	ldr	r1, [pc, #44]	; (8008fd0 <memp_free+0x48>)
 8008fa2:	480c      	ldr	r0, [pc, #48]	; (8008fd4 <memp_free+0x4c>)
 8008fa4:	f009 fdfa 	bl	8012b9c <iprintf>
 8008fa8:	e00c      	b.n	8008fc4 <memp_free+0x3c>

  if (mem == NULL) {
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d008      	beq.n	8008fc2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008fb0:	79fb      	ldrb	r3, [r7, #7]
 8008fb2:	4a09      	ldr	r2, [pc, #36]	; (8008fd8 <memp_free+0x50>)
 8008fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7ff ff94 	bl	8008ee8 <do_memp_free_pool>
 8008fc0:	e000      	b.n	8008fc4 <memp_free+0x3c>
    return;
 8008fc2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	08013ebc 	.word	0x08013ebc
 8008fd0:	08013f8c 	.word	0x08013f8c
 8008fd4:	08013f10 	.word	0x08013f10
 8008fd8:	080166a4 	.word	0x080166a4

08008fdc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008fe0:	bf00      	nop
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
	...

08008fec <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b086      	sub	sp, #24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
 8008ff8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d108      	bne.n	8009012 <netif_add+0x26>
 8009000:	4b57      	ldr	r3, [pc, #348]	; (8009160 <netif_add+0x174>)
 8009002:	f240 1227 	movw	r2, #295	; 0x127
 8009006:	4957      	ldr	r1, [pc, #348]	; (8009164 <netif_add+0x178>)
 8009008:	4857      	ldr	r0, [pc, #348]	; (8009168 <netif_add+0x17c>)
 800900a:	f009 fdc7 	bl	8012b9c <iprintf>
 800900e:	2300      	movs	r3, #0
 8009010:	e0a2      	b.n	8009158 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	2b00      	cmp	r3, #0
 8009016:	d108      	bne.n	800902a <netif_add+0x3e>
 8009018:	4b51      	ldr	r3, [pc, #324]	; (8009160 <netif_add+0x174>)
 800901a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800901e:	4953      	ldr	r1, [pc, #332]	; (800916c <netif_add+0x180>)
 8009020:	4851      	ldr	r0, [pc, #324]	; (8009168 <netif_add+0x17c>)
 8009022:	f009 fdbb 	bl	8012b9c <iprintf>
 8009026:	2300      	movs	r3, #0
 8009028:	e096      	b.n	8009158 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009030:	4b4f      	ldr	r3, [pc, #316]	; (8009170 <netif_add+0x184>)
 8009032:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d101      	bne.n	800903e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800903a:	4b4d      	ldr	r3, [pc, #308]	; (8009170 <netif_add+0x184>)
 800903c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009044:	4b4a      	ldr	r3, [pc, #296]	; (8009170 <netif_add+0x184>)
 8009046:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	4a45      	ldr	r2, [pc, #276]	; (8009174 <netif_add+0x188>)
 800905e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6a3a      	ldr	r2, [r7, #32]
 8009078:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800907a:	4b3f      	ldr	r3, [pc, #252]	; (8009178 <netif_add+0x18c>)
 800907c:	781a      	ldrb	r2, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009088:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	68b9      	ldr	r1, [r7, #8]
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 f913 	bl	80092bc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	4798      	blx	r3
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <netif_add+0xba>
    return NULL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	e058      	b.n	8009158 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090ac:	2bff      	cmp	r3, #255	; 0xff
 80090ae:	d103      	bne.n	80090b8 <netif_add+0xcc>
        netif->num = 0;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80090bc:	4b2f      	ldr	r3, [pc, #188]	; (800917c <netif_add+0x190>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	617b      	str	r3, [r7, #20]
 80090c2:	e02b      	b.n	800911c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d106      	bne.n	80090da <netif_add+0xee>
 80090cc:	4b24      	ldr	r3, [pc, #144]	; (8009160 <netif_add+0x174>)
 80090ce:	f240 128b 	movw	r2, #395	; 0x18b
 80090d2:	492b      	ldr	r1, [pc, #172]	; (8009180 <netif_add+0x194>)
 80090d4:	4824      	ldr	r0, [pc, #144]	; (8009168 <netif_add+0x17c>)
 80090d6:	f009 fd61 	bl	8012b9c <iprintf>
        num_netifs++;
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	3301      	adds	r3, #1
 80090de:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	2bff      	cmp	r3, #255	; 0xff
 80090e4:	dd06      	ble.n	80090f4 <netif_add+0x108>
 80090e6:	4b1e      	ldr	r3, [pc, #120]	; (8009160 <netif_add+0x174>)
 80090e8:	f240 128d 	movw	r2, #397	; 0x18d
 80090ec:	4925      	ldr	r1, [pc, #148]	; (8009184 <netif_add+0x198>)
 80090ee:	481e      	ldr	r0, [pc, #120]	; (8009168 <netif_add+0x17c>)
 80090f0:	f009 fd54 	bl	8012b9c <iprintf>
        if (netif2->num == netif->num) {
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009100:	429a      	cmp	r2, r3
 8009102:	d108      	bne.n	8009116 <netif_add+0x12a>
          netif->num++;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800910a:	3301      	adds	r3, #1
 800910c:	b2da      	uxtb	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009114:	e005      	b.n	8009122 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	617b      	str	r3, [r7, #20]
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1d0      	bne.n	80090c4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1be      	bne.n	80090a6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800912e:	2bfe      	cmp	r3, #254	; 0xfe
 8009130:	d103      	bne.n	800913a <netif_add+0x14e>
    netif_num = 0;
 8009132:	4b11      	ldr	r3, [pc, #68]	; (8009178 <netif_add+0x18c>)
 8009134:	2200      	movs	r2, #0
 8009136:	701a      	strb	r2, [r3, #0]
 8009138:	e006      	b.n	8009148 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009140:	3301      	adds	r3, #1
 8009142:	b2da      	uxtb	r2, r3
 8009144:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <netif_add+0x18c>)
 8009146:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009148:	4b0c      	ldr	r3, [pc, #48]	; (800917c <netif_add+0x190>)
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009150:	4a0a      	ldr	r2, [pc, #40]	; (800917c <netif_add+0x190>)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009156:	68fb      	ldr	r3, [r7, #12]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	08013fa8 	.word	0x08013fa8
 8009164:	0801403c 	.word	0x0801403c
 8009168:	08013ff8 	.word	0x08013ff8
 800916c:	08014058 	.word	0x08014058
 8009170:	08016718 	.word	0x08016718
 8009174:	08009597 	.word	0x08009597
 8009178:	2400bcec 	.word	0x2400bcec
 800917c:	2400bce4 	.word	0x2400bce4
 8009180:	0801407c 	.word	0x0801407c
 8009184:	08014090 	.word	0x08014090

08009188 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f002 fb8b 	bl	800b8b0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f006 ffd3 	bl	8010148 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80091a2:	bf00      	nop
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
	...

080091ac <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d106      	bne.n	80091cc <netif_do_set_ipaddr+0x20>
 80091be:	4b1d      	ldr	r3, [pc, #116]	; (8009234 <netif_do_set_ipaddr+0x88>)
 80091c0:	f240 12cb 	movw	r2, #459	; 0x1cb
 80091c4:	491c      	ldr	r1, [pc, #112]	; (8009238 <netif_do_set_ipaddr+0x8c>)
 80091c6:	481d      	ldr	r0, [pc, #116]	; (800923c <netif_do_set_ipaddr+0x90>)
 80091c8:	f009 fce8 	bl	8012b9c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d106      	bne.n	80091e0 <netif_do_set_ipaddr+0x34>
 80091d2:	4b18      	ldr	r3, [pc, #96]	; (8009234 <netif_do_set_ipaddr+0x88>)
 80091d4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80091d8:	4917      	ldr	r1, [pc, #92]	; (8009238 <netif_do_set_ipaddr+0x8c>)
 80091da:	4818      	ldr	r0, [pc, #96]	; (800923c <netif_do_set_ipaddr+0x90>)
 80091dc:	f009 fcde 	bl	8012b9c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	3304      	adds	r3, #4
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d01c      	beq.n	8009228 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	3304      	adds	r3, #4
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80091fe:	f107 0314 	add.w	r3, r7, #20
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7ff ffbf 	bl	8009188 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <netif_do_set_ipaddr+0x6a>
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	e000      	b.n	8009218 <netif_do_set_ipaddr+0x6c>
 8009216:	2300      	movs	r3, #0
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800921c:	2101      	movs	r1, #1
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 f8d2 	bl	80093c8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009224:	2301      	movs	r3, #1
 8009226:	e000      	b.n	800922a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	08013fa8 	.word	0x08013fa8
 8009238:	080140c0 	.word	0x080140c0
 800923c:	08013ff8 	.word	0x08013ff8

08009240 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	3308      	adds	r3, #8
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	429a      	cmp	r2, r3
 8009258:	d00a      	beq.n	8009270 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d002      	beq.n	8009266 <netif_do_set_netmask+0x26>
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	e000      	b.n	8009268 <netif_do_set_netmask+0x28>
 8009266:	2300      	movs	r3, #0
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800926c:	2301      	movs	r3, #1
 800926e:	e000      	b.n	8009272 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800927e:	b480      	push	{r7}
 8009280:	b085      	sub	sp, #20
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	330c      	adds	r3, #12
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	429a      	cmp	r2, r3
 8009296:	d00a      	beq.n	80092ae <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d002      	beq.n	80092a4 <netif_do_set_gw+0x26>
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	e000      	b.n	80092a6 <netif_do_set_gw+0x28>
 80092a4:	2300      	movs	r3, #0
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80092aa:	2301      	movs	r3, #1
 80092ac:	e000      	b.n	80092b0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b088      	sub	sp, #32
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
 80092c8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80092ca:	2300      	movs	r3, #0
 80092cc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80092ce:	2300      	movs	r3, #0
 80092d0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80092d8:	4b1c      	ldr	r3, [pc, #112]	; (800934c <netif_set_addr+0x90>)
 80092da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80092e2:	4b1a      	ldr	r3, [pc, #104]	; (800934c <netif_set_addr+0x90>)
 80092e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80092ec:	4b17      	ldr	r3, [pc, #92]	; (800934c <netif_set_addr+0x90>)
 80092ee:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d003      	beq.n	80092fe <netif_set_addr+0x42>
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d101      	bne.n	8009302 <netif_set_addr+0x46>
 80092fe:	2301      	movs	r3, #1
 8009300:	e000      	b.n	8009304 <netif_set_addr+0x48>
 8009302:	2300      	movs	r3, #0
 8009304:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d006      	beq.n	800931a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800930c:	f107 0310 	add.w	r3, r7, #16
 8009310:	461a      	mov	r2, r3
 8009312:	68b9      	ldr	r1, [r7, #8]
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f7ff ff49 	bl	80091ac <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800931a:	69fa      	ldr	r2, [r7, #28]
 800931c:	6879      	ldr	r1, [r7, #4]
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f7ff ff8e 	bl	8009240 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009324:	69ba      	ldr	r2, [r7, #24]
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f7ff ffa8 	bl	800927e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d106      	bne.n	8009342 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009334:	f107 0310 	add.w	r3, r7, #16
 8009338:	461a      	mov	r2, r3
 800933a:	68b9      	ldr	r1, [r7, #8]
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f7ff ff35 	bl	80091ac <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009342:	bf00      	nop
 8009344:	3720      	adds	r7, #32
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	08016718 	.word	0x08016718

08009350 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009358:	4a04      	ldr	r2, [pc, #16]	; (800936c <netif_set_default+0x1c>)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800935e:	bf00      	nop
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	2400bce8 	.word	0x2400bce8

08009370 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d107      	bne.n	800938e <netif_set_up+0x1e>
 800937e:	4b0f      	ldr	r3, [pc, #60]	; (80093bc <netif_set_up+0x4c>)
 8009380:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009384:	490e      	ldr	r1, [pc, #56]	; (80093c0 <netif_set_up+0x50>)
 8009386:	480f      	ldr	r0, [pc, #60]	; (80093c4 <netif_set_up+0x54>)
 8009388:	f009 fc08 	bl	8012b9c <iprintf>
 800938c:	e013      	b.n	80093b6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009394:	f003 0301 	and.w	r3, r3, #1
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10c      	bne.n	80093b6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093a2:	f043 0301 	orr.w	r3, r3, #1
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80093ae:	2103      	movs	r1, #3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f809 	bl	80093c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	08013fa8 	.word	0x08013fa8
 80093c0:	08014130 	.word	0x08014130
 80093c4:	08013ff8 	.word	0x08013ff8

080093c8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d106      	bne.n	80093e8 <netif_issue_reports+0x20>
 80093da:	4b18      	ldr	r3, [pc, #96]	; (800943c <netif_issue_reports+0x74>)
 80093dc:	f240 326d 	movw	r2, #877	; 0x36d
 80093e0:	4917      	ldr	r1, [pc, #92]	; (8009440 <netif_issue_reports+0x78>)
 80093e2:	4818      	ldr	r0, [pc, #96]	; (8009444 <netif_issue_reports+0x7c>)
 80093e4:	f009 fbda 	bl	8012b9c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093ee:	f003 0304 	and.w	r3, r3, #4
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d01e      	beq.n	8009434 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093fc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009400:	2b00      	cmp	r3, #0
 8009402:	d017      	beq.n	8009434 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009404:	78fb      	ldrb	r3, [r7, #3]
 8009406:	f003 0301 	and.w	r3, r3, #1
 800940a:	2b00      	cmp	r3, #0
 800940c:	d013      	beq.n	8009436 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	3304      	adds	r3, #4
 8009412:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00e      	beq.n	8009436 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800941e:	f003 0308 	and.w	r3, r3, #8
 8009422:	2b00      	cmp	r3, #0
 8009424:	d007      	beq.n	8009436 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3304      	adds	r3, #4
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f007 fdff 	bl	8011030 <etharp_request>
 8009432:	e000      	b.n	8009436 <netif_issue_reports+0x6e>
    return;
 8009434:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	08013fa8 	.word	0x08013fa8
 8009440:	0801414c 	.word	0x0801414c
 8009444:	08013ff8 	.word	0x08013ff8

08009448 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d107      	bne.n	8009466 <netif_set_down+0x1e>
 8009456:	4b12      	ldr	r3, [pc, #72]	; (80094a0 <netif_set_down+0x58>)
 8009458:	f240 329b 	movw	r2, #923	; 0x39b
 800945c:	4911      	ldr	r1, [pc, #68]	; (80094a4 <netif_set_down+0x5c>)
 800945e:	4812      	ldr	r0, [pc, #72]	; (80094a8 <netif_set_down+0x60>)
 8009460:	f009 fb9c 	bl	8012b9c <iprintf>
 8009464:	e019      	b.n	800949a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800946c:	f003 0301 	and.w	r3, r3, #1
 8009470:	2b00      	cmp	r3, #0
 8009472:	d012      	beq.n	800949a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800947a:	f023 0301 	bic.w	r3, r3, #1
 800947e:	b2da      	uxtb	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800948c:	f003 0308 	and.w	r3, r3, #8
 8009490:	2b00      	cmp	r3, #0
 8009492:	d002      	beq.n	800949a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f007 f989 	bl	80107ac <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	08013fa8 	.word	0x08013fa8
 80094a4:	08014170 	.word	0x08014170
 80094a8:	08013ff8 	.word	0x08013ff8

080094ac <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d107      	bne.n	80094ca <netif_set_link_up+0x1e>
 80094ba:	4b13      	ldr	r3, [pc, #76]	; (8009508 <netif_set_link_up+0x5c>)
 80094bc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80094c0:	4912      	ldr	r1, [pc, #72]	; (800950c <netif_set_link_up+0x60>)
 80094c2:	4813      	ldr	r0, [pc, #76]	; (8009510 <netif_set_link_up+0x64>)
 80094c4:	f009 fb6a 	bl	8012b9c <iprintf>
 80094c8:	e01b      	b.n	8009502 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d114      	bne.n	8009502 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80094de:	f043 0304 	orr.w	r3, r3, #4
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80094ea:	2103      	movs	r1, #3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7ff ff6b 	bl	80093c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <netif_set_link_up+0x56>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	08013fa8 	.word	0x08013fa8
 800950c:	08014190 	.word	0x08014190
 8009510:	08013ff8 	.word	0x08013ff8

08009514 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d107      	bne.n	8009532 <netif_set_link_down+0x1e>
 8009522:	4b11      	ldr	r3, [pc, #68]	; (8009568 <netif_set_link_down+0x54>)
 8009524:	f240 4206 	movw	r2, #1030	; 0x406
 8009528:	4910      	ldr	r1, [pc, #64]	; (800956c <netif_set_link_down+0x58>)
 800952a:	4811      	ldr	r0, [pc, #68]	; (8009570 <netif_set_link_down+0x5c>)
 800952c:	f009 fb36 	bl	8012b9c <iprintf>
 8009530:	e017      	b.n	8009562 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009538:	f003 0304 	and.w	r3, r3, #4
 800953c:	2b00      	cmp	r3, #0
 800953e:	d010      	beq.n	8009562 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009546:	f023 0304 	bic.w	r3, r3, #4
 800954a:	b2da      	uxtb	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d003      	beq.n	8009562 <netif_set_link_down+0x4e>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	69db      	ldr	r3, [r3, #28]
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	08013fa8 	.word	0x08013fa8
 800956c:	080141b4 	.word	0x080141b4
 8009570:	08013ff8 	.word	0x08013ff8

08009574 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	61da      	str	r2, [r3, #28]
  }
}
 800958a:	bf00      	nop
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009596:	b480      	push	{r7}
 8009598:	b085      	sub	sp, #20
 800959a:	af00      	add	r7, sp, #0
 800959c:	60f8      	str	r0, [r7, #12]
 800959e:	60b9      	str	r1, [r7, #8]
 80095a0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80095a2:	f06f 030b 	mvn.w	r3, #11
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
	...

080095b4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	4603      	mov	r3, r0
 80095bc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d013      	beq.n	80095ec <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80095c4:	4b0d      	ldr	r3, [pc, #52]	; (80095fc <netif_get_by_index+0x48>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	60fb      	str	r3, [r7, #12]
 80095ca:	e00c      	b.n	80095e6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095d2:	3301      	adds	r3, #1
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	79fa      	ldrb	r2, [r7, #7]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d101      	bne.n	80095e0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	e006      	b.n	80095ee <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	60fb      	str	r3, [r7, #12]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1ef      	bne.n	80095cc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3714      	adds	r7, #20
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	2400bce4 	.word	0x2400bce4

08009600 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009606:	f009 f9bd 	bl	8012984 <sys_arch_protect>
 800960a:	6038      	str	r0, [r7, #0]
 800960c:	4b0d      	ldr	r3, [pc, #52]	; (8009644 <pbuf_free_ooseq+0x44>)
 800960e:	2200      	movs	r2, #0
 8009610:	701a      	strb	r2, [r3, #0]
 8009612:	6838      	ldr	r0, [r7, #0]
 8009614:	f009 f9c4 	bl	80129a0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009618:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <pbuf_free_ooseq+0x48>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	607b      	str	r3, [r7, #4]
 800961e:	e00a      	b.n	8009636 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009624:	2b00      	cmp	r3, #0
 8009626:	d003      	beq.n	8009630 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f002 f97f 	bl	800b92c <tcp_free_ooseq>
      return;
 800962e:	e005      	b.n	800963c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	607b      	str	r3, [r7, #4]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1f1      	bne.n	8009620 <pbuf_free_ooseq+0x20>
    }
  }
}
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	2400bced 	.word	0x2400bced
 8009648:	2400bcfc 	.word	0x2400bcfc

0800964c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8009654:	f7ff ffd4 	bl	8009600 <pbuf_free_ooseq>
}
 8009658:	bf00      	nop
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8009666:	f009 f98d 	bl	8012984 <sys_arch_protect>
 800966a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800966c:	4b0f      	ldr	r3, [pc, #60]	; (80096ac <pbuf_pool_is_empty+0x4c>)
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8009672:	4b0e      	ldr	r3, [pc, #56]	; (80096ac <pbuf_pool_is_empty+0x4c>)
 8009674:	2201      	movs	r2, #1
 8009676:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f009 f991 	bl	80129a0 <sys_arch_unprotect>

  if (!queued) {
 800967e:	78fb      	ldrb	r3, [r7, #3]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10f      	bne.n	80096a4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8009684:	2100      	movs	r1, #0
 8009686:	480a      	ldr	r0, [pc, #40]	; (80096b0 <pbuf_pool_is_empty+0x50>)
 8009688:	f7fe fe00 	bl	800828c <tcpip_try_callback>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d008      	beq.n	80096a4 <pbuf_pool_is_empty+0x44>
 8009692:	f009 f977 	bl	8012984 <sys_arch_protect>
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	4b04      	ldr	r3, [pc, #16]	; (80096ac <pbuf_pool_is_empty+0x4c>)
 800969a:	2200      	movs	r2, #0
 800969c:	701a      	strb	r2, [r3, #0]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f009 f97e 	bl	80129a0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80096a4:	bf00      	nop
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	2400bced 	.word	0x2400bced
 80096b0:	0800964d 	.word	0x0800964d

080096b4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	4611      	mov	r1, r2
 80096c0:	461a      	mov	r2, r3
 80096c2:	460b      	mov	r3, r1
 80096c4:	80fb      	strh	r3, [r7, #6]
 80096c6:	4613      	mov	r3, r2
 80096c8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2200      	movs	r2, #0
 80096ce:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	88fa      	ldrh	r2, [r7, #6]
 80096da:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	88ba      	ldrh	r2, [r7, #4]
 80096e0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80096e2:	8b3b      	ldrh	r3, [r7, #24]
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	7f3a      	ldrb	r2, [r7, #28]
 80096ee:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2201      	movs	r2, #1
 80096f4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	73da      	strb	r2, [r3, #15]
}
 80096fc:	bf00      	nop
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b08c      	sub	sp, #48	; 0x30
 800970c:	af02      	add	r7, sp, #8
 800970e:	4603      	mov	r3, r0
 8009710:	71fb      	strb	r3, [r7, #7]
 8009712:	460b      	mov	r3, r1
 8009714:	80bb      	strh	r3, [r7, #4]
 8009716:	4613      	mov	r3, r2
 8009718:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800971a:	79fb      	ldrb	r3, [r7, #7]
 800971c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800971e:	887b      	ldrh	r3, [r7, #2]
 8009720:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009724:	d07f      	beq.n	8009826 <pbuf_alloc+0x11e>
 8009726:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800972a:	f300 80c7 	bgt.w	80098bc <pbuf_alloc+0x1b4>
 800972e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009732:	d010      	beq.n	8009756 <pbuf_alloc+0x4e>
 8009734:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009738:	f300 80c0 	bgt.w	80098bc <pbuf_alloc+0x1b4>
 800973c:	2b01      	cmp	r3, #1
 800973e:	d002      	beq.n	8009746 <pbuf_alloc+0x3e>
 8009740:	2b41      	cmp	r3, #65	; 0x41
 8009742:	f040 80bb 	bne.w	80098bc <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009746:	887a      	ldrh	r2, [r7, #2]
 8009748:	88bb      	ldrh	r3, [r7, #4]
 800974a:	4619      	mov	r1, r3
 800974c:	2000      	movs	r0, #0
 800974e:	f000 f8d1 	bl	80098f4 <pbuf_alloc_reference>
 8009752:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8009754:	e0bc      	b.n	80098d0 <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009756:	2300      	movs	r3, #0
 8009758:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800975a:	2300      	movs	r3, #0
 800975c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800975e:	88bb      	ldrh	r3, [r7, #4]
 8009760:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009762:	200c      	movs	r0, #12
 8009764:	f7ff fb9a 	bl	8008e9c <memp_malloc>
 8009768:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d109      	bne.n	8009784 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009770:	f7ff ff76 	bl	8009660 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	2b00      	cmp	r3, #0
 8009778:	d002      	beq.n	8009780 <pbuf_alloc+0x78>
            pbuf_free(p);
 800977a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800977c:	f000 faa6 	bl	8009ccc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009780:	2300      	movs	r3, #0
 8009782:	e0a6      	b.n	80098d2 <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009784:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009786:	3303      	adds	r3, #3
 8009788:	b29b      	uxth	r3, r3
 800978a:	f023 0303 	bic.w	r3, r3, #3
 800978e:	b29b      	uxth	r3, r3
 8009790:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8009794:	b29b      	uxth	r3, r3
 8009796:	8b7a      	ldrh	r2, [r7, #26]
 8009798:	4293      	cmp	r3, r2
 800979a:	bf28      	it	cs
 800979c:	4613      	movcs	r3, r2
 800979e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80097a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80097a2:	3310      	adds	r3, #16
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	4413      	add	r3, r2
 80097a8:	3303      	adds	r3, #3
 80097aa:	f023 0303 	bic.w	r3, r3, #3
 80097ae:	4618      	mov	r0, r3
 80097b0:	89f9      	ldrh	r1, [r7, #14]
 80097b2:	8b7a      	ldrh	r2, [r7, #26]
 80097b4:	2300      	movs	r3, #0
 80097b6:	9301      	str	r3, [sp, #4]
 80097b8:	887b      	ldrh	r3, [r7, #2]
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	460b      	mov	r3, r1
 80097be:	4601      	mov	r1, r0
 80097c0:	6938      	ldr	r0, [r7, #16]
 80097c2:	f7ff ff77 	bl	80096b4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	f003 0303 	and.w	r3, r3, #3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d006      	beq.n	80097e0 <pbuf_alloc+0xd8>
 80097d2:	4b42      	ldr	r3, [pc, #264]	; (80098dc <pbuf_alloc+0x1d4>)
 80097d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097d8:	4941      	ldr	r1, [pc, #260]	; (80098e0 <pbuf_alloc+0x1d8>)
 80097da:	4842      	ldr	r0, [pc, #264]	; (80098e4 <pbuf_alloc+0x1dc>)
 80097dc:	f009 f9de 	bl	8012b9c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80097e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80097e2:	3303      	adds	r3, #3
 80097e4:	f023 0303 	bic.w	r3, r3, #3
 80097e8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80097ec:	d106      	bne.n	80097fc <pbuf_alloc+0xf4>
 80097ee:	4b3b      	ldr	r3, [pc, #236]	; (80098dc <pbuf_alloc+0x1d4>)
 80097f0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80097f4:	493c      	ldr	r1, [pc, #240]	; (80098e8 <pbuf_alloc+0x1e0>)
 80097f6:	483b      	ldr	r0, [pc, #236]	; (80098e4 <pbuf_alloc+0x1dc>)
 80097f8:	f009 f9d0 	bl	8012b9c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80097fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d102      	bne.n	8009808 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	627b      	str	r3, [r7, #36]	; 0x24
 8009806:	e002      	b.n	800980e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009812:	8b7a      	ldrh	r2, [r7, #26]
 8009814:	89fb      	ldrh	r3, [r7, #14]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800981a:	2300      	movs	r3, #0
 800981c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800981e:	8b7b      	ldrh	r3, [r7, #26]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d19e      	bne.n	8009762 <pbuf_alloc+0x5a>
      break;
 8009824:	e054      	b.n	80098d0 <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009826:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009828:	3303      	adds	r3, #3
 800982a:	b29b      	uxth	r3, r3
 800982c:	f023 0303 	bic.w	r3, r3, #3
 8009830:	b29a      	uxth	r2, r3
 8009832:	88bb      	ldrh	r3, [r7, #4]
 8009834:	3303      	adds	r3, #3
 8009836:	b29b      	uxth	r3, r3
 8009838:	f023 0303 	bic.w	r3, r3, #3
 800983c:	b29b      	uxth	r3, r3
 800983e:	4413      	add	r3, r2
 8009840:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009842:	8b3b      	ldrh	r3, [r7, #24]
 8009844:	3310      	adds	r3, #16
 8009846:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009848:	8b3a      	ldrh	r2, [r7, #24]
 800984a:	88bb      	ldrh	r3, [r7, #4]
 800984c:	3303      	adds	r3, #3
 800984e:	f023 0303 	bic.w	r3, r3, #3
 8009852:	429a      	cmp	r2, r3
 8009854:	d306      	bcc.n	8009864 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009856:	88bb      	ldrh	r3, [r7, #4]
 8009858:	3303      	adds	r3, #3
 800985a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800985e:	697a      	ldr	r2, [r7, #20]
 8009860:	429a      	cmp	r2, r3
 8009862:	d201      	bcs.n	8009868 <pbuf_alloc+0x160>
        return NULL;
 8009864:	2300      	movs	r3, #0
 8009866:	e034      	b.n	80098d2 <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009868:	6978      	ldr	r0, [r7, #20]
 800986a:	f7ff f97b 	bl	8008b64 <mem_malloc>
 800986e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	2b00      	cmp	r3, #0
 8009874:	d101      	bne.n	800987a <pbuf_alloc+0x172>
        return NULL;
 8009876:	2300      	movs	r3, #0
 8009878:	e02b      	b.n	80098d2 <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800987a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800987c:	3310      	adds	r3, #16
 800987e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009880:	4413      	add	r3, r2
 8009882:	3303      	adds	r3, #3
 8009884:	f023 0303 	bic.w	r3, r3, #3
 8009888:	4618      	mov	r0, r3
 800988a:	88b9      	ldrh	r1, [r7, #4]
 800988c:	88ba      	ldrh	r2, [r7, #4]
 800988e:	2300      	movs	r3, #0
 8009890:	9301      	str	r3, [sp, #4]
 8009892:	887b      	ldrh	r3, [r7, #2]
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	460b      	mov	r3, r1
 8009898:	4601      	mov	r1, r0
 800989a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800989c:	f7ff ff0a 	bl	80096b4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f003 0303 	and.w	r3, r3, #3
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d010      	beq.n	80098ce <pbuf_alloc+0x1c6>
 80098ac:	4b0b      	ldr	r3, [pc, #44]	; (80098dc <pbuf_alloc+0x1d4>)
 80098ae:	f44f 7291 	mov.w	r2, #290	; 0x122
 80098b2:	490e      	ldr	r1, [pc, #56]	; (80098ec <pbuf_alloc+0x1e4>)
 80098b4:	480b      	ldr	r0, [pc, #44]	; (80098e4 <pbuf_alloc+0x1dc>)
 80098b6:	f009 f971 	bl	8012b9c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80098ba:	e008      	b.n	80098ce <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80098bc:	4b07      	ldr	r3, [pc, #28]	; (80098dc <pbuf_alloc+0x1d4>)
 80098be:	f240 1227 	movw	r2, #295	; 0x127
 80098c2:	490b      	ldr	r1, [pc, #44]	; (80098f0 <pbuf_alloc+0x1e8>)
 80098c4:	4807      	ldr	r0, [pc, #28]	; (80098e4 <pbuf_alloc+0x1dc>)
 80098c6:	f009 f969 	bl	8012b9c <iprintf>
      return NULL;
 80098ca:	2300      	movs	r3, #0
 80098cc:	e001      	b.n	80098d2 <pbuf_alloc+0x1ca>
      break;
 80098ce:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80098d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3728      	adds	r7, #40	; 0x28
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	080141d8 	.word	0x080141d8
 80098e0:	08014208 	.word	0x08014208
 80098e4:	08014238 	.word	0x08014238
 80098e8:	08014260 	.word	0x08014260
 80098ec:	08014294 	.word	0x08014294
 80098f0:	080142c0 	.word	0x080142c0

080098f4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af02      	add	r7, sp, #8
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	460b      	mov	r3, r1
 80098fe:	807b      	strh	r3, [r7, #2]
 8009900:	4613      	mov	r3, r2
 8009902:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009904:	883b      	ldrh	r3, [r7, #0]
 8009906:	2b41      	cmp	r3, #65	; 0x41
 8009908:	d009      	beq.n	800991e <pbuf_alloc_reference+0x2a>
 800990a:	883b      	ldrh	r3, [r7, #0]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d006      	beq.n	800991e <pbuf_alloc_reference+0x2a>
 8009910:	4b0f      	ldr	r3, [pc, #60]	; (8009950 <pbuf_alloc_reference+0x5c>)
 8009912:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009916:	490f      	ldr	r1, [pc, #60]	; (8009954 <pbuf_alloc_reference+0x60>)
 8009918:	480f      	ldr	r0, [pc, #60]	; (8009958 <pbuf_alloc_reference+0x64>)
 800991a:	f009 f93f 	bl	8012b9c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800991e:	200b      	movs	r0, #11
 8009920:	f7ff fabc 	bl	8008e9c <memp_malloc>
 8009924:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800992c:	2300      	movs	r3, #0
 800992e:	e00b      	b.n	8009948 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009930:	8879      	ldrh	r1, [r7, #2]
 8009932:	887a      	ldrh	r2, [r7, #2]
 8009934:	2300      	movs	r3, #0
 8009936:	9301      	str	r3, [sp, #4]
 8009938:	883b      	ldrh	r3, [r7, #0]
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	460b      	mov	r3, r1
 800993e:	6879      	ldr	r1, [r7, #4]
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f7ff feb7 	bl	80096b4 <pbuf_init_alloced_pbuf>
  return p;
 8009946:	68fb      	ldr	r3, [r7, #12]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3710      	adds	r7, #16
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	080141d8 	.word	0x080141d8
 8009954:	080142dc 	.word	0x080142dc
 8009958:	08014238 	.word	0x08014238

0800995c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b088      	sub	sp, #32
 8009960:	af02      	add	r7, sp, #8
 8009962:	607b      	str	r3, [r7, #4]
 8009964:	4603      	mov	r3, r0
 8009966:	73fb      	strb	r3, [r7, #15]
 8009968:	460b      	mov	r3, r1
 800996a:	81bb      	strh	r3, [r7, #12]
 800996c:	4613      	mov	r3, r2
 800996e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009974:	8a7b      	ldrh	r3, [r7, #18]
 8009976:	3303      	adds	r3, #3
 8009978:	f023 0203 	bic.w	r2, r3, #3
 800997c:	89bb      	ldrh	r3, [r7, #12]
 800997e:	441a      	add	r2, r3
 8009980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009982:	429a      	cmp	r2, r3
 8009984:	d901      	bls.n	800998a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009986:	2300      	movs	r3, #0
 8009988:	e018      	b.n	80099bc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800998a:	6a3b      	ldr	r3, [r7, #32]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d007      	beq.n	80099a0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009990:	8a7b      	ldrh	r3, [r7, #18]
 8009992:	3303      	adds	r3, #3
 8009994:	f023 0303 	bic.w	r3, r3, #3
 8009998:	6a3a      	ldr	r2, [r7, #32]
 800999a:	4413      	add	r3, r2
 800999c:	617b      	str	r3, [r7, #20]
 800999e:	e001      	b.n	80099a4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80099a0:	2300      	movs	r3, #0
 80099a2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	89b9      	ldrh	r1, [r7, #12]
 80099a8:	89ba      	ldrh	r2, [r7, #12]
 80099aa:	2302      	movs	r3, #2
 80099ac:	9301      	str	r3, [sp, #4]
 80099ae:	897b      	ldrh	r3, [r7, #10]
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	460b      	mov	r3, r1
 80099b4:	6979      	ldr	r1, [r7, #20]
 80099b6:	f7ff fe7d 	bl	80096b4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80099ba:	687b      	ldr	r3, [r7, #4]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	460b      	mov	r3, r1
 80099ce:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d106      	bne.n	80099e4 <pbuf_realloc+0x20>
 80099d6:	4b39      	ldr	r3, [pc, #228]	; (8009abc <pbuf_realloc+0xf8>)
 80099d8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80099dc:	4938      	ldr	r1, [pc, #224]	; (8009ac0 <pbuf_realloc+0xfc>)
 80099de:	4839      	ldr	r0, [pc, #228]	; (8009ac4 <pbuf_realloc+0x100>)
 80099e0:	f009 f8dc 	bl	8012b9c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	891b      	ldrh	r3, [r3, #8]
 80099e8:	887a      	ldrh	r2, [r7, #2]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d261      	bcs.n	8009ab2 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	891a      	ldrh	r2, [r3, #8]
 80099f2:	887b      	ldrh	r3, [r7, #2]
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80099f8:	887b      	ldrh	r3, [r7, #2]
 80099fa:	817b      	strh	r3, [r7, #10]
  q = p;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009a00:	e018      	b.n	8009a34 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	895b      	ldrh	r3, [r3, #10]
 8009a06:	897a      	ldrh	r2, [r7, #10]
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	891a      	ldrh	r2, [r3, #8]
 8009a10:	893b      	ldrh	r3, [r7, #8]
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d106      	bne.n	8009a34 <pbuf_realloc+0x70>
 8009a26:	4b25      	ldr	r3, [pc, #148]	; (8009abc <pbuf_realloc+0xf8>)
 8009a28:	f240 12af 	movw	r2, #431	; 0x1af
 8009a2c:	4926      	ldr	r1, [pc, #152]	; (8009ac8 <pbuf_realloc+0x104>)
 8009a2e:	4825      	ldr	r0, [pc, #148]	; (8009ac4 <pbuf_realloc+0x100>)
 8009a30:	f009 f8b4 	bl	8012b9c <iprintf>
  while (rem_len > q->len) {
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	895b      	ldrh	r3, [r3, #10]
 8009a38:	897a      	ldrh	r2, [r7, #10]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d8e1      	bhi.n	8009a02 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	7b1b      	ldrb	r3, [r3, #12]
 8009a42:	f003 030f 	and.w	r3, r3, #15
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d11f      	bne.n	8009a8a <pbuf_realloc+0xc6>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	895b      	ldrh	r3, [r3, #10]
 8009a4e:	897a      	ldrh	r2, [r7, #10]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d01a      	beq.n	8009a8a <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	7b5b      	ldrb	r3, [r3, #13]
 8009a58:	f003 0302 	and.w	r3, r3, #2
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d114      	bne.n	8009a8a <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	1ad2      	subs	r2, r2, r3
 8009a68:	897b      	ldrh	r3, [r7, #10]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f7fe ff76 	bl	8008960 <mem_trim>
 8009a74:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d106      	bne.n	8009a8a <pbuf_realloc+0xc6>
 8009a7c:	4b0f      	ldr	r3, [pc, #60]	; (8009abc <pbuf_realloc+0xf8>)
 8009a7e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009a82:	4912      	ldr	r1, [pc, #72]	; (8009acc <pbuf_realloc+0x108>)
 8009a84:	480f      	ldr	r0, [pc, #60]	; (8009ac4 <pbuf_realloc+0x100>)
 8009a86:	f009 f889 	bl	8012b9c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	897a      	ldrh	r2, [r7, #10]
 8009a8e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	895a      	ldrh	r2, [r3, #10]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d004      	beq.n	8009aaa <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f000 f911 	bl	8009ccc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	601a      	str	r2, [r3, #0]
 8009ab0:	e000      	b.n	8009ab4 <pbuf_realloc+0xf0>
    return;
 8009ab2:	bf00      	nop

}
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	080141d8 	.word	0x080141d8
 8009ac0:	080142f0 	.word	0x080142f0
 8009ac4:	08014238 	.word	0x08014238
 8009ac8:	08014308 	.word	0x08014308
 8009acc:	08014320 	.word	0x08014320

08009ad0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	4613      	mov	r3, r2
 8009adc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d106      	bne.n	8009af2 <pbuf_add_header_impl+0x22>
 8009ae4:	4b2b      	ldr	r3, [pc, #172]	; (8009b94 <pbuf_add_header_impl+0xc4>)
 8009ae6:	f240 12df 	movw	r2, #479	; 0x1df
 8009aea:	492b      	ldr	r1, [pc, #172]	; (8009b98 <pbuf_add_header_impl+0xc8>)
 8009aec:	482b      	ldr	r0, [pc, #172]	; (8009b9c <pbuf_add_header_impl+0xcc>)
 8009aee:	f009 f855 	bl	8012b9c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d003      	beq.n	8009b00 <pbuf_add_header_impl+0x30>
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009afe:	d301      	bcc.n	8009b04 <pbuf_add_header_impl+0x34>
    return 1;
 8009b00:	2301      	movs	r3, #1
 8009b02:	e043      	b.n	8009b8c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <pbuf_add_header_impl+0x3e>
    return 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	e03e      	b.n	8009b8c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	891a      	ldrh	r2, [r3, #8]
 8009b16:	8a7b      	ldrh	r3, [r7, #18]
 8009b18:	4413      	add	r3, r2
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	8a7a      	ldrh	r2, [r7, #18]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d901      	bls.n	8009b26 <pbuf_add_header_impl+0x56>
    return 1;
 8009b22:	2301      	movs	r3, #1
 8009b24:	e032      	b.n	8009b8c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	7b1b      	ldrb	r3, [r3, #12]
 8009b2a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009b2c:	8a3b      	ldrh	r3, [r7, #16]
 8009b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00c      	beq.n	8009b50 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	685a      	ldr	r2, [r3, #4]
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	425b      	negs	r3, r3
 8009b3e:	4413      	add	r3, r2
 8009b40:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	3310      	adds	r3, #16
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d20d      	bcs.n	8009b68 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e01d      	b.n	8009b8c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009b50:	79fb      	ldrb	r3, [r7, #7]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d006      	beq.n	8009b64 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	685a      	ldr	r2, [r3, #4]
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	425b      	negs	r3, r3
 8009b5e:	4413      	add	r3, r2
 8009b60:	617b      	str	r3, [r7, #20]
 8009b62:	e001      	b.n	8009b68 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e011      	b.n	8009b8c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	697a      	ldr	r2, [r7, #20]
 8009b6c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	895a      	ldrh	r2, [r3, #10]
 8009b72:	8a7b      	ldrh	r3, [r7, #18]
 8009b74:	4413      	add	r3, r2
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	891a      	ldrh	r2, [r3, #8]
 8009b80:	8a7b      	ldrh	r3, [r7, #18]
 8009b82:	4413      	add	r3, r2
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	811a      	strh	r2, [r3, #8]


  return 0;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3718      	adds	r7, #24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	080141d8 	.word	0x080141d8
 8009b98:	0801433c 	.word	0x0801433c
 8009b9c:	08014238 	.word	0x08014238

08009ba0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009baa:	2200      	movs	r2, #0
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7ff ff8e 	bl	8009ad0 <pbuf_add_header_impl>
 8009bb4:	4603      	mov	r3, r0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
	...

08009bc0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d106      	bne.n	8009bde <pbuf_remove_header+0x1e>
 8009bd0:	4b20      	ldr	r3, [pc, #128]	; (8009c54 <pbuf_remove_header+0x94>)
 8009bd2:	f240 224b 	movw	r2, #587	; 0x24b
 8009bd6:	4920      	ldr	r1, [pc, #128]	; (8009c58 <pbuf_remove_header+0x98>)
 8009bd8:	4820      	ldr	r0, [pc, #128]	; (8009c5c <pbuf_remove_header+0x9c>)
 8009bda:	f008 ffdf 	bl	8012b9c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d003      	beq.n	8009bec <pbuf_remove_header+0x2c>
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bea:	d301      	bcc.n	8009bf0 <pbuf_remove_header+0x30>
    return 1;
 8009bec:	2301      	movs	r3, #1
 8009bee:	e02c      	b.n	8009c4a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d101      	bne.n	8009bfa <pbuf_remove_header+0x3a>
    return 0;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	e027      	b.n	8009c4a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	895b      	ldrh	r3, [r3, #10]
 8009c02:	89fa      	ldrh	r2, [r7, #14]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d908      	bls.n	8009c1a <pbuf_remove_header+0x5a>
 8009c08:	4b12      	ldr	r3, [pc, #72]	; (8009c54 <pbuf_remove_header+0x94>)
 8009c0a:	f240 2255 	movw	r2, #597	; 0x255
 8009c0e:	4914      	ldr	r1, [pc, #80]	; (8009c60 <pbuf_remove_header+0xa0>)
 8009c10:	4812      	ldr	r0, [pc, #72]	; (8009c5c <pbuf_remove_header+0x9c>)
 8009c12:	f008 ffc3 	bl	8012b9c <iprintf>
 8009c16:	2301      	movs	r3, #1
 8009c18:	e017      	b.n	8009c4a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685a      	ldr	r2, [r3, #4]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	441a      	add	r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	895a      	ldrh	r2, [r3, #10]
 8009c30:	89fb      	ldrh	r3, [r7, #14]
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	891a      	ldrh	r2, [r3, #8]
 8009c3e:	89fb      	ldrh	r3, [r7, #14]
 8009c40:	1ad3      	subs	r3, r2, r3
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	080141d8 	.word	0x080141d8
 8009c58:	0801433c 	.word	0x0801433c
 8009c5c:	08014238 	.word	0x08014238
 8009c60:	08014348 	.word	0x08014348

08009c64 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	807b      	strh	r3, [r7, #2]
 8009c70:	4613      	mov	r3, r2
 8009c72:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009c74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	da08      	bge.n	8009c8e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009c7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c80:	425b      	negs	r3, r3
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff ff9b 	bl	8009bc0 <pbuf_remove_header>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	e007      	b.n	8009c9e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009c8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c92:	787a      	ldrb	r2, [r7, #1]
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7ff ff1a 	bl	8009ad0 <pbuf_add_header_impl>
 8009c9c:	4603      	mov	r3, r0
  }
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b082      	sub	sp, #8
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	460b      	mov	r3, r1
 8009cb0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009cb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7ff ffd2 	bl	8009c64 <pbuf_header_impl>
 8009cc0:	4603      	mov	r3, r0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
	...

08009ccc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b088      	sub	sp, #32
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10b      	bne.n	8009cf2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d106      	bne.n	8009cee <pbuf_free+0x22>
 8009ce0:	4b3b      	ldr	r3, [pc, #236]	; (8009dd0 <pbuf_free+0x104>)
 8009ce2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009ce6:	493b      	ldr	r1, [pc, #236]	; (8009dd4 <pbuf_free+0x108>)
 8009ce8:	483b      	ldr	r0, [pc, #236]	; (8009dd8 <pbuf_free+0x10c>)
 8009cea:	f008 ff57 	bl	8012b9c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	e069      	b.n	8009dc6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009cf6:	e062      	b.n	8009dbe <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8009cf8:	f008 fe44 	bl	8012984 <sys_arch_protect>
 8009cfc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	7b9b      	ldrb	r3, [r3, #14]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d106      	bne.n	8009d14 <pbuf_free+0x48>
 8009d06:	4b32      	ldr	r3, [pc, #200]	; (8009dd0 <pbuf_free+0x104>)
 8009d08:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009d0c:	4933      	ldr	r1, [pc, #204]	; (8009ddc <pbuf_free+0x110>)
 8009d0e:	4832      	ldr	r0, [pc, #200]	; (8009dd8 <pbuf_free+0x10c>)
 8009d10:	f008 ff44 	bl	8012b9c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	7b9b      	ldrb	r3, [r3, #14]
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	b2da      	uxtb	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	739a      	strb	r2, [r3, #14]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	7b9b      	ldrb	r3, [r3, #14]
 8009d24:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8009d26:	69b8      	ldr	r0, [r7, #24]
 8009d28:	f008 fe3a 	bl	80129a0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009d2c:	7dfb      	ldrb	r3, [r7, #23]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d143      	bne.n	8009dba <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	7b1b      	ldrb	r3, [r3, #12]
 8009d3c:	f003 030f 	and.w	r3, r3, #15
 8009d40:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	7b5b      	ldrb	r3, [r3, #13]
 8009d46:	f003 0302 	and.w	r3, r3, #2
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d011      	beq.n	8009d72 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d106      	bne.n	8009d68 <pbuf_free+0x9c>
 8009d5a:	4b1d      	ldr	r3, [pc, #116]	; (8009dd0 <pbuf_free+0x104>)
 8009d5c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009d60:	491f      	ldr	r1, [pc, #124]	; (8009de0 <pbuf_free+0x114>)
 8009d62:	481d      	ldr	r0, [pc, #116]	; (8009dd8 <pbuf_free+0x10c>)
 8009d64:	f008 ff1a 	bl	8012b9c <iprintf>
        pc->custom_free_function(p);
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	4798      	blx	r3
 8009d70:	e01d      	b.n	8009dae <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009d72:	7bfb      	ldrb	r3, [r7, #15]
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d104      	bne.n	8009d82 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8009d78:	6879      	ldr	r1, [r7, #4]
 8009d7a:	200c      	movs	r0, #12
 8009d7c:	f7ff f904 	bl	8008f88 <memp_free>
 8009d80:	e015      	b.n	8009dae <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009d82:	7bfb      	ldrb	r3, [r7, #15]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d104      	bne.n	8009d92 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8009d88:	6879      	ldr	r1, [r7, #4]
 8009d8a:	200b      	movs	r0, #11
 8009d8c:	f7ff f8fc 	bl	8008f88 <memp_free>
 8009d90:	e00d      	b.n	8009dae <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d103      	bne.n	8009da0 <pbuf_free+0xd4>
          mem_free(p);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7fe fd51 	bl	8008840 <mem_free>
 8009d9e:	e006      	b.n	8009dae <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009da0:	4b0b      	ldr	r3, [pc, #44]	; (8009dd0 <pbuf_free+0x104>)
 8009da2:	f240 320f 	movw	r2, #783	; 0x30f
 8009da6:	490f      	ldr	r1, [pc, #60]	; (8009de4 <pbuf_free+0x118>)
 8009da8:	480b      	ldr	r0, [pc, #44]	; (8009dd8 <pbuf_free+0x10c>)
 8009daa:	f008 fef7 	bl	8012b9c <iprintf>
        }
      }
      count++;
 8009dae:	7ffb      	ldrb	r3, [r7, #31]
 8009db0:	3301      	adds	r3, #1
 8009db2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	607b      	str	r3, [r7, #4]
 8009db8:	e001      	b.n	8009dbe <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d199      	bne.n	8009cf8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009dc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3720      	adds	r7, #32
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	080141d8 	.word	0x080141d8
 8009dd4:	0801433c 	.word	0x0801433c
 8009dd8:	08014238 	.word	0x08014238
 8009ddc:	08014368 	.word	0x08014368
 8009de0:	08014380 	.word	0x08014380
 8009de4:	080143a4 	.word	0x080143a4

08009de8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009df4:	e005      	b.n	8009e02 <pbuf_clen+0x1a>
    ++len;
 8009df6:	89fb      	ldrh	r3, [r7, #14]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1f6      	bne.n	8009df6 <pbuf_clen+0xe>
  }
  return len;
 8009e08:	89fb      	ldrh	r3, [r7, #14]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
	...

08009e18 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d016      	beq.n	8009e54 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009e26:	f008 fdad 	bl	8012984 <sys_arch_protect>
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	7b9b      	ldrb	r3, [r3, #14]
 8009e30:	3301      	adds	r3, #1
 8009e32:	b2da      	uxtb	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	739a      	strb	r2, [r3, #14]
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f008 fdb1 	bl	80129a0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	7b9b      	ldrb	r3, [r3, #14]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d106      	bne.n	8009e54 <pbuf_ref+0x3c>
 8009e46:	4b05      	ldr	r3, [pc, #20]	; (8009e5c <pbuf_ref+0x44>)
 8009e48:	f240 3242 	movw	r2, #834	; 0x342
 8009e4c:	4904      	ldr	r1, [pc, #16]	; (8009e60 <pbuf_ref+0x48>)
 8009e4e:	4805      	ldr	r0, [pc, #20]	; (8009e64 <pbuf_ref+0x4c>)
 8009e50:	f008 fea4 	bl	8012b9c <iprintf>
  }
}
 8009e54:	bf00      	nop
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	080141d8 	.word	0x080141d8
 8009e60:	080143b8 	.word	0x080143b8
 8009e64:	08014238 	.word	0x08014238

08009e68 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d002      	beq.n	8009e7e <pbuf_cat+0x16>
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d107      	bne.n	8009e8e <pbuf_cat+0x26>
 8009e7e:	4b20      	ldr	r3, [pc, #128]	; (8009f00 <pbuf_cat+0x98>)
 8009e80:	f240 3259 	movw	r2, #857	; 0x359
 8009e84:	491f      	ldr	r1, [pc, #124]	; (8009f04 <pbuf_cat+0x9c>)
 8009e86:	4820      	ldr	r0, [pc, #128]	; (8009f08 <pbuf_cat+0xa0>)
 8009e88:	f008 fe88 	bl	8012b9c <iprintf>
 8009e8c:	e034      	b.n	8009ef8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	60fb      	str	r3, [r7, #12]
 8009e92:	e00a      	b.n	8009eaa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	891a      	ldrh	r2, [r3, #8]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	891b      	ldrh	r3, [r3, #8]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	60fb      	str	r3, [r7, #12]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d1f0      	bne.n	8009e94 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	891a      	ldrh	r2, [r3, #8]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	895b      	ldrh	r3, [r3, #10]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d006      	beq.n	8009ecc <pbuf_cat+0x64>
 8009ebe:	4b10      	ldr	r3, [pc, #64]	; (8009f00 <pbuf_cat+0x98>)
 8009ec0:	f240 3262 	movw	r2, #866	; 0x362
 8009ec4:	4911      	ldr	r1, [pc, #68]	; (8009f0c <pbuf_cat+0xa4>)
 8009ec6:	4810      	ldr	r0, [pc, #64]	; (8009f08 <pbuf_cat+0xa0>)
 8009ec8:	f008 fe68 	bl	8012b9c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d006      	beq.n	8009ee2 <pbuf_cat+0x7a>
 8009ed4:	4b0a      	ldr	r3, [pc, #40]	; (8009f00 <pbuf_cat+0x98>)
 8009ed6:	f240 3263 	movw	r2, #867	; 0x363
 8009eda:	490d      	ldr	r1, [pc, #52]	; (8009f10 <pbuf_cat+0xa8>)
 8009edc:	480a      	ldr	r0, [pc, #40]	; (8009f08 <pbuf_cat+0xa0>)
 8009ede:	f008 fe5d 	bl	8012b9c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	891a      	ldrh	r2, [r3, #8]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	891b      	ldrh	r3, [r3, #8]
 8009eea:	4413      	add	r3, r2
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	080141d8 	.word	0x080141d8
 8009f04:	080143cc 	.word	0x080143cc
 8009f08:	08014238 	.word	0x08014238
 8009f0c:	08014404 	.word	0x08014404
 8009f10:	08014434 	.word	0x08014434

08009f14 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7ff ffa1 	bl	8009e68 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009f26:	6838      	ldr	r0, [r7, #0]
 8009f28:	f7ff ff76 	bl	8009e18 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009f2c:	bf00      	nop
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	617b      	str	r3, [r7, #20]
 8009f42:	2300      	movs	r3, #0
 8009f44:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d008      	beq.n	8009f5e <pbuf_copy+0x2a>
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d005      	beq.n	8009f5e <pbuf_copy+0x2a>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	891a      	ldrh	r2, [r3, #8]
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	891b      	ldrh	r3, [r3, #8]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d209      	bcs.n	8009f72 <pbuf_copy+0x3e>
 8009f5e:	4b57      	ldr	r3, [pc, #348]	; (800a0bc <pbuf_copy+0x188>)
 8009f60:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009f64:	4956      	ldr	r1, [pc, #344]	; (800a0c0 <pbuf_copy+0x18c>)
 8009f66:	4857      	ldr	r0, [pc, #348]	; (800a0c4 <pbuf_copy+0x190>)
 8009f68:	f008 fe18 	bl	8012b9c <iprintf>
 8009f6c:	f06f 030f 	mvn.w	r3, #15
 8009f70:	e09f      	b.n	800a0b2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	895b      	ldrh	r3, [r3, #10]
 8009f76:	461a      	mov	r2, r3
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	1ad2      	subs	r2, r2, r3
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	895b      	ldrh	r3, [r3, #10]
 8009f80:	4619      	mov	r1, r3
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	1acb      	subs	r3, r1, r3
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d306      	bcc.n	8009f98 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	895b      	ldrh	r3, [r3, #10]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	60fb      	str	r3, [r7, #12]
 8009f96:	e005      	b.n	8009fa4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	895b      	ldrh	r3, [r3, #10]
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	18d0      	adds	r0, r2, r3
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	685a      	ldr	r2, [r3, #4]
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	f008 ff20 	bl	8012dfc <memcpy>
    offset_to += len;
 8009fbc:	697a      	ldr	r2, [r7, #20]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	4413      	add	r3, r2
 8009fca:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	895b      	ldrh	r3, [r3, #10]
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d906      	bls.n	8009fe6 <pbuf_copy+0xb2>
 8009fd8:	4b38      	ldr	r3, [pc, #224]	; (800a0bc <pbuf_copy+0x188>)
 8009fda:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009fde:	493a      	ldr	r1, [pc, #232]	; (800a0c8 <pbuf_copy+0x194>)
 8009fe0:	4838      	ldr	r0, [pc, #224]	; (800a0c4 <pbuf_copy+0x190>)
 8009fe2:	f008 fddb 	bl	8012b9c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	895b      	ldrh	r3, [r3, #10]
 8009fea:	461a      	mov	r2, r3
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d906      	bls.n	800a000 <pbuf_copy+0xcc>
 8009ff2:	4b32      	ldr	r3, [pc, #200]	; (800a0bc <pbuf_copy+0x188>)
 8009ff4:	f240 32da 	movw	r2, #986	; 0x3da
 8009ff8:	4934      	ldr	r1, [pc, #208]	; (800a0cc <pbuf_copy+0x198>)
 8009ffa:	4832      	ldr	r0, [pc, #200]	; (800a0c4 <pbuf_copy+0x190>)
 8009ffc:	f008 fdce 	bl	8012b9c <iprintf>
    if (offset_from >= p_from->len) {
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	895b      	ldrh	r3, [r3, #10]
 800a004:	461a      	mov	r2, r3
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	4293      	cmp	r3, r2
 800a00a:	d304      	bcc.n	800a016 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a00c:	2300      	movs	r3, #0
 800a00e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	895b      	ldrh	r3, [r3, #10]
 800a01a:	461a      	mov	r2, r3
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	4293      	cmp	r3, r2
 800a020:	d114      	bne.n	800a04c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a022:	2300      	movs	r3, #0
 800a024:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10c      	bne.n	800a04c <pbuf_copy+0x118>
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d009      	beq.n	800a04c <pbuf_copy+0x118>
 800a038:	4b20      	ldr	r3, [pc, #128]	; (800a0bc <pbuf_copy+0x188>)
 800a03a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a03e:	4924      	ldr	r1, [pc, #144]	; (800a0d0 <pbuf_copy+0x19c>)
 800a040:	4820      	ldr	r0, [pc, #128]	; (800a0c4 <pbuf_copy+0x190>)
 800a042:	f008 fdab 	bl	8012b9c <iprintf>
 800a046:	f06f 030f 	mvn.w	r3, #15
 800a04a:	e032      	b.n	800a0b2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d013      	beq.n	800a07a <pbuf_copy+0x146>
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	895a      	ldrh	r2, [r3, #10]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	891b      	ldrh	r3, [r3, #8]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d10d      	bne.n	800a07a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d009      	beq.n	800a07a <pbuf_copy+0x146>
 800a066:	4b15      	ldr	r3, [pc, #84]	; (800a0bc <pbuf_copy+0x188>)
 800a068:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a06c:	4919      	ldr	r1, [pc, #100]	; (800a0d4 <pbuf_copy+0x1a0>)
 800a06e:	4815      	ldr	r0, [pc, #84]	; (800a0c4 <pbuf_copy+0x190>)
 800a070:	f008 fd94 	bl	8012b9c <iprintf>
 800a074:	f06f 0305 	mvn.w	r3, #5
 800a078:	e01b      	b.n	800a0b2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d013      	beq.n	800a0a8 <pbuf_copy+0x174>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	895a      	ldrh	r2, [r3, #10]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	891b      	ldrh	r3, [r3, #8]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d10d      	bne.n	800a0a8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d009      	beq.n	800a0a8 <pbuf_copy+0x174>
 800a094:	4b09      	ldr	r3, [pc, #36]	; (800a0bc <pbuf_copy+0x188>)
 800a096:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a09a:	490e      	ldr	r1, [pc, #56]	; (800a0d4 <pbuf_copy+0x1a0>)
 800a09c:	4809      	ldr	r0, [pc, #36]	; (800a0c4 <pbuf_copy+0x190>)
 800a09e:	f008 fd7d 	bl	8012b9c <iprintf>
 800a0a2:	f06f 0305 	mvn.w	r3, #5
 800a0a6:	e004      	b.n	800a0b2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f47f af61 	bne.w	8009f72 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	080141d8 	.word	0x080141d8
 800a0c0:	08014480 	.word	0x08014480
 800a0c4:	08014238 	.word	0x08014238
 800a0c8:	080144b0 	.word	0x080144b0
 800a0cc:	080144c8 	.word	0x080144c8
 800a0d0:	080144e4 	.word	0x080144e4
 800a0d4:	080144f4 	.word	0x080144f4

0800a0d8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b088      	sub	sp, #32
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	80fb      	strh	r3, [r7, #6]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d108      	bne.n	800a10e <pbuf_copy_partial+0x36>
 800a0fc:	4b2b      	ldr	r3, [pc, #172]	; (800a1ac <pbuf_copy_partial+0xd4>)
 800a0fe:	f240 420a 	movw	r2, #1034	; 0x40a
 800a102:	492b      	ldr	r1, [pc, #172]	; (800a1b0 <pbuf_copy_partial+0xd8>)
 800a104:	482b      	ldr	r0, [pc, #172]	; (800a1b4 <pbuf_copy_partial+0xdc>)
 800a106:	f008 fd49 	bl	8012b9c <iprintf>
 800a10a:	2300      	movs	r3, #0
 800a10c:	e04a      	b.n	800a1a4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d108      	bne.n	800a126 <pbuf_copy_partial+0x4e>
 800a114:	4b25      	ldr	r3, [pc, #148]	; (800a1ac <pbuf_copy_partial+0xd4>)
 800a116:	f240 420b 	movw	r2, #1035	; 0x40b
 800a11a:	4927      	ldr	r1, [pc, #156]	; (800a1b8 <pbuf_copy_partial+0xe0>)
 800a11c:	4825      	ldr	r0, [pc, #148]	; (800a1b4 <pbuf_copy_partial+0xdc>)
 800a11e:	f008 fd3d 	bl	8012b9c <iprintf>
 800a122:	2300      	movs	r3, #0
 800a124:	e03e      	b.n	800a1a4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	61fb      	str	r3, [r7, #28]
 800a12a:	e034      	b.n	800a196 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a12c:	88bb      	ldrh	r3, [r7, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00a      	beq.n	800a148 <pbuf_copy_partial+0x70>
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	895b      	ldrh	r3, [r3, #10]
 800a136:	88ba      	ldrh	r2, [r7, #4]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d305      	bcc.n	800a148 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	895b      	ldrh	r3, [r3, #10]
 800a140:	88ba      	ldrh	r2, [r7, #4]
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	80bb      	strh	r3, [r7, #4]
 800a146:	e023      	b.n	800a190 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	895a      	ldrh	r2, [r3, #10]
 800a14c:	88bb      	ldrh	r3, [r7, #4]
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a152:	8b3a      	ldrh	r2, [r7, #24]
 800a154:	88fb      	ldrh	r3, [r7, #6]
 800a156:	429a      	cmp	r2, r3
 800a158:	d901      	bls.n	800a15e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a15a:	88fb      	ldrh	r3, [r7, #6]
 800a15c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a15e:	8b7b      	ldrh	r3, [r7, #26]
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	18d0      	adds	r0, r2, r3
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	88bb      	ldrh	r3, [r7, #4]
 800a16a:	4413      	add	r3, r2
 800a16c:	8b3a      	ldrh	r2, [r7, #24]
 800a16e:	4619      	mov	r1, r3
 800a170:	f008 fe44 	bl	8012dfc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a174:	8afa      	ldrh	r2, [r7, #22]
 800a176:	8b3b      	ldrh	r3, [r7, #24]
 800a178:	4413      	add	r3, r2
 800a17a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a17c:	8b7a      	ldrh	r2, [r7, #26]
 800a17e:	8b3b      	ldrh	r3, [r7, #24]
 800a180:	4413      	add	r3, r2
 800a182:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a184:	88fa      	ldrh	r2, [r7, #6]
 800a186:	8b3b      	ldrh	r3, [r7, #24]
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a18c:	2300      	movs	r3, #0
 800a18e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	61fb      	str	r3, [r7, #28]
 800a196:	88fb      	ldrh	r3, [r7, #6]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d002      	beq.n	800a1a2 <pbuf_copy_partial+0xca>
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1c4      	bne.n	800a12c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a1a2:	8afb      	ldrh	r3, [r7, #22]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3720      	adds	r7, #32
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	080141d8 	.word	0x080141d8
 800a1b0:	08014520 	.word	0x08014520
 800a1b4:	08014238 	.word	0x08014238
 800a1b8:	08014540 	.word	0x08014540

0800a1bc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	603a      	str	r2, [r7, #0]
 800a1c6:	71fb      	strb	r3, [r7, #7]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	8919      	ldrh	r1, [r3, #8]
 800a1d0:	88ba      	ldrh	r2, [r7, #4]
 800a1d2:	79fb      	ldrb	r3, [r7, #7]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7ff fa97 	bl	8009708 <pbuf_alloc>
 800a1da:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d101      	bne.n	800a1e6 <pbuf_clone+0x2a>
    return NULL;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	e011      	b.n	800a20a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f7ff fea3 	bl	8009f34 <pbuf_copy>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a1f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d006      	beq.n	800a208 <pbuf_clone+0x4c>
 800a1fa:	4b06      	ldr	r3, [pc, #24]	; (800a214 <pbuf_clone+0x58>)
 800a1fc:	f240 5224 	movw	r2, #1316	; 0x524
 800a200:	4905      	ldr	r1, [pc, #20]	; (800a218 <pbuf_clone+0x5c>)
 800a202:	4806      	ldr	r0, [pc, #24]	; (800a21c <pbuf_clone+0x60>)
 800a204:	f008 fcca 	bl	8012b9c <iprintf>
  return q;
 800a208:	68fb      	ldr	r3, [r7, #12]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	080141d8 	.word	0x080141d8
 800a218:	0801464c 	.word	0x0801464c
 800a21c:	08014238 	.word	0x08014238

0800a220 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a224:	f008 fbcc 	bl	80129c0 <rand>
 800a228:	4603      	mov	r3, r0
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a230:	b29b      	uxth	r3, r3
 800a232:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a236:	b29a      	uxth	r2, r3
 800a238:	4b01      	ldr	r3, [pc, #4]	; (800a240 <tcp_init+0x20>)
 800a23a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a23c:	bf00      	nop
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	24000028 	.word	0x24000028

0800a244 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	7d1b      	ldrb	r3, [r3, #20]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d105      	bne.n	800a260 <tcp_free+0x1c>
 800a254:	4b06      	ldr	r3, [pc, #24]	; (800a270 <tcp_free+0x2c>)
 800a256:	22d4      	movs	r2, #212	; 0xd4
 800a258:	4906      	ldr	r1, [pc, #24]	; (800a274 <tcp_free+0x30>)
 800a25a:	4807      	ldr	r0, [pc, #28]	; (800a278 <tcp_free+0x34>)
 800a25c:	f008 fc9e 	bl	8012b9c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a260:	6879      	ldr	r1, [r7, #4]
 800a262:	2001      	movs	r0, #1
 800a264:	f7fe fe90 	bl	8008f88 <memp_free>
}
 800a268:	bf00      	nop
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	080146d8 	.word	0x080146d8
 800a274:	08014708 	.word	0x08014708
 800a278:	0801471c 	.word	0x0801471c

0800a27c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	7d1b      	ldrb	r3, [r3, #20]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d105      	bne.n	800a298 <tcp_free_listen+0x1c>
 800a28c:	4b06      	ldr	r3, [pc, #24]	; (800a2a8 <tcp_free_listen+0x2c>)
 800a28e:	22df      	movs	r2, #223	; 0xdf
 800a290:	4906      	ldr	r1, [pc, #24]	; (800a2ac <tcp_free_listen+0x30>)
 800a292:	4807      	ldr	r0, [pc, #28]	; (800a2b0 <tcp_free_listen+0x34>)
 800a294:	f008 fc82 	bl	8012b9c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a298:	6879      	ldr	r1, [r7, #4]
 800a29a:	2002      	movs	r0, #2
 800a29c:	f7fe fe74 	bl	8008f88 <memp_free>
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	080146d8 	.word	0x080146d8
 800a2ac:	08014744 	.word	0x08014744
 800a2b0:	0801471c 	.word	0x0801471c

0800a2b4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a2b8:	f000 fea2 	bl	800b000 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a2bc:	4b07      	ldr	r3, [pc, #28]	; (800a2dc <tcp_tmr+0x28>)
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <tcp_tmr+0x28>)
 800a2c6:	701a      	strb	r2, [r3, #0]
 800a2c8:	4b04      	ldr	r3, [pc, #16]	; (800a2dc <tcp_tmr+0x28>)
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	f003 0301 	and.w	r3, r3, #1
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a2d4:	f000 fb54 	bl	800a980 <tcp_slowtmr>
  }
}
 800a2d8:	bf00      	nop
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	2400bd05 	.word	0x2400bd05

0800a2e0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d105      	bne.n	800a2fc <tcp_remove_listener+0x1c>
 800a2f0:	4b0d      	ldr	r3, [pc, #52]	; (800a328 <tcp_remove_listener+0x48>)
 800a2f2:	22ff      	movs	r2, #255	; 0xff
 800a2f4:	490d      	ldr	r1, [pc, #52]	; (800a32c <tcp_remove_listener+0x4c>)
 800a2f6:	480e      	ldr	r0, [pc, #56]	; (800a330 <tcp_remove_listener+0x50>)
 800a2f8:	f008 fc50 	bl	8012b9c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	60fb      	str	r3, [r7, #12]
 800a300:	e00a      	b.n	800a318 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d102      	bne.n	800a312 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	60fb      	str	r3, [r7, #12]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1f1      	bne.n	800a302 <tcp_remove_listener+0x22>
    }
  }
}
 800a31e:	bf00      	nop
 800a320:	bf00      	nop
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	080146d8 	.word	0x080146d8
 800a32c:	08014760 	.word	0x08014760
 800a330:	0801471c 	.word	0x0801471c

0800a334 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d106      	bne.n	800a350 <tcp_listen_closed+0x1c>
 800a342:	4b14      	ldr	r3, [pc, #80]	; (800a394 <tcp_listen_closed+0x60>)
 800a344:	f240 1211 	movw	r2, #273	; 0x111
 800a348:	4913      	ldr	r1, [pc, #76]	; (800a398 <tcp_listen_closed+0x64>)
 800a34a:	4814      	ldr	r0, [pc, #80]	; (800a39c <tcp_listen_closed+0x68>)
 800a34c:	f008 fc26 	bl	8012b9c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	7d1b      	ldrb	r3, [r3, #20]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d006      	beq.n	800a366 <tcp_listen_closed+0x32>
 800a358:	4b0e      	ldr	r3, [pc, #56]	; (800a394 <tcp_listen_closed+0x60>)
 800a35a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800a35e:	4910      	ldr	r1, [pc, #64]	; (800a3a0 <tcp_listen_closed+0x6c>)
 800a360:	480e      	ldr	r0, [pc, #56]	; (800a39c <tcp_listen_closed+0x68>)
 800a362:	f008 fc1b 	bl	8012b9c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a366:	2301      	movs	r3, #1
 800a368:	60fb      	str	r3, [r7, #12]
 800a36a:	e00b      	b.n	800a384 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a36c:	4a0d      	ldr	r2, [pc, #52]	; (800a3a4 <tcp_listen_closed+0x70>)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6879      	ldr	r1, [r7, #4]
 800a378:	4618      	mov	r0, r3
 800a37a:	f7ff ffb1 	bl	800a2e0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3301      	adds	r3, #1
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b03      	cmp	r3, #3
 800a388:	d9f0      	bls.n	800a36c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a38a:	bf00      	nop
 800a38c:	bf00      	nop
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	080146d8 	.word	0x080146d8
 800a398:	08014788 	.word	0x08014788
 800a39c:	0801471c 	.word	0x0801471c
 800a3a0:	08014794 	.word	0x08014794
 800a3a4:	080166f0 	.word	0x080166f0

0800a3a8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a3a8:	b5b0      	push	{r4, r5, r7, lr}
 800a3aa:	b088      	sub	sp, #32
 800a3ac:	af04      	add	r7, sp, #16
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d106      	bne.n	800a3c8 <tcp_close_shutdown+0x20>
 800a3ba:	4b63      	ldr	r3, [pc, #396]	; (800a548 <tcp_close_shutdown+0x1a0>)
 800a3bc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a3c0:	4962      	ldr	r1, [pc, #392]	; (800a54c <tcp_close_shutdown+0x1a4>)
 800a3c2:	4863      	ldr	r0, [pc, #396]	; (800a550 <tcp_close_shutdown+0x1a8>)
 800a3c4:	f008 fbea 	bl	8012b9c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a3c8:	78fb      	ldrb	r3, [r7, #3]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d066      	beq.n	800a49c <tcp_close_shutdown+0xf4>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	7d1b      	ldrb	r3, [r3, #20]
 800a3d2:	2b04      	cmp	r3, #4
 800a3d4:	d003      	beq.n	800a3de <tcp_close_shutdown+0x36>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	7d1b      	ldrb	r3, [r3, #20]
 800a3da:	2b07      	cmp	r3, #7
 800a3dc:	d15e      	bne.n	800a49c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d104      	bne.n	800a3f0 <tcp_close_shutdown+0x48>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a3ee:	d055      	beq.n	800a49c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	8b5b      	ldrh	r3, [r3, #26]
 800a3f4:	f003 0310 	and.w	r3, r3, #16
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d106      	bne.n	800a40a <tcp_close_shutdown+0x62>
 800a3fc:	4b52      	ldr	r3, [pc, #328]	; (800a548 <tcp_close_shutdown+0x1a0>)
 800a3fe:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800a402:	4954      	ldr	r1, [pc, #336]	; (800a554 <tcp_close_shutdown+0x1ac>)
 800a404:	4852      	ldr	r0, [pc, #328]	; (800a550 <tcp_close_shutdown+0x1a8>)
 800a406:	f008 fbc9 	bl	8012b9c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a412:	687d      	ldr	r5, [r7, #4]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	3304      	adds	r3, #4
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	8ad2      	ldrh	r2, [r2, #22]
 800a41c:	6879      	ldr	r1, [r7, #4]
 800a41e:	8b09      	ldrh	r1, [r1, #24]
 800a420:	9102      	str	r1, [sp, #8]
 800a422:	9201      	str	r2, [sp, #4]
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	462b      	mov	r3, r5
 800a428:	4622      	mov	r2, r4
 800a42a:	4601      	mov	r1, r0
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f004 fe91 	bl	800f154 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f001 f8c6 	bl	800b5c4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a438:	4b47      	ldr	r3, [pc, #284]	; (800a558 <tcp_close_shutdown+0x1b0>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d105      	bne.n	800a44e <tcp_close_shutdown+0xa6>
 800a442:	4b45      	ldr	r3, [pc, #276]	; (800a558 <tcp_close_shutdown+0x1b0>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	4a43      	ldr	r2, [pc, #268]	; (800a558 <tcp_close_shutdown+0x1b0>)
 800a44a:	6013      	str	r3, [r2, #0]
 800a44c:	e013      	b.n	800a476 <tcp_close_shutdown+0xce>
 800a44e:	4b42      	ldr	r3, [pc, #264]	; (800a558 <tcp_close_shutdown+0x1b0>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	60fb      	str	r3, [r7, #12]
 800a454:	e00c      	b.n	800a470 <tcp_close_shutdown+0xc8>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d104      	bne.n	800a46a <tcp_close_shutdown+0xc2>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	68da      	ldr	r2, [r3, #12]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	60da      	str	r2, [r3, #12]
 800a468:	e005      	b.n	800a476 <tcp_close_shutdown+0xce>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1ef      	bne.n	800a456 <tcp_close_shutdown+0xae>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	60da      	str	r2, [r3, #12]
 800a47c:	4b37      	ldr	r3, [pc, #220]	; (800a55c <tcp_close_shutdown+0x1b4>)
 800a47e:	2201      	movs	r2, #1
 800a480:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a482:	4b37      	ldr	r3, [pc, #220]	; (800a560 <tcp_close_shutdown+0x1b8>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d102      	bne.n	800a492 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a48c:	f003 fd5e 	bl	800df4c <tcp_trigger_input_pcb_close>
 800a490:	e002      	b.n	800a498 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7ff fed6 	bl	800a244 <tcp_free>
      }
      return ERR_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	e050      	b.n	800a53e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	7d1b      	ldrb	r3, [r3, #20]
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d03b      	beq.n	800a51c <tcp_close_shutdown+0x174>
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	dc44      	bgt.n	800a532 <tcp_close_shutdown+0x18a>
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d002      	beq.n	800a4b2 <tcp_close_shutdown+0x10a>
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d02a      	beq.n	800a506 <tcp_close_shutdown+0x15e>
 800a4b0:	e03f      	b.n	800a532 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	8adb      	ldrh	r3, [r3, #22]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d021      	beq.n	800a4fe <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a4ba:	4b2a      	ldr	r3, [pc, #168]	; (800a564 <tcp_close_shutdown+0x1bc>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d105      	bne.n	800a4d0 <tcp_close_shutdown+0x128>
 800a4c4:	4b27      	ldr	r3, [pc, #156]	; (800a564 <tcp_close_shutdown+0x1bc>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	4a26      	ldr	r2, [pc, #152]	; (800a564 <tcp_close_shutdown+0x1bc>)
 800a4cc:	6013      	str	r3, [r2, #0]
 800a4ce:	e013      	b.n	800a4f8 <tcp_close_shutdown+0x150>
 800a4d0:	4b24      	ldr	r3, [pc, #144]	; (800a564 <tcp_close_shutdown+0x1bc>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	60bb      	str	r3, [r7, #8]
 800a4d6:	e00c      	b.n	800a4f2 <tcp_close_shutdown+0x14a>
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d104      	bne.n	800a4ec <tcp_close_shutdown+0x144>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	68da      	ldr	r2, [r3, #12]
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	60da      	str	r2, [r3, #12]
 800a4ea:	e005      	b.n	800a4f8 <tcp_close_shutdown+0x150>
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	60bb      	str	r3, [r7, #8]
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1ef      	bne.n	800a4d8 <tcp_close_shutdown+0x130>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f7ff fea0 	bl	800a244 <tcp_free>
      break;
 800a504:	e01a      	b.n	800a53c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7ff ff14 	bl	800a334 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a50c:	6879      	ldr	r1, [r7, #4]
 800a50e:	4816      	ldr	r0, [pc, #88]	; (800a568 <tcp_close_shutdown+0x1c0>)
 800a510:	f001 f8a8 	bl	800b664 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f7ff feb1 	bl	800a27c <tcp_free_listen>
      break;
 800a51a:	e00f      	b.n	800a53c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a51c:	6879      	ldr	r1, [r7, #4]
 800a51e:	480e      	ldr	r0, [pc, #56]	; (800a558 <tcp_close_shutdown+0x1b0>)
 800a520:	f001 f8a0 	bl	800b664 <tcp_pcb_remove>
 800a524:	4b0d      	ldr	r3, [pc, #52]	; (800a55c <tcp_close_shutdown+0x1b4>)
 800a526:	2201      	movs	r2, #1
 800a528:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f7ff fe8a 	bl	800a244 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a530:	e004      	b.n	800a53c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f81a 	bl	800a56c <tcp_close_shutdown_fin>
 800a538:	4603      	mov	r3, r0
 800a53a:	e000      	b.n	800a53e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bdb0      	pop	{r4, r5, r7, pc}
 800a546:	bf00      	nop
 800a548:	080146d8 	.word	0x080146d8
 800a54c:	080147ac 	.word	0x080147ac
 800a550:	0801471c 	.word	0x0801471c
 800a554:	080147cc 	.word	0x080147cc
 800a558:	2400bcfc 	.word	0x2400bcfc
 800a55c:	2400bd04 	.word	0x2400bd04
 800a560:	2400bd3c 	.word	0x2400bd3c
 800a564:	2400bcf4 	.word	0x2400bcf4
 800a568:	2400bcf8 	.word	0x2400bcf8

0800a56c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d106      	bne.n	800a588 <tcp_close_shutdown_fin+0x1c>
 800a57a:	4b2e      	ldr	r3, [pc, #184]	; (800a634 <tcp_close_shutdown_fin+0xc8>)
 800a57c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a580:	492d      	ldr	r1, [pc, #180]	; (800a638 <tcp_close_shutdown_fin+0xcc>)
 800a582:	482e      	ldr	r0, [pc, #184]	; (800a63c <tcp_close_shutdown_fin+0xd0>)
 800a584:	f008 fb0a 	bl	8012b9c <iprintf>

  switch (pcb->state) {
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	7d1b      	ldrb	r3, [r3, #20]
 800a58c:	2b07      	cmp	r3, #7
 800a58e:	d020      	beq.n	800a5d2 <tcp_close_shutdown_fin+0x66>
 800a590:	2b07      	cmp	r3, #7
 800a592:	dc2b      	bgt.n	800a5ec <tcp_close_shutdown_fin+0x80>
 800a594:	2b03      	cmp	r3, #3
 800a596:	d002      	beq.n	800a59e <tcp_close_shutdown_fin+0x32>
 800a598:	2b04      	cmp	r3, #4
 800a59a:	d00d      	beq.n	800a5b8 <tcp_close_shutdown_fin+0x4c>
 800a59c:	e026      	b.n	800a5ec <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f003 fee6 	bl	800e370 <tcp_send_fin>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a5a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d11f      	bne.n	800a5f0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2205      	movs	r2, #5
 800a5b4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a5b6:	e01b      	b.n	800a5f0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f003 fed9 	bl	800e370 <tcp_send_fin>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d114      	bne.n	800a5f4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2205      	movs	r2, #5
 800a5ce:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a5d0:	e010      	b.n	800a5f4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f003 fecc 	bl	800e370 <tcp_send_fin>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a5dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d109      	bne.n	800a5f8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2209      	movs	r2, #9
 800a5e8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a5ea:	e005      	b.n	800a5f8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	e01c      	b.n	800a62a <tcp_close_shutdown_fin+0xbe>
      break;
 800a5f0:	bf00      	nop
 800a5f2:	e002      	b.n	800a5fa <tcp_close_shutdown_fin+0x8e>
      break;
 800a5f4:	bf00      	nop
 800a5f6:	e000      	b.n	800a5fa <tcp_close_shutdown_fin+0x8e>
      break;
 800a5f8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a5fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d103      	bne.n	800a60a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f003 fff2 	bl	800e5ec <tcp_output>
 800a608:	e00d      	b.n	800a626 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a60a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a60e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a612:	d108      	bne.n	800a626 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	8b5b      	ldrh	r3, [r3, #26]
 800a618:	f043 0308 	orr.w	r3, r3, #8
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a622:	2300      	movs	r3, #0
 800a624:	e001      	b.n	800a62a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a626:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	080146d8 	.word	0x080146d8
 800a638:	08014788 	.word	0x08014788
 800a63c:	0801471c 	.word	0x0801471c

0800a640 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d109      	bne.n	800a662 <tcp_close+0x22>
 800a64e:	4b0f      	ldr	r3, [pc, #60]	; (800a68c <tcp_close+0x4c>)
 800a650:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a654:	490e      	ldr	r1, [pc, #56]	; (800a690 <tcp_close+0x50>)
 800a656:	480f      	ldr	r0, [pc, #60]	; (800a694 <tcp_close+0x54>)
 800a658:	f008 faa0 	bl	8012b9c <iprintf>
 800a65c:	f06f 030f 	mvn.w	r3, #15
 800a660:	e00f      	b.n	800a682 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	7d1b      	ldrb	r3, [r3, #20]
 800a666:	2b01      	cmp	r3, #1
 800a668:	d006      	beq.n	800a678 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	8b5b      	ldrh	r3, [r3, #26]
 800a66e:	f043 0310 	orr.w	r3, r3, #16
 800a672:	b29a      	uxth	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a678:	2101      	movs	r1, #1
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7ff fe94 	bl	800a3a8 <tcp_close_shutdown>
 800a680:	4603      	mov	r3, r0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	080146d8 	.word	0x080146d8
 800a690:	080147e8 	.word	0x080147e8
 800a694:	0801471c 	.word	0x0801471c

0800a698 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b08e      	sub	sp, #56	; 0x38
 800a69c:	af04      	add	r7, sp, #16
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d107      	bne.n	800a6b8 <tcp_abandon+0x20>
 800a6a8:	4b52      	ldr	r3, [pc, #328]	; (800a7f4 <tcp_abandon+0x15c>)
 800a6aa:	f240 223d 	movw	r2, #573	; 0x23d
 800a6ae:	4952      	ldr	r1, [pc, #328]	; (800a7f8 <tcp_abandon+0x160>)
 800a6b0:	4852      	ldr	r0, [pc, #328]	; (800a7fc <tcp_abandon+0x164>)
 800a6b2:	f008 fa73 	bl	8012b9c <iprintf>
 800a6b6:	e099      	b.n	800a7ec <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	7d1b      	ldrb	r3, [r3, #20]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d106      	bne.n	800a6ce <tcp_abandon+0x36>
 800a6c0:	4b4c      	ldr	r3, [pc, #304]	; (800a7f4 <tcp_abandon+0x15c>)
 800a6c2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a6c6:	494e      	ldr	r1, [pc, #312]	; (800a800 <tcp_abandon+0x168>)
 800a6c8:	484c      	ldr	r0, [pc, #304]	; (800a7fc <tcp_abandon+0x164>)
 800a6ca:	f008 fa67 	bl	8012b9c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	7d1b      	ldrb	r3, [r3, #20]
 800a6d2:	2b0a      	cmp	r3, #10
 800a6d4:	d107      	bne.n	800a6e6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a6d6:	6879      	ldr	r1, [r7, #4]
 800a6d8:	484a      	ldr	r0, [pc, #296]	; (800a804 <tcp_abandon+0x16c>)
 800a6da:	f000 ffc3 	bl	800b664 <tcp_pcb_remove>
    tcp_free(pcb);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7ff fdb0 	bl	800a244 <tcp_free>
 800a6e4:	e082      	b.n	800a7ec <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6f2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a700:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	7d1b      	ldrb	r3, [r3, #20]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d126      	bne.n	800a75e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	8adb      	ldrh	r3, [r3, #22]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d02e      	beq.n	800a776 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a718:	4b3b      	ldr	r3, [pc, #236]	; (800a808 <tcp_abandon+0x170>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d105      	bne.n	800a72e <tcp_abandon+0x96>
 800a722:	4b39      	ldr	r3, [pc, #228]	; (800a808 <tcp_abandon+0x170>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	4a37      	ldr	r2, [pc, #220]	; (800a808 <tcp_abandon+0x170>)
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	e013      	b.n	800a756 <tcp_abandon+0xbe>
 800a72e:	4b36      	ldr	r3, [pc, #216]	; (800a808 <tcp_abandon+0x170>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	61fb      	str	r3, [r7, #28]
 800a734:	e00c      	b.n	800a750 <tcp_abandon+0xb8>
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d104      	bne.n	800a74a <tcp_abandon+0xb2>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68da      	ldr	r2, [r3, #12]
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	60da      	str	r2, [r3, #12]
 800a748:	e005      	b.n	800a756 <tcp_abandon+0xbe>
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	61fb      	str	r3, [r7, #28]
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1ef      	bne.n	800a736 <tcp_abandon+0x9e>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	60da      	str	r2, [r3, #12]
 800a75c:	e00b      	b.n	800a776 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	8adb      	ldrh	r3, [r3, #22]
 800a766:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a768:	6879      	ldr	r1, [r7, #4]
 800a76a:	4828      	ldr	r0, [pc, #160]	; (800a80c <tcp_abandon+0x174>)
 800a76c:	f000 ff7a 	bl	800b664 <tcp_pcb_remove>
 800a770:	4b27      	ldr	r3, [pc, #156]	; (800a810 <tcp_abandon+0x178>)
 800a772:	2201      	movs	r2, #1
 800a774:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d004      	beq.n	800a788 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a782:	4618      	mov	r0, r3
 800a784:	f000 fd1c 	bl	800b1c0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d004      	beq.n	800a79a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a794:	4618      	mov	r0, r3
 800a796:	f000 fd13 	bl	800b1c0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d004      	beq.n	800a7ac <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 fd0a 	bl	800b1c0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00e      	beq.n	800a7d0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a7b2:	6879      	ldr	r1, [r7, #4]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	8b12      	ldrh	r2, [r2, #24]
 800a7bc:	9202      	str	r2, [sp, #8]
 800a7be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a7c0:	9201      	str	r2, [sp, #4]
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	697a      	ldr	r2, [r7, #20]
 800a7c8:	69b9      	ldr	r1, [r7, #24]
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f004 fcc2 	bl	800f154 <tcp_rst>
    }
    last_state = pcb->state;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	7d1b      	ldrb	r3, [r3, #20]
 800a7d4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f7ff fd34 	bl	800a244 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d004      	beq.n	800a7ec <tcp_abandon+0x154>
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	f06f 010c 	mvn.w	r1, #12
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	4798      	blx	r3
  }
}
 800a7ec:	3728      	adds	r7, #40	; 0x28
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	080146d8 	.word	0x080146d8
 800a7f8:	0801481c 	.word	0x0801481c
 800a7fc:	0801471c 	.word	0x0801471c
 800a800:	08014838 	.word	0x08014838
 800a804:	2400bd00 	.word	0x2400bd00
 800a808:	2400bcf4 	.word	0x2400bcf4
 800a80c:	2400bcfc 	.word	0x2400bcfc
 800a810:	2400bd04 	.word	0x2400bd04

0800a814 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a81c:	2101      	movs	r1, #1
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7ff ff3a 	bl	800a698 <tcp_abandon>
}
 800a824:	bf00      	nop
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d106      	bne.n	800a848 <tcp_update_rcv_ann_wnd+0x1c>
 800a83a:	4b25      	ldr	r3, [pc, #148]	; (800a8d0 <tcp_update_rcv_ann_wnd+0xa4>)
 800a83c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a840:	4924      	ldr	r1, [pc, #144]	; (800a8d4 <tcp_update_rcv_ann_wnd+0xa8>)
 800a842:	4825      	ldr	r0, [pc, #148]	; (800a8d8 <tcp_update_rcv_ann_wnd+0xac>)
 800a844:	f008 f9aa 	bl	8012b9c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a850:	4413      	add	r3, r2
 800a852:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a85c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a860:	bf28      	it	cs
 800a862:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a866:	b292      	uxth	r2, r2
 800a868:	4413      	add	r3, r2
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	1ad3      	subs	r3, r2, r3
 800a86e:	2b00      	cmp	r3, #0
 800a870:	db08      	blt.n	800a884 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	1ad3      	subs	r3, r2, r3
 800a882:	e020      	b.n	800a8c6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	dd03      	ble.n	800a89a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a898:	e014      	b.n	800a8c4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ac:	d306      	bcc.n	800a8bc <tcp_update_rcv_ann_wnd+0x90>
 800a8ae:	4b08      	ldr	r3, [pc, #32]	; (800a8d0 <tcp_update_rcv_ann_wnd+0xa4>)
 800a8b0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a8b4:	4909      	ldr	r1, [pc, #36]	; (800a8dc <tcp_update_rcv_ann_wnd+0xb0>)
 800a8b6:	4808      	ldr	r0, [pc, #32]	; (800a8d8 <tcp_update_rcv_ann_wnd+0xac>)
 800a8b8:	f008 f970 	bl	8012b9c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a8c4:	2300      	movs	r3, #0
  }
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	080146d8 	.word	0x080146d8
 800a8d4:	08014934 	.word	0x08014934
 800a8d8:	0801471c 	.word	0x0801471c
 800a8dc:	08014958 	.word	0x08014958

0800a8e0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d107      	bne.n	800a902 <tcp_recved+0x22>
 800a8f2:	4b1f      	ldr	r3, [pc, #124]	; (800a970 <tcp_recved+0x90>)
 800a8f4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a8f8:	491e      	ldr	r1, [pc, #120]	; (800a974 <tcp_recved+0x94>)
 800a8fa:	481f      	ldr	r0, [pc, #124]	; (800a978 <tcp_recved+0x98>)
 800a8fc:	f008 f94e 	bl	8012b9c <iprintf>
 800a900:	e032      	b.n	800a968 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	7d1b      	ldrb	r3, [r3, #20]
 800a906:	2b01      	cmp	r3, #1
 800a908:	d106      	bne.n	800a918 <tcp_recved+0x38>
 800a90a:	4b19      	ldr	r3, [pc, #100]	; (800a970 <tcp_recved+0x90>)
 800a90c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a910:	491a      	ldr	r1, [pc, #104]	; (800a97c <tcp_recved+0x9c>)
 800a912:	4819      	ldr	r0, [pc, #100]	; (800a978 <tcp_recved+0x98>)
 800a914:	f008 f942 	bl	8012b9c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a91c:	887b      	ldrh	r3, [r7, #2]
 800a91e:	4413      	add	r3, r2
 800a920:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a922:	89fb      	ldrh	r3, [r7, #14]
 800a924:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a928:	d804      	bhi.n	800a934 <tcp_recved+0x54>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a92e:	89fa      	ldrh	r2, [r7, #14]
 800a930:	429a      	cmp	r2, r3
 800a932:	d204      	bcs.n	800a93e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a93a:	851a      	strh	r2, [r3, #40]	; 0x28
 800a93c:	e002      	b.n	800a944 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	89fa      	ldrh	r2, [r7, #14]
 800a942:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f7ff ff71 	bl	800a82c <tcp_update_rcv_ann_wnd>
 800a94a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a952:	d309      	bcc.n	800a968 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	8b5b      	ldrh	r3, [r3, #26]
 800a958:	f043 0302 	orr.w	r3, r3, #2
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f003 fe42 	bl	800e5ec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	080146d8 	.word	0x080146d8
 800a974:	08014974 	.word	0x08014974
 800a978:	0801471c 	.word	0x0801471c
 800a97c:	0801498c 	.word	0x0801498c

0800a980 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a980:	b5b0      	push	{r4, r5, r7, lr}
 800a982:	b090      	sub	sp, #64	; 0x40
 800a984:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a98c:	4b94      	ldr	r3, [pc, #592]	; (800abe0 <tcp_slowtmr+0x260>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	3301      	adds	r3, #1
 800a992:	4a93      	ldr	r2, [pc, #588]	; (800abe0 <tcp_slowtmr+0x260>)
 800a994:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a996:	4b93      	ldr	r3, [pc, #588]	; (800abe4 <tcp_slowtmr+0x264>)
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	3301      	adds	r3, #1
 800a99c:	b2da      	uxtb	r2, r3
 800a99e:	4b91      	ldr	r3, [pc, #580]	; (800abe4 <tcp_slowtmr+0x264>)
 800a9a0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a9a6:	4b90      	ldr	r3, [pc, #576]	; (800abe8 <tcp_slowtmr+0x268>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a9ac:	e29d      	b.n	800aeea <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b0:	7d1b      	ldrb	r3, [r3, #20]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d106      	bne.n	800a9c4 <tcp_slowtmr+0x44>
 800a9b6:	4b8d      	ldr	r3, [pc, #564]	; (800abec <tcp_slowtmr+0x26c>)
 800a9b8:	f240 42be 	movw	r2, #1214	; 0x4be
 800a9bc:	498c      	ldr	r1, [pc, #560]	; (800abf0 <tcp_slowtmr+0x270>)
 800a9be:	488d      	ldr	r0, [pc, #564]	; (800abf4 <tcp_slowtmr+0x274>)
 800a9c0:	f008 f8ec 	bl	8012b9c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c6:	7d1b      	ldrb	r3, [r3, #20]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d106      	bne.n	800a9da <tcp_slowtmr+0x5a>
 800a9cc:	4b87      	ldr	r3, [pc, #540]	; (800abec <tcp_slowtmr+0x26c>)
 800a9ce:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a9d2:	4989      	ldr	r1, [pc, #548]	; (800abf8 <tcp_slowtmr+0x278>)
 800a9d4:	4887      	ldr	r0, [pc, #540]	; (800abf4 <tcp_slowtmr+0x274>)
 800a9d6:	f008 f8e1 	bl	8012b9c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9dc:	7d1b      	ldrb	r3, [r3, #20]
 800a9de:	2b0a      	cmp	r3, #10
 800a9e0:	d106      	bne.n	800a9f0 <tcp_slowtmr+0x70>
 800a9e2:	4b82      	ldr	r3, [pc, #520]	; (800abec <tcp_slowtmr+0x26c>)
 800a9e4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a9e8:	4984      	ldr	r1, [pc, #528]	; (800abfc <tcp_slowtmr+0x27c>)
 800a9ea:	4882      	ldr	r0, [pc, #520]	; (800abf4 <tcp_slowtmr+0x274>)
 800a9ec:	f008 f8d6 	bl	8012b9c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f2:	7f9a      	ldrb	r2, [r3, #30]
 800a9f4:	4b7b      	ldr	r3, [pc, #492]	; (800abe4 <tcp_slowtmr+0x264>)
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d105      	bne.n	800aa08 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800aa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800aa06:	e270      	b.n	800aeea <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800aa08:	4b76      	ldr	r3, [pc, #472]	; (800abe4 <tcp_slowtmr+0x264>)
 800aa0a:	781a      	ldrb	r2, [r3, #0]
 800aa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800aa1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1e:	7d1b      	ldrb	r3, [r3, #20]
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d10a      	bne.n	800aa3a <tcp_slowtmr+0xba>
 800aa24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aa2a:	2b05      	cmp	r3, #5
 800aa2c:	d905      	bls.n	800aa3a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800aa2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa32:	3301      	adds	r3, #1
 800aa34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa38:	e11e      	b.n	800ac78 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800aa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aa40:	2b0b      	cmp	r3, #11
 800aa42:	d905      	bls.n	800aa50 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800aa44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa48:	3301      	adds	r3, #1
 800aa4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa4e:	e113      	b.n	800ac78 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800aa50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa52:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d075      	beq.n	800ab46 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800aa5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d006      	beq.n	800aa70 <tcp_slowtmr+0xf0>
 800aa62:	4b62      	ldr	r3, [pc, #392]	; (800abec <tcp_slowtmr+0x26c>)
 800aa64:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800aa68:	4965      	ldr	r1, [pc, #404]	; (800ac00 <tcp_slowtmr+0x280>)
 800aa6a:	4862      	ldr	r0, [pc, #392]	; (800abf4 <tcp_slowtmr+0x274>)
 800aa6c:	f008 f896 	bl	8012b9c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800aa70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d106      	bne.n	800aa86 <tcp_slowtmr+0x106>
 800aa78:	4b5c      	ldr	r3, [pc, #368]	; (800abec <tcp_slowtmr+0x26c>)
 800aa7a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800aa7e:	4961      	ldr	r1, [pc, #388]	; (800ac04 <tcp_slowtmr+0x284>)
 800aa80:	485c      	ldr	r0, [pc, #368]	; (800abf4 <tcp_slowtmr+0x274>)
 800aa82:	f008 f88b 	bl	8012b9c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800aa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa88:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800aa8c:	2b0b      	cmp	r3, #11
 800aa8e:	d905      	bls.n	800aa9c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800aa90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa94:	3301      	adds	r3, #1
 800aa96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa9a:	e0ed      	b.n	800ac78 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800aa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	4a58      	ldr	r2, [pc, #352]	; (800ac08 <tcp_slowtmr+0x288>)
 800aaa6:	5cd3      	ldrb	r3, [r2, r3]
 800aaa8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800aab0:	7c7a      	ldrb	r2, [r7, #17]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d907      	bls.n	800aac6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800aabc:	3301      	adds	r3, #1
 800aabe:	b2da      	uxtb	r2, r3
 800aac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800aac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800aacc:	7c7a      	ldrb	r2, [r7, #17]
 800aace:	429a      	cmp	r2, r3
 800aad0:	f200 80d2 	bhi.w	800ac78 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800aad4:	2301      	movs	r3, #1
 800aad6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800aad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aada:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d108      	bne.n	800aaf4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800aae2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aae4:	f004 fc2a 	bl	800f33c <tcp_zero_window_probe>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d014      	beq.n	800ab18 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800aaee:	2300      	movs	r3, #0
 800aaf0:	623b      	str	r3, [r7, #32]
 800aaf2:	e011      	b.n	800ab18 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800aaf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aafa:	4619      	mov	r1, r3
 800aafc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aafe:	f003 faef 	bl	800e0e0 <tcp_split_unsent_seg>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d107      	bne.n	800ab18 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ab08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab0a:	f003 fd6f 	bl	800e5ec <tcp_output>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d101      	bne.n	800ab18 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ab14:	2300      	movs	r3, #0
 800ab16:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ab18:	6a3b      	ldr	r3, [r7, #32]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f000 80ac 	beq.w	800ac78 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ab20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab22:	2200      	movs	r2, #0
 800ab24:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ab28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ab2e:	2b06      	cmp	r3, #6
 800ab30:	f200 80a2 	bhi.w	800ac78 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ab34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab36:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab40:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ab44:	e098      	b.n	800ac78 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ab46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	db0f      	blt.n	800ab70 <tcp_slowtmr+0x1f0>
 800ab50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab52:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ab56:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d008      	beq.n	800ab70 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ab5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	3301      	adds	r3, #1
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	b21a      	sxth	r2, r3
 800ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ab70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab72:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ab76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab78:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	db7b      	blt.n	800ac78 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ab80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab82:	f004 f827 	bl	800ebd4 <tcp_rexmit_rto_prepare>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d007      	beq.n	800ab9c <tcp_slowtmr+0x21c>
 800ab8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d171      	bne.n	800ac78 <tcp_slowtmr+0x2f8>
 800ab94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d06d      	beq.n	800ac78 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ab9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9e:	7d1b      	ldrb	r3, [r3, #20]
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d03a      	beq.n	800ac1a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800aba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800abaa:	2b0c      	cmp	r3, #12
 800abac:	bf28      	it	cs
 800abae:	230c      	movcs	r3, #12
 800abb0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800abb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800abb8:	10db      	asrs	r3, r3, #3
 800abba:	b21b      	sxth	r3, r3
 800abbc:	461a      	mov	r2, r3
 800abbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800abc4:	4413      	add	r3, r2
 800abc6:	7efa      	ldrb	r2, [r7, #27]
 800abc8:	4910      	ldr	r1, [pc, #64]	; (800ac0c <tcp_slowtmr+0x28c>)
 800abca:	5c8a      	ldrb	r2, [r1, r2]
 800abcc:	4093      	lsls	r3, r2
 800abce:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800abd6:	4293      	cmp	r3, r2
 800abd8:	dc1a      	bgt.n	800ac10 <tcp_slowtmr+0x290>
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	b21a      	sxth	r2, r3
 800abde:	e019      	b.n	800ac14 <tcp_slowtmr+0x294>
 800abe0:	2400bcf0 	.word	0x2400bcf0
 800abe4:	2400bd06 	.word	0x2400bd06
 800abe8:	2400bcfc 	.word	0x2400bcfc
 800abec:	080146d8 	.word	0x080146d8
 800abf0:	08014a1c 	.word	0x08014a1c
 800abf4:	0801471c 	.word	0x0801471c
 800abf8:	08014a48 	.word	0x08014a48
 800abfc:	08014a74 	.word	0x08014a74
 800ac00:	08014aa4 	.word	0x08014aa4
 800ac04:	08014ad8 	.word	0x08014ad8
 800ac08:	080166e8 	.word	0x080166e8
 800ac0c:	080166d8 	.word	0x080166d8
 800ac10:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ac14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ac1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ac20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ac26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	bf28      	it	cs
 800ac30:	4613      	movcs	r3, r2
 800ac32:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ac34:	8a7b      	ldrh	r3, [r7, #18]
 800ac36:	085b      	lsrs	r3, r3, #1
 800ac38:	b29a      	uxth	r2, r3
 800ac3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac42:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ac46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac4a:	005b      	lsls	r3, r3, #1
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d206      	bcs.n	800ac60 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ac52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac56:	005b      	lsls	r3, r3, #1
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ac60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac62:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ac64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ac6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ac72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac74:	f004 f81e 	bl	800ecb4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ac78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7a:	7d1b      	ldrb	r3, [r3, #20]
 800ac7c:	2b06      	cmp	r3, #6
 800ac7e:	d111      	bne.n	800aca4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ac80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac82:	8b5b      	ldrh	r3, [r3, #26]
 800ac84:	f003 0310 	and.w	r3, r3, #16
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00b      	beq.n	800aca4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac8c:	4b9c      	ldr	r3, [pc, #624]	; (800af00 <tcp_slowtmr+0x580>)
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	2b28      	cmp	r3, #40	; 0x28
 800ac98:	d904      	bls.n	800aca4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ac9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac9e:	3301      	adds	r3, #1
 800aca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800aca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca6:	7a5b      	ldrb	r3, [r3, #9]
 800aca8:	f003 0308 	and.w	r3, r3, #8
 800acac:	2b00      	cmp	r3, #0
 800acae:	d04a      	beq.n	800ad46 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800acb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800acb4:	2b04      	cmp	r3, #4
 800acb6:	d003      	beq.n	800acc0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800acb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acba:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800acbc:	2b07      	cmp	r3, #7
 800acbe:	d142      	bne.n	800ad46 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800acc0:	4b8f      	ldr	r3, [pc, #572]	; (800af00 <tcp_slowtmr+0x580>)
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc6:	6a1b      	ldr	r3, [r3, #32]
 800acc8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800acca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800accc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800acd0:	4b8c      	ldr	r3, [pc, #560]	; (800af04 <tcp_slowtmr+0x584>)
 800acd2:	440b      	add	r3, r1
 800acd4:	498c      	ldr	r1, [pc, #560]	; (800af08 <tcp_slowtmr+0x588>)
 800acd6:	fba1 1303 	umull	r1, r3, r1, r3
 800acda:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800acdc:	429a      	cmp	r2, r3
 800acde:	d90a      	bls.n	800acf6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ace0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ace4:	3301      	adds	r3, #1
 800ace6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800acea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800acee:	3301      	adds	r3, #1
 800acf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800acf4:	e027      	b.n	800ad46 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800acf6:	4b82      	ldr	r3, [pc, #520]	; (800af00 <tcp_slowtmr+0x580>)
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ad00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad02:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ad06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad08:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	4b7f      	ldr	r3, [pc, #508]	; (800af0c <tcp_slowtmr+0x58c>)
 800ad10:	fb00 f303 	mul.w	r3, r0, r3
 800ad14:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ad16:	497c      	ldr	r1, [pc, #496]	; (800af08 <tcp_slowtmr+0x588>)
 800ad18:	fba1 1303 	umull	r1, r3, r1, r3
 800ad1c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d911      	bls.n	800ad46 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800ad22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad24:	f004 faca 	bl	800f2bc <tcp_keepalive>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ad2e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d107      	bne.n	800ad46 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800ad36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad38:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad42:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ad46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d011      	beq.n	800ad72 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ad4e:	4b6c      	ldr	r3, [pc, #432]	; (800af00 <tcp_slowtmr+0x580>)
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad54:	6a1b      	ldr	r3, [r3, #32]
 800ad56:	1ad2      	subs	r2, r2, r3
 800ad58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ad5e:	4619      	mov	r1, r3
 800ad60:	460b      	mov	r3, r1
 800ad62:	005b      	lsls	r3, r3, #1
 800ad64:	440b      	add	r3, r1
 800ad66:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d302      	bcc.n	800ad72 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ad6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad6e:	f000 fddd 	bl	800b92c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ad72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad74:	7d1b      	ldrb	r3, [r3, #20]
 800ad76:	2b03      	cmp	r3, #3
 800ad78:	d10b      	bne.n	800ad92 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ad7a:	4b61      	ldr	r3, [pc, #388]	; (800af00 <tcp_slowtmr+0x580>)
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad80:	6a1b      	ldr	r3, [r3, #32]
 800ad82:	1ad3      	subs	r3, r2, r3
 800ad84:	2b28      	cmp	r3, #40	; 0x28
 800ad86:	d904      	bls.n	800ad92 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ad88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ad92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad94:	7d1b      	ldrb	r3, [r3, #20]
 800ad96:	2b09      	cmp	r3, #9
 800ad98:	d10b      	bne.n	800adb2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ad9a:	4b59      	ldr	r3, [pc, #356]	; (800af00 <tcp_slowtmr+0x580>)
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada0:	6a1b      	ldr	r3, [r3, #32]
 800ada2:	1ad3      	subs	r3, r2, r3
 800ada4:	2bf0      	cmp	r3, #240	; 0xf0
 800ada6:	d904      	bls.n	800adb2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800ada8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adac:	3301      	adds	r3, #1
 800adae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800adb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d060      	beq.n	800ae7c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800adba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adc0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800adc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adc4:	f000 fbfe 	bl	800b5c4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800adc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d010      	beq.n	800adf0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800adce:	4b50      	ldr	r3, [pc, #320]	; (800af10 <tcp_slowtmr+0x590>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800add4:	429a      	cmp	r2, r3
 800add6:	d106      	bne.n	800ade6 <tcp_slowtmr+0x466>
 800add8:	4b4e      	ldr	r3, [pc, #312]	; (800af14 <tcp_slowtmr+0x594>)
 800adda:	f240 526d 	movw	r2, #1389	; 0x56d
 800adde:	494e      	ldr	r1, [pc, #312]	; (800af18 <tcp_slowtmr+0x598>)
 800ade0:	484e      	ldr	r0, [pc, #312]	; (800af1c <tcp_slowtmr+0x59c>)
 800ade2:	f007 fedb 	bl	8012b9c <iprintf>
        prev->next = pcb->next;
 800ade6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade8:	68da      	ldr	r2, [r3, #12]
 800adea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adec:	60da      	str	r2, [r3, #12]
 800adee:	e00f      	b.n	800ae10 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800adf0:	4b47      	ldr	r3, [pc, #284]	; (800af10 <tcp_slowtmr+0x590>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d006      	beq.n	800ae08 <tcp_slowtmr+0x488>
 800adfa:	4b46      	ldr	r3, [pc, #280]	; (800af14 <tcp_slowtmr+0x594>)
 800adfc:	f240 5271 	movw	r2, #1393	; 0x571
 800ae00:	4947      	ldr	r1, [pc, #284]	; (800af20 <tcp_slowtmr+0x5a0>)
 800ae02:	4846      	ldr	r0, [pc, #280]	; (800af1c <tcp_slowtmr+0x59c>)
 800ae04:	f007 feca 	bl	8012b9c <iprintf>
        tcp_active_pcbs = pcb->next;
 800ae08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	4a40      	ldr	r2, [pc, #256]	; (800af10 <tcp_slowtmr+0x590>)
 800ae0e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ae10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d013      	beq.n	800ae40 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ae18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae1a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ae1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae1e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ae20:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ae22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae24:	3304      	adds	r3, #4
 800ae26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae28:	8ad2      	ldrh	r2, [r2, #22]
 800ae2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae2c:	8b09      	ldrh	r1, [r1, #24]
 800ae2e:	9102      	str	r1, [sp, #8]
 800ae30:	9201      	str	r2, [sp, #4]
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	462b      	mov	r3, r5
 800ae36:	4622      	mov	r2, r4
 800ae38:	4601      	mov	r1, r0
 800ae3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae3c:	f004 f98a 	bl	800f154 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ae40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae42:	691b      	ldr	r3, [r3, #16]
 800ae44:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ae46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae48:	7d1b      	ldrb	r3, [r3, #20]
 800ae4a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ae4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ae50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ae56:	6838      	ldr	r0, [r7, #0]
 800ae58:	f7ff f9f4 	bl	800a244 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ae5c:	4b31      	ldr	r3, [pc, #196]	; (800af24 <tcp_slowtmr+0x5a4>)
 800ae5e:	2200      	movs	r2, #0
 800ae60:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d004      	beq.n	800ae72 <tcp_slowtmr+0x4f2>
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f06f 010c 	mvn.w	r1, #12
 800ae6e:	68b8      	ldr	r0, [r7, #8]
 800ae70:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ae72:	4b2c      	ldr	r3, [pc, #176]	; (800af24 <tcp_slowtmr+0x5a4>)
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d037      	beq.n	800aeea <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ae7a:	e592      	b.n	800a9a2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ae7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ae80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	7f1b      	ldrb	r3, [r3, #28]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	b2da      	uxtb	r2, r3
 800ae8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae90:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ae92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae94:	7f1a      	ldrb	r2, [r3, #28]
 800ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae98:	7f5b      	ldrb	r3, [r3, #29]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d325      	bcc.n	800aeea <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ae9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea0:	2200      	movs	r2, #0
 800aea2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800aea4:	4b1f      	ldr	r3, [pc, #124]	; (800af24 <tcp_slowtmr+0x5a4>)
 800aea6:	2200      	movs	r2, #0
 800aea8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800aeaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00b      	beq.n	800aecc <tcp_slowtmr+0x54c>
 800aeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aebc:	6912      	ldr	r2, [r2, #16]
 800aebe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aec0:	4610      	mov	r0, r2
 800aec2:	4798      	blx	r3
 800aec4:	4603      	mov	r3, r0
 800aec6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800aeca:	e002      	b.n	800aed2 <tcp_slowtmr+0x552>
 800aecc:	2300      	movs	r3, #0
 800aece:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800aed2:	4b14      	ldr	r3, [pc, #80]	; (800af24 <tcp_slowtmr+0x5a4>)
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d000      	beq.n	800aedc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800aeda:	e562      	b.n	800a9a2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800aedc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d102      	bne.n	800aeea <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800aee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aee6:	f003 fb81 	bl	800e5ec <tcp_output>
  while (pcb != NULL) {
 800aeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f47f ad5e 	bne.w	800a9ae <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800aef2:	2300      	movs	r3, #0
 800aef4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800aef6:	4b0c      	ldr	r3, [pc, #48]	; (800af28 <tcp_slowtmr+0x5a8>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800aefc:	e069      	b.n	800afd2 <tcp_slowtmr+0x652>
 800aefe:	bf00      	nop
 800af00:	2400bcf0 	.word	0x2400bcf0
 800af04:	000a4cb8 	.word	0x000a4cb8
 800af08:	10624dd3 	.word	0x10624dd3
 800af0c:	000124f8 	.word	0x000124f8
 800af10:	2400bcfc 	.word	0x2400bcfc
 800af14:	080146d8 	.word	0x080146d8
 800af18:	08014b10 	.word	0x08014b10
 800af1c:	0801471c 	.word	0x0801471c
 800af20:	08014b3c 	.word	0x08014b3c
 800af24:	2400bd04 	.word	0x2400bd04
 800af28:	2400bd00 	.word	0x2400bd00
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800af2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2e:	7d1b      	ldrb	r3, [r3, #20]
 800af30:	2b0a      	cmp	r3, #10
 800af32:	d006      	beq.n	800af42 <tcp_slowtmr+0x5c2>
 800af34:	4b2b      	ldr	r3, [pc, #172]	; (800afe4 <tcp_slowtmr+0x664>)
 800af36:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800af3a:	492b      	ldr	r1, [pc, #172]	; (800afe8 <tcp_slowtmr+0x668>)
 800af3c:	482b      	ldr	r0, [pc, #172]	; (800afec <tcp_slowtmr+0x66c>)
 800af3e:	f007 fe2d 	bl	8012b9c <iprintf>
    pcb_remove = 0;
 800af42:	2300      	movs	r3, #0
 800af44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800af48:	4b29      	ldr	r3, [pc, #164]	; (800aff0 <tcp_slowtmr+0x670>)
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4e:	6a1b      	ldr	r3, [r3, #32]
 800af50:	1ad3      	subs	r3, r2, r3
 800af52:	2bf0      	cmp	r3, #240	; 0xf0
 800af54:	d904      	bls.n	800af60 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800af56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af5a:	3301      	adds	r3, #1
 800af5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800af60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af64:	2b00      	cmp	r3, #0
 800af66:	d02f      	beq.n	800afc8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800af68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af6a:	f000 fb2b 	bl	800b5c4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800af6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af70:	2b00      	cmp	r3, #0
 800af72:	d010      	beq.n	800af96 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800af74:	4b1f      	ldr	r3, [pc, #124]	; (800aff4 <tcp_slowtmr+0x674>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d106      	bne.n	800af8c <tcp_slowtmr+0x60c>
 800af7e:	4b19      	ldr	r3, [pc, #100]	; (800afe4 <tcp_slowtmr+0x664>)
 800af80:	f240 52af 	movw	r2, #1455	; 0x5af
 800af84:	491c      	ldr	r1, [pc, #112]	; (800aff8 <tcp_slowtmr+0x678>)
 800af86:	4819      	ldr	r0, [pc, #100]	; (800afec <tcp_slowtmr+0x66c>)
 800af88:	f007 fe08 	bl	8012b9c <iprintf>
        prev->next = pcb->next;
 800af8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8e:	68da      	ldr	r2, [r3, #12]
 800af90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af92:	60da      	str	r2, [r3, #12]
 800af94:	e00f      	b.n	800afb6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800af96:	4b17      	ldr	r3, [pc, #92]	; (800aff4 <tcp_slowtmr+0x674>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d006      	beq.n	800afae <tcp_slowtmr+0x62e>
 800afa0:	4b10      	ldr	r3, [pc, #64]	; (800afe4 <tcp_slowtmr+0x664>)
 800afa2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800afa6:	4915      	ldr	r1, [pc, #84]	; (800affc <tcp_slowtmr+0x67c>)
 800afa8:	4810      	ldr	r0, [pc, #64]	; (800afec <tcp_slowtmr+0x66c>)
 800afaa:	f007 fdf7 	bl	8012b9c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800afae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	4a10      	ldr	r2, [pc, #64]	; (800aff4 <tcp_slowtmr+0x674>)
 800afb4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800afb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800afba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800afc0:	69f8      	ldr	r0, [r7, #28]
 800afc2:	f7ff f93f 	bl	800a244 <tcp_free>
 800afc6:	e004      	b.n	800afd2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800afc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800afcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800afd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d1a9      	bne.n	800af2c <tcp_slowtmr+0x5ac>
    }
  }
}
 800afd8:	bf00      	nop
 800afda:	bf00      	nop
 800afdc:	3730      	adds	r7, #48	; 0x30
 800afde:	46bd      	mov	sp, r7
 800afe0:	bdb0      	pop	{r4, r5, r7, pc}
 800afe2:	bf00      	nop
 800afe4:	080146d8 	.word	0x080146d8
 800afe8:	08014b68 	.word	0x08014b68
 800afec:	0801471c 	.word	0x0801471c
 800aff0:	2400bcf0 	.word	0x2400bcf0
 800aff4:	2400bd00 	.word	0x2400bd00
 800aff8:	08014b98 	.word	0x08014b98
 800affc:	08014bc0 	.word	0x08014bc0

0800b000 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b006:	4b2d      	ldr	r3, [pc, #180]	; (800b0bc <tcp_fasttmr+0xbc>)
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	3301      	adds	r3, #1
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	4b2b      	ldr	r3, [pc, #172]	; (800b0bc <tcp_fasttmr+0xbc>)
 800b010:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b012:	4b2b      	ldr	r3, [pc, #172]	; (800b0c0 <tcp_fasttmr+0xc0>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b018:	e048      	b.n	800b0ac <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	7f9a      	ldrb	r2, [r3, #30]
 800b01e:	4b27      	ldr	r3, [pc, #156]	; (800b0bc <tcp_fasttmr+0xbc>)
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	429a      	cmp	r2, r3
 800b024:	d03f      	beq.n	800b0a6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b026:	4b25      	ldr	r3, [pc, #148]	; (800b0bc <tcp_fasttmr+0xbc>)
 800b028:	781a      	ldrb	r2, [r3, #0]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	8b5b      	ldrh	r3, [r3, #26]
 800b032:	f003 0301 	and.w	r3, r3, #1
 800b036:	2b00      	cmp	r3, #0
 800b038:	d010      	beq.n	800b05c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	8b5b      	ldrh	r3, [r3, #26]
 800b03e:	f043 0302 	orr.w	r3, r3, #2
 800b042:	b29a      	uxth	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f003 facf 	bl	800e5ec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	8b5b      	ldrh	r3, [r3, #26]
 800b052:	f023 0303 	bic.w	r3, r3, #3
 800b056:	b29a      	uxth	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	8b5b      	ldrh	r3, [r3, #26]
 800b060:	f003 0308 	and.w	r3, r3, #8
 800b064:	2b00      	cmp	r3, #0
 800b066:	d009      	beq.n	800b07c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	8b5b      	ldrh	r3, [r3, #26]
 800b06c:	f023 0308 	bic.w	r3, r3, #8
 800b070:	b29a      	uxth	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f7ff fa78 	bl	800a56c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00a      	beq.n	800b0a0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b08a:	4b0e      	ldr	r3, [pc, #56]	; (800b0c4 <tcp_fasttmr+0xc4>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 f819 	bl	800b0c8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b096:	4b0b      	ldr	r3, [pc, #44]	; (800b0c4 <tcp_fasttmr+0xc4>)
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d000      	beq.n	800b0a0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b09e:	e7b8      	b.n	800b012 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	607b      	str	r3, [r7, #4]
 800b0a4:	e002      	b.n	800b0ac <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1b3      	bne.n	800b01a <tcp_fasttmr+0x1a>
    }
  }
}
 800b0b2:	bf00      	nop
 800b0b4:	bf00      	nop
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	2400bd06 	.word	0x2400bd06
 800b0c0:	2400bcfc 	.word	0x2400bcfc
 800b0c4:	2400bd04 	.word	0x2400bd04

0800b0c8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b0c8:	b590      	push	{r4, r7, lr}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d109      	bne.n	800b0ea <tcp_process_refused_data+0x22>
 800b0d6:	4b37      	ldr	r3, [pc, #220]	; (800b1b4 <tcp_process_refused_data+0xec>)
 800b0d8:	f240 6209 	movw	r2, #1545	; 0x609
 800b0dc:	4936      	ldr	r1, [pc, #216]	; (800b1b8 <tcp_process_refused_data+0xf0>)
 800b0de:	4837      	ldr	r0, [pc, #220]	; (800b1bc <tcp_process_refused_data+0xf4>)
 800b0e0:	f007 fd5c 	bl	8012b9c <iprintf>
 800b0e4:	f06f 030f 	mvn.w	r3, #15
 800b0e8:	e060      	b.n	800b1ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0ee:	7b5b      	ldrb	r3, [r3, #13]
 800b0f0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0f6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00b      	beq.n	800b120 <tcp_process_refused_data+0x58>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6918      	ldr	r0, [r3, #16]
 800b112:	2300      	movs	r3, #0
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	6879      	ldr	r1, [r7, #4]
 800b118:	47a0      	blx	r4
 800b11a:	4603      	mov	r3, r0
 800b11c:	73fb      	strb	r3, [r7, #15]
 800b11e:	e007      	b.n	800b130 <tcp_process_refused_data+0x68>
 800b120:	2300      	movs	r3, #0
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	6879      	ldr	r1, [r7, #4]
 800b126:	2000      	movs	r0, #0
 800b128:	f000 f8a4 	bl	800b274 <tcp_recv_null>
 800b12c:	4603      	mov	r3, r0
 800b12e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d12a      	bne.n	800b18e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b138:	7bbb      	ldrb	r3, [r7, #14]
 800b13a:	f003 0320 	and.w	r3, r3, #32
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d033      	beq.n	800b1aa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b146:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b14a:	d005      	beq.n	800b158 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b150:	3301      	adds	r3, #1
 800b152:	b29a      	uxth	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00b      	beq.n	800b17a <tcp_process_refused_data+0xb2>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6918      	ldr	r0, [r3, #16]
 800b16c:	2300      	movs	r3, #0
 800b16e:	2200      	movs	r2, #0
 800b170:	6879      	ldr	r1, [r7, #4]
 800b172:	47a0      	blx	r4
 800b174:	4603      	mov	r3, r0
 800b176:	73fb      	strb	r3, [r7, #15]
 800b178:	e001      	b.n	800b17e <tcp_process_refused_data+0xb6>
 800b17a:	2300      	movs	r3, #0
 800b17c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b17e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b182:	f113 0f0d 	cmn.w	r3, #13
 800b186:	d110      	bne.n	800b1aa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b188:	f06f 030c 	mvn.w	r3, #12
 800b18c:	e00e      	b.n	800b1ac <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b18e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b192:	f113 0f0d 	cmn.w	r3, #13
 800b196:	d102      	bne.n	800b19e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b198:	f06f 030c 	mvn.w	r3, #12
 800b19c:	e006      	b.n	800b1ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b1a4:	f06f 0304 	mvn.w	r3, #4
 800b1a8:	e000      	b.n	800b1ac <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3714      	adds	r7, #20
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd90      	pop	{r4, r7, pc}
 800b1b4:	080146d8 	.word	0x080146d8
 800b1b8:	08014be8 	.word	0x08014be8
 800b1bc:	0801471c 	.word	0x0801471c

0800b1c0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b1c8:	e007      	b.n	800b1da <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 f80a 	bl	800b1ea <tcp_seg_free>
    seg = next;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d1f4      	bne.n	800b1ca <tcp_segs_free+0xa>
  }
}
 800b1e0:	bf00      	nop
 800b1e2:	bf00      	nop
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b082      	sub	sp, #8
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00c      	beq.n	800b212 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d004      	beq.n	800b20a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	4618      	mov	r0, r3
 800b206:	f7fe fd61 	bl	8009ccc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b20a:	6879      	ldr	r1, [r7, #4]
 800b20c:	2003      	movs	r0, #3
 800b20e:	f7fd febb 	bl	8008f88 <memp_free>
  }
}
 800b212:	bf00      	nop
 800b214:	3708      	adds	r7, #8
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
	...

0800b21c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d106      	bne.n	800b238 <tcp_seg_copy+0x1c>
 800b22a:	4b0f      	ldr	r3, [pc, #60]	; (800b268 <tcp_seg_copy+0x4c>)
 800b22c:	f240 6282 	movw	r2, #1666	; 0x682
 800b230:	490e      	ldr	r1, [pc, #56]	; (800b26c <tcp_seg_copy+0x50>)
 800b232:	480f      	ldr	r0, [pc, #60]	; (800b270 <tcp_seg_copy+0x54>)
 800b234:	f007 fcb2 	bl	8012b9c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b238:	2003      	movs	r0, #3
 800b23a:	f7fd fe2f 	bl	8008e9c <memp_malloc>
 800b23e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d101      	bne.n	800b24a <tcp_seg_copy+0x2e>
    return NULL;
 800b246:	2300      	movs	r3, #0
 800b248:	e00a      	b.n	800b260 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b24a:	2210      	movs	r2, #16
 800b24c:	6879      	ldr	r1, [r7, #4]
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f007 fdd4 	bl	8012dfc <memcpy>
  pbuf_ref(cseg->p);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	4618      	mov	r0, r3
 800b25a:	f7fe fddd 	bl	8009e18 <pbuf_ref>
  return cseg;
 800b25e:	68fb      	ldr	r3, [r7, #12]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	080146d8 	.word	0x080146d8
 800b26c:	08014c2c 	.word	0x08014c2c
 800b270:	0801471c 	.word	0x0801471c

0800b274 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
 800b280:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d109      	bne.n	800b29c <tcp_recv_null+0x28>
 800b288:	4b12      	ldr	r3, [pc, #72]	; (800b2d4 <tcp_recv_null+0x60>)
 800b28a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b28e:	4912      	ldr	r1, [pc, #72]	; (800b2d8 <tcp_recv_null+0x64>)
 800b290:	4812      	ldr	r0, [pc, #72]	; (800b2dc <tcp_recv_null+0x68>)
 800b292:	f007 fc83 	bl	8012b9c <iprintf>
 800b296:	f06f 030f 	mvn.w	r3, #15
 800b29a:	e016      	b.n	800b2ca <tcp_recv_null+0x56>

  if (p != NULL) {
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d009      	beq.n	800b2b6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	891b      	ldrh	r3, [r3, #8]
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	68b8      	ldr	r0, [r7, #8]
 800b2aa:	f7ff fb19 	bl	800a8e0 <tcp_recved>
    pbuf_free(p);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f7fe fd0c 	bl	8009ccc <pbuf_free>
 800b2b4:	e008      	b.n	800b2c8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b2b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d104      	bne.n	800b2c8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b2be:	68b8      	ldr	r0, [r7, #8]
 800b2c0:	f7ff f9be 	bl	800a640 <tcp_close>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	e000      	b.n	800b2ca <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	080146d8 	.word	0x080146d8
 800b2d8:	08014c48 	.word	0x08014c48
 800b2dc:	0801471c 	.word	0x0801471c

0800b2e0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b2ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	db01      	blt.n	800b2f6 <tcp_kill_prio+0x16>
 800b2f2:	79fb      	ldrb	r3, [r7, #7]
 800b2f4:	e000      	b.n	800b2f8 <tcp_kill_prio+0x18>
 800b2f6:	237f      	movs	r3, #127	; 0x7f
 800b2f8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b2fa:	7afb      	ldrb	r3, [r7, #11]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d034      	beq.n	800b36a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b300:	7afb      	ldrb	r3, [r7, #11]
 800b302:	3b01      	subs	r3, #1
 800b304:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b306:	2300      	movs	r3, #0
 800b308:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b30a:	2300      	movs	r3, #0
 800b30c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b30e:	4b19      	ldr	r3, [pc, #100]	; (800b374 <tcp_kill_prio+0x94>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	617b      	str	r3, [r7, #20]
 800b314:	e01f      	b.n	800b356 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	7d5b      	ldrb	r3, [r3, #21]
 800b31a:	7afa      	ldrb	r2, [r7, #11]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d80c      	bhi.n	800b33a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b324:	7afa      	ldrb	r2, [r7, #11]
 800b326:	429a      	cmp	r2, r3
 800b328:	d112      	bne.n	800b350 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b32a:	4b13      	ldr	r3, [pc, #76]	; (800b378 <tcp_kill_prio+0x98>)
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	1ad3      	subs	r3, r2, r3
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	429a      	cmp	r2, r3
 800b338:	d80a      	bhi.n	800b350 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b33a:	4b0f      	ldr	r3, [pc, #60]	; (800b378 <tcp_kill_prio+0x98>)
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	6a1b      	ldr	r3, [r3, #32]
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	7d5b      	ldrb	r3, [r3, #21]
 800b34e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	617b      	str	r3, [r7, #20]
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1dc      	bne.n	800b316 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d004      	beq.n	800b36c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b362:	6938      	ldr	r0, [r7, #16]
 800b364:	f7ff fa56 	bl	800a814 <tcp_abort>
 800b368:	e000      	b.n	800b36c <tcp_kill_prio+0x8c>
    return;
 800b36a:	bf00      	nop
  }
}
 800b36c:	3718      	adds	r7, #24
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	2400bcfc 	.word	0x2400bcfc
 800b378:	2400bcf0 	.word	0x2400bcf0

0800b37c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b386:	79fb      	ldrb	r3, [r7, #7]
 800b388:	2b08      	cmp	r3, #8
 800b38a:	d009      	beq.n	800b3a0 <tcp_kill_state+0x24>
 800b38c:	79fb      	ldrb	r3, [r7, #7]
 800b38e:	2b09      	cmp	r3, #9
 800b390:	d006      	beq.n	800b3a0 <tcp_kill_state+0x24>
 800b392:	4b1a      	ldr	r3, [pc, #104]	; (800b3fc <tcp_kill_state+0x80>)
 800b394:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800b398:	4919      	ldr	r1, [pc, #100]	; (800b400 <tcp_kill_state+0x84>)
 800b39a:	481a      	ldr	r0, [pc, #104]	; (800b404 <tcp_kill_state+0x88>)
 800b39c:	f007 fbfe 	bl	8012b9c <iprintf>

  inactivity = 0;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3a8:	4b17      	ldr	r3, [pc, #92]	; (800b408 <tcp_kill_state+0x8c>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	617b      	str	r3, [r7, #20]
 800b3ae:	e017      	b.n	800b3e0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	7d1b      	ldrb	r3, [r3, #20]
 800b3b4:	79fa      	ldrb	r2, [r7, #7]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d10f      	bne.n	800b3da <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b3ba:	4b14      	ldr	r3, [pc, #80]	; (800b40c <tcp_kill_state+0x90>)
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	1ad3      	subs	r3, r2, r3
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d807      	bhi.n	800b3da <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b3ca:	4b10      	ldr	r3, [pc, #64]	; (800b40c <tcp_kill_state+0x90>)
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	6a1b      	ldr	r3, [r3, #32]
 800b3d2:	1ad3      	subs	r3, r2, r3
 800b3d4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	617b      	str	r3, [r7, #20]
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d1e4      	bne.n	800b3b0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d003      	beq.n	800b3f4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	6938      	ldr	r0, [r7, #16]
 800b3f0:	f7ff f952 	bl	800a698 <tcp_abandon>
  }
}
 800b3f4:	bf00      	nop
 800b3f6:	3718      	adds	r7, #24
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	080146d8 	.word	0x080146d8
 800b400:	08014c64 	.word	0x08014c64
 800b404:	0801471c 	.word	0x0801471c
 800b408:	2400bcfc 	.word	0x2400bcfc
 800b40c:	2400bcf0 	.word	0x2400bcf0

0800b410 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b416:	2300      	movs	r3, #0
 800b418:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b41a:	2300      	movs	r3, #0
 800b41c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b41e:	4b12      	ldr	r3, [pc, #72]	; (800b468 <tcp_kill_timewait+0x58>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	60fb      	str	r3, [r7, #12]
 800b424:	e012      	b.n	800b44c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b426:	4b11      	ldr	r3, [pc, #68]	; (800b46c <tcp_kill_timewait+0x5c>)
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	429a      	cmp	r2, r3
 800b434:	d807      	bhi.n	800b446 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b436:	4b0d      	ldr	r3, [pc, #52]	; (800b46c <tcp_kill_timewait+0x5c>)
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	6a1b      	ldr	r3, [r3, #32]
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	60fb      	str	r3, [r7, #12]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1e9      	bne.n	800b426 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b458:	68b8      	ldr	r0, [r7, #8]
 800b45a:	f7ff f9db 	bl	800a814 <tcp_abort>
  }
}
 800b45e:	bf00      	nop
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	2400bd00 	.word	0x2400bd00
 800b46c:	2400bcf0 	.word	0x2400bcf0

0800b470 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b476:	4b10      	ldr	r3, [pc, #64]	; (800b4b8 <tcp_handle_closepend+0x48>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b47c:	e014      	b.n	800b4a8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	8b5b      	ldrh	r3, [r3, #26]
 800b488:	f003 0308 	and.w	r3, r3, #8
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d009      	beq.n	800b4a4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	8b5b      	ldrh	r3, [r3, #26]
 800b494:	f023 0308 	bic.w	r3, r3, #8
 800b498:	b29a      	uxth	r2, r3
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f7ff f864 	bl	800a56c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d1e7      	bne.n	800b47e <tcp_handle_closepend+0xe>
  }
}
 800b4ae:	bf00      	nop
 800b4b0:	bf00      	nop
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	2400bcfc 	.word	0x2400bcfc

0800b4bc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b4c6:	2001      	movs	r0, #1
 800b4c8:	f7fd fce8 	bl	8008e9c <memp_malloc>
 800b4cc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d126      	bne.n	800b522 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b4d4:	f7ff ffcc 	bl	800b470 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b4d8:	f7ff ff9a 	bl	800b410 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b4dc:	2001      	movs	r0, #1
 800b4de:	f7fd fcdd 	bl	8008e9c <memp_malloc>
 800b4e2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d11b      	bne.n	800b522 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b4ea:	2009      	movs	r0, #9
 800b4ec:	f7ff ff46 	bl	800b37c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b4f0:	2001      	movs	r0, #1
 800b4f2:	f7fd fcd3 	bl	8008e9c <memp_malloc>
 800b4f6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d111      	bne.n	800b522 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b4fe:	2008      	movs	r0, #8
 800b500:	f7ff ff3c 	bl	800b37c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b504:	2001      	movs	r0, #1
 800b506:	f7fd fcc9 	bl	8008e9c <memp_malloc>
 800b50a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d107      	bne.n	800b522 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b512:	79fb      	ldrb	r3, [r7, #7]
 800b514:	4618      	mov	r0, r3
 800b516:	f7ff fee3 	bl	800b2e0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b51a:	2001      	movs	r0, #1
 800b51c:	f7fd fcbe 	bl	8008e9c <memp_malloc>
 800b520:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d03f      	beq.n	800b5a8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b528:	229c      	movs	r2, #156	; 0x9c
 800b52a:	2100      	movs	r1, #0
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f007 fb9a 	bl	8012c66 <memset>
    pcb->prio = prio;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	79fa      	ldrb	r2, [r7, #7]
 800b536:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b53e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b548:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	22ff      	movs	r2, #255	; 0xff
 800b556:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b55e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2206      	movs	r2, #6
 800b564:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2206      	movs	r2, #6
 800b56c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b574:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2201      	movs	r2, #1
 800b57a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b57e:	4b0d      	ldr	r3, [pc, #52]	; (800b5b4 <tcp_alloc+0xf8>)
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b586:	4b0c      	ldr	r3, [pc, #48]	; (800b5b8 <tcp_alloc+0xfc>)
 800b588:	781a      	ldrb	r2, [r3, #0]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b594:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	4a08      	ldr	r2, [pc, #32]	; (800b5bc <tcp_alloc+0x100>)
 800b59c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	4a07      	ldr	r2, [pc, #28]	; (800b5c0 <tcp_alloc+0x104>)
 800b5a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	2400bcf0 	.word	0x2400bcf0
 800b5b8:	2400bd06 	.word	0x2400bd06
 800b5bc:	0800b275 	.word	0x0800b275
 800b5c0:	006ddd00 	.word	0x006ddd00

0800b5c4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d107      	bne.n	800b5e2 <tcp_pcb_purge+0x1e>
 800b5d2:	4b21      	ldr	r3, [pc, #132]	; (800b658 <tcp_pcb_purge+0x94>)
 800b5d4:	f640 0251 	movw	r2, #2129	; 0x851
 800b5d8:	4920      	ldr	r1, [pc, #128]	; (800b65c <tcp_pcb_purge+0x98>)
 800b5da:	4821      	ldr	r0, [pc, #132]	; (800b660 <tcp_pcb_purge+0x9c>)
 800b5dc:	f007 fade 	bl	8012b9c <iprintf>
 800b5e0:	e037      	b.n	800b652 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	7d1b      	ldrb	r3, [r3, #20]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d033      	beq.n	800b652 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b5ee:	2b0a      	cmp	r3, #10
 800b5f0:	d02f      	beq.n	800b652 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d02b      	beq.n	800b652 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d007      	beq.n	800b612 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b606:	4618      	mov	r0, r3
 800b608:	f7fe fb60 	bl	8009ccc <pbuf_free>
      pcb->refused_data = NULL;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b616:	2b00      	cmp	r3, #0
 800b618:	d002      	beq.n	800b620 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f986 	bl	800b92c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b626:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7ff fdc7 	bl	800b1c0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b636:	4618      	mov	r0, r3
 800b638:	f7ff fdc2 	bl	800b1c0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	66da      	str	r2, [r3, #108]	; 0x6c
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	080146d8 	.word	0x080146d8
 800b65c:	08014d24 	.word	0x08014d24
 800b660:	0801471c 	.word	0x0801471c

0800b664 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d106      	bne.n	800b682 <tcp_pcb_remove+0x1e>
 800b674:	4b3e      	ldr	r3, [pc, #248]	; (800b770 <tcp_pcb_remove+0x10c>)
 800b676:	f640 0283 	movw	r2, #2179	; 0x883
 800b67a:	493e      	ldr	r1, [pc, #248]	; (800b774 <tcp_pcb_remove+0x110>)
 800b67c:	483e      	ldr	r0, [pc, #248]	; (800b778 <tcp_pcb_remove+0x114>)
 800b67e:	f007 fa8d 	bl	8012b9c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d106      	bne.n	800b696 <tcp_pcb_remove+0x32>
 800b688:	4b39      	ldr	r3, [pc, #228]	; (800b770 <tcp_pcb_remove+0x10c>)
 800b68a:	f640 0284 	movw	r2, #2180	; 0x884
 800b68e:	493b      	ldr	r1, [pc, #236]	; (800b77c <tcp_pcb_remove+0x118>)
 800b690:	4839      	ldr	r0, [pc, #228]	; (800b778 <tcp_pcb_remove+0x114>)
 800b692:	f007 fa83 	bl	8012b9c <iprintf>

  TCP_RMV(pcblist, pcb);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d105      	bne.n	800b6ac <tcp_pcb_remove+0x48>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	68da      	ldr	r2, [r3, #12]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	e013      	b.n	800b6d4 <tcp_pcb_remove+0x70>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	60fb      	str	r3, [r7, #12]
 800b6b2:	e00c      	b.n	800b6ce <tcp_pcb_remove+0x6a>
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	683a      	ldr	r2, [r7, #0]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d104      	bne.n	800b6c8 <tcp_pcb_remove+0x64>
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	68da      	ldr	r2, [r3, #12]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	60da      	str	r2, [r3, #12]
 800b6c6:	e005      	b.n	800b6d4 <tcp_pcb_remove+0x70>
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	60fb      	str	r3, [r7, #12]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d1ef      	bne.n	800b6b4 <tcp_pcb_remove+0x50>
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b6da:	6838      	ldr	r0, [r7, #0]
 800b6dc:	f7ff ff72 	bl	800b5c4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	7d1b      	ldrb	r3, [r3, #20]
 800b6e4:	2b0a      	cmp	r3, #10
 800b6e6:	d013      	beq.n	800b710 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d00f      	beq.n	800b710 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	8b5b      	ldrh	r3, [r3, #26]
 800b6f4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d009      	beq.n	800b710 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	8b5b      	ldrh	r3, [r3, #26]
 800b700:	f043 0302 	orr.w	r3, r3, #2
 800b704:	b29a      	uxth	r2, r3
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b70a:	6838      	ldr	r0, [r7, #0]
 800b70c:	f002 ff6e 	bl	800e5ec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	7d1b      	ldrb	r3, [r3, #20]
 800b714:	2b01      	cmp	r3, #1
 800b716:	d020      	beq.n	800b75a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d006      	beq.n	800b72e <tcp_pcb_remove+0xca>
 800b720:	4b13      	ldr	r3, [pc, #76]	; (800b770 <tcp_pcb_remove+0x10c>)
 800b722:	f640 0293 	movw	r2, #2195	; 0x893
 800b726:	4916      	ldr	r1, [pc, #88]	; (800b780 <tcp_pcb_remove+0x11c>)
 800b728:	4813      	ldr	r0, [pc, #76]	; (800b778 <tcp_pcb_remove+0x114>)
 800b72a:	f007 fa37 	bl	8012b9c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b732:	2b00      	cmp	r3, #0
 800b734:	d006      	beq.n	800b744 <tcp_pcb_remove+0xe0>
 800b736:	4b0e      	ldr	r3, [pc, #56]	; (800b770 <tcp_pcb_remove+0x10c>)
 800b738:	f640 0294 	movw	r2, #2196	; 0x894
 800b73c:	4911      	ldr	r1, [pc, #68]	; (800b784 <tcp_pcb_remove+0x120>)
 800b73e:	480e      	ldr	r0, [pc, #56]	; (800b778 <tcp_pcb_remove+0x114>)
 800b740:	f007 fa2c 	bl	8012b9c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d006      	beq.n	800b75a <tcp_pcb_remove+0xf6>
 800b74c:	4b08      	ldr	r3, [pc, #32]	; (800b770 <tcp_pcb_remove+0x10c>)
 800b74e:	f640 0296 	movw	r2, #2198	; 0x896
 800b752:	490d      	ldr	r1, [pc, #52]	; (800b788 <tcp_pcb_remove+0x124>)
 800b754:	4808      	ldr	r0, [pc, #32]	; (800b778 <tcp_pcb_remove+0x114>)
 800b756:	f007 fa21 	bl	8012b9c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	2200      	movs	r2, #0
 800b75e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	2200      	movs	r2, #0
 800b764:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b766:	bf00      	nop
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	080146d8 	.word	0x080146d8
 800b774:	08014d40 	.word	0x08014d40
 800b778:	0801471c 	.word	0x0801471c
 800b77c:	08014d5c 	.word	0x08014d5c
 800b780:	08014d7c 	.word	0x08014d7c
 800b784:	08014d94 	.word	0x08014d94
 800b788:	08014db0 	.word	0x08014db0

0800b78c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d106      	bne.n	800b7a8 <tcp_next_iss+0x1c>
 800b79a:	4b0a      	ldr	r3, [pc, #40]	; (800b7c4 <tcp_next_iss+0x38>)
 800b79c:	f640 02af 	movw	r2, #2223	; 0x8af
 800b7a0:	4909      	ldr	r1, [pc, #36]	; (800b7c8 <tcp_next_iss+0x3c>)
 800b7a2:	480a      	ldr	r0, [pc, #40]	; (800b7cc <tcp_next_iss+0x40>)
 800b7a4:	f007 f9fa 	bl	8012b9c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b7a8:	4b09      	ldr	r3, [pc, #36]	; (800b7d0 <tcp_next_iss+0x44>)
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	4b09      	ldr	r3, [pc, #36]	; (800b7d4 <tcp_next_iss+0x48>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	4a07      	ldr	r2, [pc, #28]	; (800b7d0 <tcp_next_iss+0x44>)
 800b7b4:	6013      	str	r3, [r2, #0]
  return iss;
 800b7b6:	4b06      	ldr	r3, [pc, #24]	; (800b7d0 <tcp_next_iss+0x44>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3708      	adds	r7, #8
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	080146d8 	.word	0x080146d8
 800b7c8:	08014dc8 	.word	0x08014dc8
 800b7cc:	0801471c 	.word	0x0801471c
 800b7d0:	2400002c 	.word	0x2400002c
 800b7d4:	2400bcf0 	.word	0x2400bcf0

0800b7d8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b086      	sub	sp, #24
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	4603      	mov	r3, r0
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
 800b7e4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d106      	bne.n	800b7fa <tcp_eff_send_mss_netif+0x22>
 800b7ec:	4b14      	ldr	r3, [pc, #80]	; (800b840 <tcp_eff_send_mss_netif+0x68>)
 800b7ee:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b7f2:	4914      	ldr	r1, [pc, #80]	; (800b844 <tcp_eff_send_mss_netif+0x6c>)
 800b7f4:	4814      	ldr	r0, [pc, #80]	; (800b848 <tcp_eff_send_mss_netif+0x70>)
 800b7f6:	f007 f9d1 	bl	8012b9c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d101      	bne.n	800b804 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b800:	89fb      	ldrh	r3, [r7, #14]
 800b802:	e019      	b.n	800b838 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b808:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b80a:	8afb      	ldrh	r3, [r7, #22]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d012      	beq.n	800b836 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b810:	2328      	movs	r3, #40	; 0x28
 800b812:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b814:	8afa      	ldrh	r2, [r7, #22]
 800b816:	8abb      	ldrh	r3, [r7, #20]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d904      	bls.n	800b826 <tcp_eff_send_mss_netif+0x4e>
 800b81c:	8afa      	ldrh	r2, [r7, #22]
 800b81e:	8abb      	ldrh	r3, [r7, #20]
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	b29b      	uxth	r3, r3
 800b824:	e000      	b.n	800b828 <tcp_eff_send_mss_netif+0x50>
 800b826:	2300      	movs	r3, #0
 800b828:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b82a:	8a7a      	ldrh	r2, [r7, #18]
 800b82c:	89fb      	ldrh	r3, [r7, #14]
 800b82e:	4293      	cmp	r3, r2
 800b830:	bf28      	it	cs
 800b832:	4613      	movcs	r3, r2
 800b834:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b836:	89fb      	ldrh	r3, [r7, #14]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3718      	adds	r7, #24
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	080146d8 	.word	0x080146d8
 800b844:	08014de4 	.word	0x08014de4
 800b848:	0801471c 	.word	0x0801471c

0800b84c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d119      	bne.n	800b894 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b860:	4b10      	ldr	r3, [pc, #64]	; (800b8a4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b862:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b866:	4910      	ldr	r1, [pc, #64]	; (800b8a8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b868:	4810      	ldr	r0, [pc, #64]	; (800b8ac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b86a:	f007 f997 	bl	8012b9c <iprintf>

  while (pcb != NULL) {
 800b86e:	e011      	b.n	800b894 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d108      	bne.n	800b88e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f7fe ffc6 	bl	800a814 <tcp_abort>
      pcb = next;
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	60fb      	str	r3, [r7, #12]
 800b88c:	e002      	b.n	800b894 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d1ea      	bne.n	800b870 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b89a:	bf00      	nop
 800b89c:	bf00      	nop
 800b89e:	3710      	adds	r7, #16
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	080146d8 	.word	0x080146d8
 800b8a8:	08014e0c 	.word	0x08014e0c
 800b8ac:	0801471c 	.word	0x0801471c

0800b8b0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d02a      	beq.n	800b916 <tcp_netif_ip_addr_changed+0x66>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d026      	beq.n	800b916 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b8c8:	4b15      	ldr	r3, [pc, #84]	; (800b920 <tcp_netif_ip_addr_changed+0x70>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7ff ffbc 	bl	800b84c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b8d4:	4b13      	ldr	r3, [pc, #76]	; (800b924 <tcp_netif_ip_addr_changed+0x74>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4619      	mov	r1, r3
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff ffb6 	bl	800b84c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d017      	beq.n	800b916 <tcp_netif_ip_addr_changed+0x66>
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d013      	beq.n	800b916 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b8ee:	4b0e      	ldr	r3, [pc, #56]	; (800b928 <tcp_netif_ip_addr_changed+0x78>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	60fb      	str	r3, [r7, #12]
 800b8f4:	e00c      	b.n	800b910 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d103      	bne.n	800b90a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	60fb      	str	r3, [r7, #12]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1ef      	bne.n	800b8f6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b916:	bf00      	nop
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	2400bcfc 	.word	0x2400bcfc
 800b924:	2400bcf4 	.word	0x2400bcf4
 800b928:	2400bcf8 	.word	0x2400bcf8

0800b92c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d007      	beq.n	800b94c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b940:	4618      	mov	r0, r3
 800b942:	f7ff fc3d 	bl	800b1c0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2200      	movs	r2, #0
 800b94a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b94c:	bf00      	nop
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b954:	b590      	push	{r4, r7, lr}
 800b956:	b08d      	sub	sp, #52	; 0x34
 800b958:	af04      	add	r7, sp, #16
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d105      	bne.n	800b970 <tcp_input+0x1c>
 800b964:	4b9b      	ldr	r3, [pc, #620]	; (800bbd4 <tcp_input+0x280>)
 800b966:	2283      	movs	r2, #131	; 0x83
 800b968:	499b      	ldr	r1, [pc, #620]	; (800bbd8 <tcp_input+0x284>)
 800b96a:	489c      	ldr	r0, [pc, #624]	; (800bbdc <tcp_input+0x288>)
 800b96c:	f007 f916 	bl	8012b9c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	4a9a      	ldr	r2, [pc, #616]	; (800bbe0 <tcp_input+0x28c>)
 800b976:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	895b      	ldrh	r3, [r3, #10]
 800b97c:	2b13      	cmp	r3, #19
 800b97e:	f240 83d1 	bls.w	800c124 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b982:	4b98      	ldr	r3, [pc, #608]	; (800bbe4 <tcp_input+0x290>)
 800b984:	695b      	ldr	r3, [r3, #20]
 800b986:	4a97      	ldr	r2, [pc, #604]	; (800bbe4 <tcp_input+0x290>)
 800b988:	6812      	ldr	r2, [r2, #0]
 800b98a:	4611      	mov	r1, r2
 800b98c:	4618      	mov	r0, r3
 800b98e:	f005 ffab 	bl	80118e8 <ip4_addr_isbroadcast_u32>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	f040 83c7 	bne.w	800c128 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b99a:	4b92      	ldr	r3, [pc, #584]	; (800bbe4 <tcp_input+0x290>)
 800b99c:	695b      	ldr	r3, [r3, #20]
 800b99e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b9a2:	2be0      	cmp	r3, #224	; 0xe0
 800b9a4:	f000 83c0 	beq.w	800c128 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b9a8:	4b8d      	ldr	r3, [pc, #564]	; (800bbe0 <tcp_input+0x28c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	899b      	ldrh	r3, [r3, #12]
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7fc fcf5 	bl	80083a0 <lwip_htons>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	0b1b      	lsrs	r3, r3, #12
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b9c2:	7cbb      	ldrb	r3, [r7, #18]
 800b9c4:	2b13      	cmp	r3, #19
 800b9c6:	f240 83b1 	bls.w	800c12c <tcp_input+0x7d8>
 800b9ca:	7cbb      	ldrb	r3, [r7, #18]
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	891b      	ldrh	r3, [r3, #8]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	f200 83aa 	bhi.w	800c12c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b9d8:	7cbb      	ldrb	r3, [r7, #18]
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	3b14      	subs	r3, #20
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	4b81      	ldr	r3, [pc, #516]	; (800bbe8 <tcp_input+0x294>)
 800b9e2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b9e4:	4b81      	ldr	r3, [pc, #516]	; (800bbec <tcp_input+0x298>)
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	895a      	ldrh	r2, [r3, #10]
 800b9ee:	7cbb      	ldrb	r3, [r7, #18]
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d309      	bcc.n	800ba0a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b9f6:	4b7c      	ldr	r3, [pc, #496]	; (800bbe8 <tcp_input+0x294>)
 800b9f8:	881a      	ldrh	r2, [r3, #0]
 800b9fa:	4b7d      	ldr	r3, [pc, #500]	; (800bbf0 <tcp_input+0x29c>)
 800b9fc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b9fe:	7cbb      	ldrb	r3, [r7, #18]
 800ba00:	4619      	mov	r1, r3
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f7fe f8dc 	bl	8009bc0 <pbuf_remove_header>
 800ba08:	e04e      	b.n	800baa8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d105      	bne.n	800ba1e <tcp_input+0xca>
 800ba12:	4b70      	ldr	r3, [pc, #448]	; (800bbd4 <tcp_input+0x280>)
 800ba14:	22c2      	movs	r2, #194	; 0xc2
 800ba16:	4977      	ldr	r1, [pc, #476]	; (800bbf4 <tcp_input+0x2a0>)
 800ba18:	4870      	ldr	r0, [pc, #448]	; (800bbdc <tcp_input+0x288>)
 800ba1a:	f007 f8bf 	bl	8012b9c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ba1e:	2114      	movs	r1, #20
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f7fe f8cd 	bl	8009bc0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	895a      	ldrh	r2, [r3, #10]
 800ba2a:	4b71      	ldr	r3, [pc, #452]	; (800bbf0 <tcp_input+0x29c>)
 800ba2c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ba2e:	4b6e      	ldr	r3, [pc, #440]	; (800bbe8 <tcp_input+0x294>)
 800ba30:	881a      	ldrh	r2, [r3, #0]
 800ba32:	4b6f      	ldr	r3, [pc, #444]	; (800bbf0 <tcp_input+0x29c>)
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	1ad3      	subs	r3, r2, r3
 800ba38:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ba3a:	4b6d      	ldr	r3, [pc, #436]	; (800bbf0 <tcp_input+0x29c>)
 800ba3c:	881b      	ldrh	r3, [r3, #0]
 800ba3e:	4619      	mov	r1, r3
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f7fe f8bd 	bl	8009bc0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	895b      	ldrh	r3, [r3, #10]
 800ba4c:	8a3a      	ldrh	r2, [r7, #16]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	f200 836e 	bhi.w	800c130 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	4a64      	ldr	r2, [pc, #400]	; (800bbec <tcp_input+0x298>)
 800ba5c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	8a3a      	ldrh	r2, [r7, #16]
 800ba64:	4611      	mov	r1, r2
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7fe f8aa 	bl	8009bc0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	891a      	ldrh	r2, [r3, #8]
 800ba70:	8a3b      	ldrh	r3, [r7, #16]
 800ba72:	1ad3      	subs	r3, r2, r3
 800ba74:	b29a      	uxth	r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	895b      	ldrh	r3, [r3, #10]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d005      	beq.n	800ba8e <tcp_input+0x13a>
 800ba82:	4b54      	ldr	r3, [pc, #336]	; (800bbd4 <tcp_input+0x280>)
 800ba84:	22df      	movs	r2, #223	; 0xdf
 800ba86:	495c      	ldr	r1, [pc, #368]	; (800bbf8 <tcp_input+0x2a4>)
 800ba88:	4854      	ldr	r0, [pc, #336]	; (800bbdc <tcp_input+0x288>)
 800ba8a:	f007 f887 	bl	8012b9c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	891a      	ldrh	r2, [r3, #8]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	891b      	ldrh	r3, [r3, #8]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d005      	beq.n	800baa8 <tcp_input+0x154>
 800ba9c:	4b4d      	ldr	r3, [pc, #308]	; (800bbd4 <tcp_input+0x280>)
 800ba9e:	22e0      	movs	r2, #224	; 0xe0
 800baa0:	4956      	ldr	r1, [pc, #344]	; (800bbfc <tcp_input+0x2a8>)
 800baa2:	484e      	ldr	r0, [pc, #312]	; (800bbdc <tcp_input+0x288>)
 800baa4:	f007 f87a 	bl	8012b9c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800baa8:	4b4d      	ldr	r3, [pc, #308]	; (800bbe0 <tcp_input+0x28c>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	881b      	ldrh	r3, [r3, #0]
 800baae:	b29b      	uxth	r3, r3
 800bab0:	4a4b      	ldr	r2, [pc, #300]	; (800bbe0 <tcp_input+0x28c>)
 800bab2:	6814      	ldr	r4, [r2, #0]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7fc fc73 	bl	80083a0 <lwip_htons>
 800baba:	4603      	mov	r3, r0
 800babc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800babe:	4b48      	ldr	r3, [pc, #288]	; (800bbe0 <tcp_input+0x28c>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	885b      	ldrh	r3, [r3, #2]
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	4a46      	ldr	r2, [pc, #280]	; (800bbe0 <tcp_input+0x28c>)
 800bac8:	6814      	ldr	r4, [r2, #0]
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fc fc68 	bl	80083a0 <lwip_htons>
 800bad0:	4603      	mov	r3, r0
 800bad2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bad4:	4b42      	ldr	r3, [pc, #264]	; (800bbe0 <tcp_input+0x28c>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	4a41      	ldr	r2, [pc, #260]	; (800bbe0 <tcp_input+0x28c>)
 800badc:	6814      	ldr	r4, [r2, #0]
 800bade:	4618      	mov	r0, r3
 800bae0:	f7fc fc73 	bl	80083ca <lwip_htonl>
 800bae4:	4603      	mov	r3, r0
 800bae6:	6063      	str	r3, [r4, #4]
 800bae8:	6863      	ldr	r3, [r4, #4]
 800baea:	4a45      	ldr	r2, [pc, #276]	; (800bc00 <tcp_input+0x2ac>)
 800baec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800baee:	4b3c      	ldr	r3, [pc, #240]	; (800bbe0 <tcp_input+0x28c>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	4a3a      	ldr	r2, [pc, #232]	; (800bbe0 <tcp_input+0x28c>)
 800baf6:	6814      	ldr	r4, [r2, #0]
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7fc fc66 	bl	80083ca <lwip_htonl>
 800bafe:	4603      	mov	r3, r0
 800bb00:	60a3      	str	r3, [r4, #8]
 800bb02:	68a3      	ldr	r3, [r4, #8]
 800bb04:	4a3f      	ldr	r2, [pc, #252]	; (800bc04 <tcp_input+0x2b0>)
 800bb06:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bb08:	4b35      	ldr	r3, [pc, #212]	; (800bbe0 <tcp_input+0x28c>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	89db      	ldrh	r3, [r3, #14]
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	4a33      	ldr	r2, [pc, #204]	; (800bbe0 <tcp_input+0x28c>)
 800bb12:	6814      	ldr	r4, [r2, #0]
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fc fc43 	bl	80083a0 <lwip_htons>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800bb1e:	4b30      	ldr	r3, [pc, #192]	; (800bbe0 <tcp_input+0x28c>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	899b      	ldrh	r3, [r3, #12]
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fc fc3a 	bl	80083a0 <lwip_htons>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb34:	b2da      	uxtb	r2, r3
 800bb36:	4b34      	ldr	r3, [pc, #208]	; (800bc08 <tcp_input+0x2b4>)
 800bb38:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	891a      	ldrh	r2, [r3, #8]
 800bb3e:	4b33      	ldr	r3, [pc, #204]	; (800bc0c <tcp_input+0x2b8>)
 800bb40:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800bb42:	4b31      	ldr	r3, [pc, #196]	; (800bc08 <tcp_input+0x2b4>)
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	f003 0303 	and.w	r3, r3, #3
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00c      	beq.n	800bb68 <tcp_input+0x214>
    tcplen++;
 800bb4e:	4b2f      	ldr	r3, [pc, #188]	; (800bc0c <tcp_input+0x2b8>)
 800bb50:	881b      	ldrh	r3, [r3, #0]
 800bb52:	3301      	adds	r3, #1
 800bb54:	b29a      	uxth	r2, r3
 800bb56:	4b2d      	ldr	r3, [pc, #180]	; (800bc0c <tcp_input+0x2b8>)
 800bb58:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	891a      	ldrh	r2, [r3, #8]
 800bb5e:	4b2b      	ldr	r3, [pc, #172]	; (800bc0c <tcp_input+0x2b8>)
 800bb60:	881b      	ldrh	r3, [r3, #0]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	f200 82e6 	bhi.w	800c134 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb6c:	4b28      	ldr	r3, [pc, #160]	; (800bc10 <tcp_input+0x2bc>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	61fb      	str	r3, [r7, #28]
 800bb72:	e09d      	b.n	800bcb0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	7d1b      	ldrb	r3, [r3, #20]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d105      	bne.n	800bb88 <tcp_input+0x234>
 800bb7c:	4b15      	ldr	r3, [pc, #84]	; (800bbd4 <tcp_input+0x280>)
 800bb7e:	22fb      	movs	r2, #251	; 0xfb
 800bb80:	4924      	ldr	r1, [pc, #144]	; (800bc14 <tcp_input+0x2c0>)
 800bb82:	4816      	ldr	r0, [pc, #88]	; (800bbdc <tcp_input+0x288>)
 800bb84:	f007 f80a 	bl	8012b9c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	7d1b      	ldrb	r3, [r3, #20]
 800bb8c:	2b0a      	cmp	r3, #10
 800bb8e:	d105      	bne.n	800bb9c <tcp_input+0x248>
 800bb90:	4b10      	ldr	r3, [pc, #64]	; (800bbd4 <tcp_input+0x280>)
 800bb92:	22fc      	movs	r2, #252	; 0xfc
 800bb94:	4920      	ldr	r1, [pc, #128]	; (800bc18 <tcp_input+0x2c4>)
 800bb96:	4811      	ldr	r0, [pc, #68]	; (800bbdc <tcp_input+0x288>)
 800bb98:	f007 f800 	bl	8012b9c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	7d1b      	ldrb	r3, [r3, #20]
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d105      	bne.n	800bbb0 <tcp_input+0x25c>
 800bba4:	4b0b      	ldr	r3, [pc, #44]	; (800bbd4 <tcp_input+0x280>)
 800bba6:	22fd      	movs	r2, #253	; 0xfd
 800bba8:	491c      	ldr	r1, [pc, #112]	; (800bc1c <tcp_input+0x2c8>)
 800bbaa:	480c      	ldr	r0, [pc, #48]	; (800bbdc <tcp_input+0x288>)
 800bbac:	f006 fff6 	bl	8012b9c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	7a1b      	ldrb	r3, [r3, #8]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d033      	beq.n	800bc20 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	7a1a      	ldrb	r2, [r3, #8]
 800bbbc:	4b09      	ldr	r3, [pc, #36]	; (800bbe4 <tcp_input+0x290>)
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d029      	beq.n	800bc20 <tcp_input+0x2cc>
      prev = pcb;
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	61bb      	str	r3, [r7, #24]
      continue;
 800bbd0:	e06b      	b.n	800bcaa <tcp_input+0x356>
 800bbd2:	bf00      	nop
 800bbd4:	08014e40 	.word	0x08014e40
 800bbd8:	08014e74 	.word	0x08014e74
 800bbdc:	08014e8c 	.word	0x08014e8c
 800bbe0:	2400bd18 	.word	0x2400bd18
 800bbe4:	24008bf0 	.word	0x24008bf0
 800bbe8:	2400bd1c 	.word	0x2400bd1c
 800bbec:	2400bd20 	.word	0x2400bd20
 800bbf0:	2400bd1e 	.word	0x2400bd1e
 800bbf4:	08014eb4 	.word	0x08014eb4
 800bbf8:	08014ec4 	.word	0x08014ec4
 800bbfc:	08014ed0 	.word	0x08014ed0
 800bc00:	2400bd28 	.word	0x2400bd28
 800bc04:	2400bd2c 	.word	0x2400bd2c
 800bc08:	2400bd34 	.word	0x2400bd34
 800bc0c:	2400bd32 	.word	0x2400bd32
 800bc10:	2400bcfc 	.word	0x2400bcfc
 800bc14:	08014ef0 	.word	0x08014ef0
 800bc18:	08014f18 	.word	0x08014f18
 800bc1c:	08014f44 	.word	0x08014f44
    }

    if (pcb->remote_port == tcphdr->src &&
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	8b1a      	ldrh	r2, [r3, #24]
 800bc24:	4b72      	ldr	r3, [pc, #456]	; (800bdf0 <tcp_input+0x49c>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	881b      	ldrh	r3, [r3, #0]
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d13a      	bne.n	800bca6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	8ada      	ldrh	r2, [r3, #22]
 800bc34:	4b6e      	ldr	r3, [pc, #440]	; (800bdf0 <tcp_input+0x49c>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	885b      	ldrh	r3, [r3, #2]
 800bc3a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d132      	bne.n	800bca6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	685a      	ldr	r2, [r3, #4]
 800bc44:	4b6b      	ldr	r3, [pc, #428]	; (800bdf4 <tcp_input+0x4a0>)
 800bc46:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d12c      	bne.n	800bca6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	4b68      	ldr	r3, [pc, #416]	; (800bdf4 <tcp_input+0x4a0>)
 800bc52:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d126      	bne.n	800bca6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	69fa      	ldr	r2, [r7, #28]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d106      	bne.n	800bc70 <tcp_input+0x31c>
 800bc62:	4b65      	ldr	r3, [pc, #404]	; (800bdf8 <tcp_input+0x4a4>)
 800bc64:	f240 120d 	movw	r2, #269	; 0x10d
 800bc68:	4964      	ldr	r1, [pc, #400]	; (800bdfc <tcp_input+0x4a8>)
 800bc6a:	4865      	ldr	r0, [pc, #404]	; (800be00 <tcp_input+0x4ac>)
 800bc6c:	f006 ff96 	bl	8012b9c <iprintf>
      if (prev != NULL) {
 800bc70:	69bb      	ldr	r3, [r7, #24]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00a      	beq.n	800bc8c <tcp_input+0x338>
        prev->next = pcb->next;
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	68da      	ldr	r2, [r3, #12]
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800bc7e:	4b61      	ldr	r3, [pc, #388]	; (800be04 <tcp_input+0x4b0>)
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800bc86:	4a5f      	ldr	r2, [pc, #380]	; (800be04 <tcp_input+0x4b0>)
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	69fa      	ldr	r2, [r7, #28]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d111      	bne.n	800bcba <tcp_input+0x366>
 800bc96:	4b58      	ldr	r3, [pc, #352]	; (800bdf8 <tcp_input+0x4a4>)
 800bc98:	f240 1215 	movw	r2, #277	; 0x115
 800bc9c:	495a      	ldr	r1, [pc, #360]	; (800be08 <tcp_input+0x4b4>)
 800bc9e:	4858      	ldr	r0, [pc, #352]	; (800be00 <tcp_input+0x4ac>)
 800bca0:	f006 ff7c 	bl	8012b9c <iprintf>
      break;
 800bca4:	e009      	b.n	800bcba <tcp_input+0x366>
    }
    prev = pcb;
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	61fb      	str	r3, [r7, #28]
 800bcb0:	69fb      	ldr	r3, [r7, #28]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	f47f af5e 	bne.w	800bb74 <tcp_input+0x220>
 800bcb8:	e000      	b.n	800bcbc <tcp_input+0x368>
      break;
 800bcba:	bf00      	nop
  }

  if (pcb == NULL) {
 800bcbc:	69fb      	ldr	r3, [r7, #28]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f040 80aa 	bne.w	800be18 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcc4:	4b51      	ldr	r3, [pc, #324]	; (800be0c <tcp_input+0x4b8>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	61fb      	str	r3, [r7, #28]
 800bcca:	e03f      	b.n	800bd4c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	7d1b      	ldrb	r3, [r3, #20]
 800bcd0:	2b0a      	cmp	r3, #10
 800bcd2:	d006      	beq.n	800bce2 <tcp_input+0x38e>
 800bcd4:	4b48      	ldr	r3, [pc, #288]	; (800bdf8 <tcp_input+0x4a4>)
 800bcd6:	f240 121f 	movw	r2, #287	; 0x11f
 800bcda:	494d      	ldr	r1, [pc, #308]	; (800be10 <tcp_input+0x4bc>)
 800bcdc:	4848      	ldr	r0, [pc, #288]	; (800be00 <tcp_input+0x4ac>)
 800bcde:	f006 ff5d 	bl	8012b9c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	7a1b      	ldrb	r3, [r3, #8]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d009      	beq.n	800bcfe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	7a1a      	ldrb	r2, [r3, #8]
 800bcee:	4b41      	ldr	r3, [pc, #260]	; (800bdf4 <tcp_input+0x4a0>)
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d122      	bne.n	800bd44 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	8b1a      	ldrh	r2, [r3, #24]
 800bd02:	4b3b      	ldr	r3, [pc, #236]	; (800bdf0 <tcp_input+0x49c>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	881b      	ldrh	r3, [r3, #0]
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d11b      	bne.n	800bd46 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800bd0e:	69fb      	ldr	r3, [r7, #28]
 800bd10:	8ada      	ldrh	r2, [r3, #22]
 800bd12:	4b37      	ldr	r3, [pc, #220]	; (800bdf0 <tcp_input+0x49c>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	885b      	ldrh	r3, [r3, #2]
 800bd18:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d113      	bne.n	800bd46 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	685a      	ldr	r2, [r3, #4]
 800bd22:	4b34      	ldr	r3, [pc, #208]	; (800bdf4 <tcp_input+0x4a0>)
 800bd24:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d10d      	bne.n	800bd46 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	4b31      	ldr	r3, [pc, #196]	; (800bdf4 <tcp_input+0x4a0>)
 800bd30:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d107      	bne.n	800bd46 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800bd36:	69f8      	ldr	r0, [r7, #28]
 800bd38:	f000 fb56 	bl	800c3e8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f7fd ffc5 	bl	8009ccc <pbuf_free>
        return;
 800bd42:	e1fd      	b.n	800c140 <tcp_input+0x7ec>
        continue;
 800bd44:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	61fb      	str	r3, [r7, #28]
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d1bc      	bne.n	800bccc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800bd52:	2300      	movs	r3, #0
 800bd54:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bd56:	4b2f      	ldr	r3, [pc, #188]	; (800be14 <tcp_input+0x4c0>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	617b      	str	r3, [r7, #20]
 800bd5c:	e02a      	b.n	800bdb4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	7a1b      	ldrb	r3, [r3, #8]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00c      	beq.n	800bd80 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	7a1a      	ldrb	r2, [r3, #8]
 800bd6a:	4b22      	ldr	r3, [pc, #136]	; (800bdf4 <tcp_input+0x4a0>)
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd72:	3301      	adds	r3, #1
 800bd74:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d002      	beq.n	800bd80 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	61bb      	str	r3, [r7, #24]
        continue;
 800bd7e:	e016      	b.n	800bdae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	8ada      	ldrh	r2, [r3, #22]
 800bd84:	4b1a      	ldr	r3, [pc, #104]	; (800bdf0 <tcp_input+0x49c>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	885b      	ldrh	r3, [r3, #2]
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d10c      	bne.n	800bdaa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	4b17      	ldr	r3, [pc, #92]	; (800bdf4 <tcp_input+0x4a0>)
 800bd96:	695b      	ldr	r3, [r3, #20]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d00f      	beq.n	800bdbc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00d      	beq.n	800bdbe <tcp_input+0x46a>
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d009      	beq.n	800bdbe <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	617b      	str	r3, [r7, #20]
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1d1      	bne.n	800bd5e <tcp_input+0x40a>
 800bdba:	e000      	b.n	800bdbe <tcp_input+0x46a>
            break;
 800bdbc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d029      	beq.n	800be18 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00a      	beq.n	800bde0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	68da      	ldr	r2, [r3, #12]
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bdd2:	4b10      	ldr	r3, [pc, #64]	; (800be14 <tcp_input+0x4c0>)
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bdda:	4a0e      	ldr	r2, [pc, #56]	; (800be14 <tcp_input+0x4c0>)
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800bde0:	6978      	ldr	r0, [r7, #20]
 800bde2:	f000 fa03 	bl	800c1ec <tcp_listen_input>
      }
      pbuf_free(p);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7fd ff70 	bl	8009ccc <pbuf_free>
      return;
 800bdec:	e1a8      	b.n	800c140 <tcp_input+0x7ec>
 800bdee:	bf00      	nop
 800bdf0:	2400bd18 	.word	0x2400bd18
 800bdf4:	24008bf0 	.word	0x24008bf0
 800bdf8:	08014e40 	.word	0x08014e40
 800bdfc:	08014f6c 	.word	0x08014f6c
 800be00:	08014e8c 	.word	0x08014e8c
 800be04:	2400bcfc 	.word	0x2400bcfc
 800be08:	08014f98 	.word	0x08014f98
 800be0c:	2400bd00 	.word	0x2400bd00
 800be10:	08014fc4 	.word	0x08014fc4
 800be14:	2400bcf8 	.word	0x2400bcf8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	f000 8158 	beq.w	800c0d0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800be20:	4b95      	ldr	r3, [pc, #596]	; (800c078 <tcp_input+0x724>)
 800be22:	2200      	movs	r2, #0
 800be24:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	891a      	ldrh	r2, [r3, #8]
 800be2a:	4b93      	ldr	r3, [pc, #588]	; (800c078 <tcp_input+0x724>)
 800be2c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800be2e:	4a92      	ldr	r2, [pc, #584]	; (800c078 <tcp_input+0x724>)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800be34:	4b91      	ldr	r3, [pc, #580]	; (800c07c <tcp_input+0x728>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a8f      	ldr	r2, [pc, #572]	; (800c078 <tcp_input+0x724>)
 800be3a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800be3c:	4b90      	ldr	r3, [pc, #576]	; (800c080 <tcp_input+0x72c>)
 800be3e:	2200      	movs	r2, #0
 800be40:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800be42:	4b90      	ldr	r3, [pc, #576]	; (800c084 <tcp_input+0x730>)
 800be44:	2200      	movs	r2, #0
 800be46:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800be48:	4b8f      	ldr	r3, [pc, #572]	; (800c088 <tcp_input+0x734>)
 800be4a:	2200      	movs	r2, #0
 800be4c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800be4e:	4b8f      	ldr	r3, [pc, #572]	; (800c08c <tcp_input+0x738>)
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	f003 0308 	and.w	r3, r3, #8
 800be56:	2b00      	cmp	r3, #0
 800be58:	d006      	beq.n	800be68 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	7b5b      	ldrb	r3, [r3, #13]
 800be5e:	f043 0301 	orr.w	r3, r3, #1
 800be62:	b2da      	uxtb	r2, r3
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d017      	beq.n	800bea0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800be70:	69f8      	ldr	r0, [r7, #28]
 800be72:	f7ff f929 	bl	800b0c8 <tcp_process_refused_data>
 800be76:	4603      	mov	r3, r0
 800be78:	f113 0f0d 	cmn.w	r3, #13
 800be7c:	d007      	beq.n	800be8e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00c      	beq.n	800bea0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800be86:	4b82      	ldr	r3, [pc, #520]	; (800c090 <tcp_input+0x73c>)
 800be88:	881b      	ldrh	r3, [r3, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d008      	beq.n	800bea0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be92:	2b00      	cmp	r3, #0
 800be94:	f040 80e3 	bne.w	800c05e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800be98:	69f8      	ldr	r0, [r7, #28]
 800be9a:	f003 f9ad 	bl	800f1f8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800be9e:	e0de      	b.n	800c05e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800bea0:	4a7c      	ldr	r2, [pc, #496]	; (800c094 <tcp_input+0x740>)
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800bea6:	69f8      	ldr	r0, [r7, #28]
 800bea8:	f000 fb18 	bl	800c4dc <tcp_process>
 800beac:	4603      	mov	r3, r0
 800beae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800beb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800beb4:	f113 0f0d 	cmn.w	r3, #13
 800beb8:	f000 80d3 	beq.w	800c062 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800bebc:	4b71      	ldr	r3, [pc, #452]	; (800c084 <tcp_input+0x730>)
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	f003 0308 	and.w	r3, r3, #8
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d015      	beq.n	800bef4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d008      	beq.n	800bee4 <tcp_input+0x590>
 800bed2:	69fb      	ldr	r3, [r7, #28]
 800bed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bed8:	69fa      	ldr	r2, [r7, #28]
 800beda:	6912      	ldr	r2, [r2, #16]
 800bedc:	f06f 010d 	mvn.w	r1, #13
 800bee0:	4610      	mov	r0, r2
 800bee2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bee4:	69f9      	ldr	r1, [r7, #28]
 800bee6:	486c      	ldr	r0, [pc, #432]	; (800c098 <tcp_input+0x744>)
 800bee8:	f7ff fbbc 	bl	800b664 <tcp_pcb_remove>
        tcp_free(pcb);
 800beec:	69f8      	ldr	r0, [r7, #28]
 800beee:	f7fe f9a9 	bl	800a244 <tcp_free>
 800bef2:	e0da      	b.n	800c0aa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800bef4:	2300      	movs	r3, #0
 800bef6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800bef8:	4b63      	ldr	r3, [pc, #396]	; (800c088 <tcp_input+0x734>)
 800befa:	881b      	ldrh	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d01d      	beq.n	800bf3c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800bf00:	4b61      	ldr	r3, [pc, #388]	; (800c088 <tcp_input+0x734>)
 800bf02:	881b      	ldrh	r3, [r3, #0]
 800bf04:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00a      	beq.n	800bf26 <tcp_input+0x5d2>
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf16:	69fa      	ldr	r2, [r7, #28]
 800bf18:	6910      	ldr	r0, [r2, #16]
 800bf1a:	89fa      	ldrh	r2, [r7, #14]
 800bf1c:	69f9      	ldr	r1, [r7, #28]
 800bf1e:	4798      	blx	r3
 800bf20:	4603      	mov	r3, r0
 800bf22:	74fb      	strb	r3, [r7, #19]
 800bf24:	e001      	b.n	800bf2a <tcp_input+0x5d6>
 800bf26:	2300      	movs	r3, #0
 800bf28:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bf2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf2e:	f113 0f0d 	cmn.w	r3, #13
 800bf32:	f000 8098 	beq.w	800c066 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800bf36:	4b54      	ldr	r3, [pc, #336]	; (800c088 <tcp_input+0x734>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800bf3c:	69f8      	ldr	r0, [r7, #28]
 800bf3e:	f000 f915 	bl	800c16c <tcp_input_delayed_close>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f040 8090 	bne.w	800c06a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800bf4a:	4b4d      	ldr	r3, [pc, #308]	; (800c080 <tcp_input+0x72c>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d041      	beq.n	800bfd6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d006      	beq.n	800bf68 <tcp_input+0x614>
 800bf5a:	4b50      	ldr	r3, [pc, #320]	; (800c09c <tcp_input+0x748>)
 800bf5c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bf60:	494f      	ldr	r1, [pc, #316]	; (800c0a0 <tcp_input+0x74c>)
 800bf62:	4850      	ldr	r0, [pc, #320]	; (800c0a4 <tcp_input+0x750>)
 800bf64:	f006 fe1a 	bl	8012b9c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	8b5b      	ldrh	r3, [r3, #26]
 800bf6c:	f003 0310 	and.w	r3, r3, #16
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d008      	beq.n	800bf86 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800bf74:	4b42      	ldr	r3, [pc, #264]	; (800c080 <tcp_input+0x72c>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7fd fea7 	bl	8009ccc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800bf7e:	69f8      	ldr	r0, [r7, #28]
 800bf80:	f7fe fc48 	bl	800a814 <tcp_abort>
            goto aborted;
 800bf84:	e091      	b.n	800c0aa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00c      	beq.n	800bfaa <tcp_input+0x656>
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	6918      	ldr	r0, [r3, #16]
 800bf9a:	4b39      	ldr	r3, [pc, #228]	; (800c080 <tcp_input+0x72c>)
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	69f9      	ldr	r1, [r7, #28]
 800bfa2:	47a0      	blx	r4
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	74fb      	strb	r3, [r7, #19]
 800bfa8:	e008      	b.n	800bfbc <tcp_input+0x668>
 800bfaa:	4b35      	ldr	r3, [pc, #212]	; (800c080 <tcp_input+0x72c>)
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	2300      	movs	r3, #0
 800bfb0:	69f9      	ldr	r1, [r7, #28]
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	f7ff f95e 	bl	800b274 <tcp_recv_null>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800bfbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfc0:	f113 0f0d 	cmn.w	r3, #13
 800bfc4:	d053      	beq.n	800c06e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800bfc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d003      	beq.n	800bfd6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800bfce:	4b2c      	ldr	r3, [pc, #176]	; (800c080 <tcp_input+0x72c>)
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800bfd6:	4b2b      	ldr	r3, [pc, #172]	; (800c084 <tcp_input+0x730>)
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	f003 0320 	and.w	r3, r3, #32
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d030      	beq.n	800c044 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d009      	beq.n	800bffe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfee:	7b5a      	ldrb	r2, [r3, #13]
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bff4:	f042 0220 	orr.w	r2, r2, #32
 800bff8:	b2d2      	uxtb	r2, r2
 800bffa:	735a      	strb	r2, [r3, #13]
 800bffc:	e022      	b.n	800c044 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c002:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c006:	d005      	beq.n	800c014 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c00c:	3301      	adds	r3, #1
 800c00e:	b29a      	uxth	r2, r3
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00b      	beq.n	800c036 <tcp_input+0x6e2>
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	6918      	ldr	r0, [r3, #16]
 800c028:	2300      	movs	r3, #0
 800c02a:	2200      	movs	r2, #0
 800c02c:	69f9      	ldr	r1, [r7, #28]
 800c02e:	47a0      	blx	r4
 800c030:	4603      	mov	r3, r0
 800c032:	74fb      	strb	r3, [r7, #19]
 800c034:	e001      	b.n	800c03a <tcp_input+0x6e6>
 800c036:	2300      	movs	r3, #0
 800c038:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c03a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c03e:	f113 0f0d 	cmn.w	r3, #13
 800c042:	d016      	beq.n	800c072 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c044:	4b13      	ldr	r3, [pc, #76]	; (800c094 <tcp_input+0x740>)
 800c046:	2200      	movs	r2, #0
 800c048:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c04a:	69f8      	ldr	r0, [r7, #28]
 800c04c:	f000 f88e 	bl	800c16c <tcp_input_delayed_close>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d128      	bne.n	800c0a8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c056:	69f8      	ldr	r0, [r7, #28]
 800c058:	f002 fac8 	bl	800e5ec <tcp_output>
 800c05c:	e025      	b.n	800c0aa <tcp_input+0x756>
        goto aborted;
 800c05e:	bf00      	nop
 800c060:	e023      	b.n	800c0aa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c062:	bf00      	nop
 800c064:	e021      	b.n	800c0aa <tcp_input+0x756>
              goto aborted;
 800c066:	bf00      	nop
 800c068:	e01f      	b.n	800c0aa <tcp_input+0x756>
          goto aborted;
 800c06a:	bf00      	nop
 800c06c:	e01d      	b.n	800c0aa <tcp_input+0x756>
            goto aborted;
 800c06e:	bf00      	nop
 800c070:	e01b      	b.n	800c0aa <tcp_input+0x756>
              goto aborted;
 800c072:	bf00      	nop
 800c074:	e019      	b.n	800c0aa <tcp_input+0x756>
 800c076:	bf00      	nop
 800c078:	2400bd08 	.word	0x2400bd08
 800c07c:	2400bd18 	.word	0x2400bd18
 800c080:	2400bd38 	.word	0x2400bd38
 800c084:	2400bd35 	.word	0x2400bd35
 800c088:	2400bd30 	.word	0x2400bd30
 800c08c:	2400bd34 	.word	0x2400bd34
 800c090:	2400bd32 	.word	0x2400bd32
 800c094:	2400bd3c 	.word	0x2400bd3c
 800c098:	2400bcfc 	.word	0x2400bcfc
 800c09c:	08014e40 	.word	0x08014e40
 800c0a0:	08014ff4 	.word	0x08014ff4
 800c0a4:	08014e8c 	.word	0x08014e8c
          goto aborted;
 800c0a8:	bf00      	nop
    tcp_input_pcb = NULL;
 800c0aa:	4b27      	ldr	r3, [pc, #156]	; (800c148 <tcp_input+0x7f4>)
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c0b0:	4b26      	ldr	r3, [pc, #152]	; (800c14c <tcp_input+0x7f8>)
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c0b6:	4b26      	ldr	r3, [pc, #152]	; (800c150 <tcp_input+0x7fc>)
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d03f      	beq.n	800c13e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800c0be:	4b24      	ldr	r3, [pc, #144]	; (800c150 <tcp_input+0x7fc>)
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7fd fe02 	bl	8009ccc <pbuf_free>
      inseg.p = NULL;
 800c0c8:	4b21      	ldr	r3, [pc, #132]	; (800c150 <tcp_input+0x7fc>)
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c0ce:	e036      	b.n	800c13e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c0d0:	4b20      	ldr	r3, [pc, #128]	; (800c154 <tcp_input+0x800>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	899b      	ldrh	r3, [r3, #12]
 800c0d6:	b29b      	uxth	r3, r3
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7fc f961 	bl	80083a0 <lwip_htons>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	f003 0304 	and.w	r3, r3, #4
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d118      	bne.n	800c11c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0ea:	4b1b      	ldr	r3, [pc, #108]	; (800c158 <tcp_input+0x804>)
 800c0ec:	6819      	ldr	r1, [r3, #0]
 800c0ee:	4b1b      	ldr	r3, [pc, #108]	; (800c15c <tcp_input+0x808>)
 800c0f0:	881b      	ldrh	r3, [r3, #0]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	4b1a      	ldr	r3, [pc, #104]	; (800c160 <tcp_input+0x80c>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0fa:	4b16      	ldr	r3, [pc, #88]	; (800c154 <tcp_input+0x800>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0fe:	885b      	ldrh	r3, [r3, #2]
 800c100:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c102:	4a14      	ldr	r2, [pc, #80]	; (800c154 <tcp_input+0x800>)
 800c104:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c106:	8812      	ldrh	r2, [r2, #0]
 800c108:	b292      	uxth	r2, r2
 800c10a:	9202      	str	r2, [sp, #8]
 800c10c:	9301      	str	r3, [sp, #4]
 800c10e:	4b15      	ldr	r3, [pc, #84]	; (800c164 <tcp_input+0x810>)
 800c110:	9300      	str	r3, [sp, #0]
 800c112:	4b15      	ldr	r3, [pc, #84]	; (800c168 <tcp_input+0x814>)
 800c114:	4602      	mov	r2, r0
 800c116:	2000      	movs	r0, #0
 800c118:	f003 f81c 	bl	800f154 <tcp_rst>
    pbuf_free(p);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f7fd fdd5 	bl	8009ccc <pbuf_free>
  return;
 800c122:	e00c      	b.n	800c13e <tcp_input+0x7ea>
    goto dropped;
 800c124:	bf00      	nop
 800c126:	e006      	b.n	800c136 <tcp_input+0x7e2>
    goto dropped;
 800c128:	bf00      	nop
 800c12a:	e004      	b.n	800c136 <tcp_input+0x7e2>
    goto dropped;
 800c12c:	bf00      	nop
 800c12e:	e002      	b.n	800c136 <tcp_input+0x7e2>
      goto dropped;
 800c130:	bf00      	nop
 800c132:	e000      	b.n	800c136 <tcp_input+0x7e2>
      goto dropped;
 800c134:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f7fd fdc8 	bl	8009ccc <pbuf_free>
 800c13c:	e000      	b.n	800c140 <tcp_input+0x7ec>
  return;
 800c13e:	bf00      	nop
}
 800c140:	3724      	adds	r7, #36	; 0x24
 800c142:	46bd      	mov	sp, r7
 800c144:	bd90      	pop	{r4, r7, pc}
 800c146:	bf00      	nop
 800c148:	2400bd3c 	.word	0x2400bd3c
 800c14c:	2400bd38 	.word	0x2400bd38
 800c150:	2400bd08 	.word	0x2400bd08
 800c154:	2400bd18 	.word	0x2400bd18
 800c158:	2400bd2c 	.word	0x2400bd2c
 800c15c:	2400bd32 	.word	0x2400bd32
 800c160:	2400bd28 	.word	0x2400bd28
 800c164:	24008c00 	.word	0x24008c00
 800c168:	24008c04 	.word	0x24008c04

0800c16c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d106      	bne.n	800c188 <tcp_input_delayed_close+0x1c>
 800c17a:	4b17      	ldr	r3, [pc, #92]	; (800c1d8 <tcp_input_delayed_close+0x6c>)
 800c17c:	f240 225a 	movw	r2, #602	; 0x25a
 800c180:	4916      	ldr	r1, [pc, #88]	; (800c1dc <tcp_input_delayed_close+0x70>)
 800c182:	4817      	ldr	r0, [pc, #92]	; (800c1e0 <tcp_input_delayed_close+0x74>)
 800c184:	f006 fd0a 	bl	8012b9c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c188:	4b16      	ldr	r3, [pc, #88]	; (800c1e4 <tcp_input_delayed_close+0x78>)
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	f003 0310 	and.w	r3, r3, #16
 800c190:	2b00      	cmp	r3, #0
 800c192:	d01c      	beq.n	800c1ce <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	8b5b      	ldrh	r3, [r3, #26]
 800c198:	f003 0310 	and.w	r3, r3, #16
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d10d      	bne.n	800c1bc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d008      	beq.n	800c1bc <tcp_input_delayed_close+0x50>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	6912      	ldr	r2, [r2, #16]
 800c1b4:	f06f 010e 	mvn.w	r1, #14
 800c1b8:	4610      	mov	r0, r2
 800c1ba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c1bc:	6879      	ldr	r1, [r7, #4]
 800c1be:	480a      	ldr	r0, [pc, #40]	; (800c1e8 <tcp_input_delayed_close+0x7c>)
 800c1c0:	f7ff fa50 	bl	800b664 <tcp_pcb_remove>
    tcp_free(pcb);
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f7fe f83d 	bl	800a244 <tcp_free>
    return 1;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e000      	b.n	800c1d0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3708      	adds	r7, #8
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	08014e40 	.word	0x08014e40
 800c1dc:	08015010 	.word	0x08015010
 800c1e0:	08014e8c 	.word	0x08014e8c
 800c1e4:	2400bd35 	.word	0x2400bd35
 800c1e8:	2400bcfc 	.word	0x2400bcfc

0800c1ec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c1ec:	b590      	push	{r4, r7, lr}
 800c1ee:	b08b      	sub	sp, #44	; 0x2c
 800c1f0:	af04      	add	r7, sp, #16
 800c1f2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c1f4:	4b6f      	ldr	r3, [pc, #444]	; (800c3b4 <tcp_listen_input+0x1c8>)
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	f003 0304 	and.w	r3, r3, #4
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f040 80d2 	bne.w	800c3a6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d106      	bne.n	800c216 <tcp_listen_input+0x2a>
 800c208:	4b6b      	ldr	r3, [pc, #428]	; (800c3b8 <tcp_listen_input+0x1cc>)
 800c20a:	f240 2281 	movw	r2, #641	; 0x281
 800c20e:	496b      	ldr	r1, [pc, #428]	; (800c3bc <tcp_listen_input+0x1d0>)
 800c210:	486b      	ldr	r0, [pc, #428]	; (800c3c0 <tcp_listen_input+0x1d4>)
 800c212:	f006 fcc3 	bl	8012b9c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c216:	4b67      	ldr	r3, [pc, #412]	; (800c3b4 <tcp_listen_input+0x1c8>)
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	f003 0310 	and.w	r3, r3, #16
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d019      	beq.n	800c256 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c222:	4b68      	ldr	r3, [pc, #416]	; (800c3c4 <tcp_listen_input+0x1d8>)
 800c224:	6819      	ldr	r1, [r3, #0]
 800c226:	4b68      	ldr	r3, [pc, #416]	; (800c3c8 <tcp_listen_input+0x1dc>)
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	461a      	mov	r2, r3
 800c22c:	4b67      	ldr	r3, [pc, #412]	; (800c3cc <tcp_listen_input+0x1e0>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c232:	4b67      	ldr	r3, [pc, #412]	; (800c3d0 <tcp_listen_input+0x1e4>)
 800c234:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c236:	885b      	ldrh	r3, [r3, #2]
 800c238:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c23a:	4a65      	ldr	r2, [pc, #404]	; (800c3d0 <tcp_listen_input+0x1e4>)
 800c23c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c23e:	8812      	ldrh	r2, [r2, #0]
 800c240:	b292      	uxth	r2, r2
 800c242:	9202      	str	r2, [sp, #8]
 800c244:	9301      	str	r3, [sp, #4]
 800c246:	4b63      	ldr	r3, [pc, #396]	; (800c3d4 <tcp_listen_input+0x1e8>)
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	4b63      	ldr	r3, [pc, #396]	; (800c3d8 <tcp_listen_input+0x1ec>)
 800c24c:	4602      	mov	r2, r0
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f002 ff80 	bl	800f154 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c254:	e0a9      	b.n	800c3aa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c256:	4b57      	ldr	r3, [pc, #348]	; (800c3b4 <tcp_listen_input+0x1c8>)
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	f003 0302 	and.w	r3, r3, #2
 800c25e:	2b00      	cmp	r3, #0
 800c260:	f000 80a3 	beq.w	800c3aa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	7d5b      	ldrb	r3, [r3, #21]
 800c268:	4618      	mov	r0, r3
 800c26a:	f7ff f927 	bl	800b4bc <tcp_alloc>
 800c26e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d111      	bne.n	800c29a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	699b      	ldr	r3, [r3, #24]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00a      	beq.n	800c294 <tcp_listen_input+0xa8>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	699b      	ldr	r3, [r3, #24]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	6910      	ldr	r0, [r2, #16]
 800c286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c28a:	2100      	movs	r1, #0
 800c28c:	4798      	blx	r3
 800c28e:	4603      	mov	r3, r0
 800c290:	73bb      	strb	r3, [r7, #14]
      return;
 800c292:	e08b      	b.n	800c3ac <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c294:	23f0      	movs	r3, #240	; 0xf0
 800c296:	73bb      	strb	r3, [r7, #14]
      return;
 800c298:	e088      	b.n	800c3ac <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c29a:	4b50      	ldr	r3, [pc, #320]	; (800c3dc <tcp_listen_input+0x1f0>)
 800c29c:	695a      	ldr	r2, [r3, #20]
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c2a2:	4b4e      	ldr	r3, [pc, #312]	; (800c3dc <tcp_listen_input+0x1f0>)
 800c2a4:	691a      	ldr	r2, [r3, #16]
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	8ada      	ldrh	r2, [r3, #22]
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c2b2:	4b47      	ldr	r3, [pc, #284]	; (800c3d0 <tcp_listen_input+0x1e4>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	881b      	ldrh	r3, [r3, #0]
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	2203      	movs	r2, #3
 800c2c2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c2c4:	4b41      	ldr	r3, [pc, #260]	; (800c3cc <tcp_listen_input+0x1e0>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	1c5a      	adds	r2, r3, #1
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c2d6:	6978      	ldr	r0, [r7, #20]
 800c2d8:	f7ff fa58 	bl	800b78c <tcp_next_iss>
 800c2dc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	693a      	ldr	r2, [r7, #16]
 800c2e2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	693a      	ldr	r2, [r7, #16]
 800c2e8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	693a      	ldr	r2, [r7, #16]
 800c2f4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c2f6:	4b35      	ldr	r3, [pc, #212]	; (800c3cc <tcp_listen_input+0x1e0>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	1e5a      	subs	r2, r3, #1
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	691a      	ldr	r2, [r3, #16]
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	7a5b      	ldrb	r3, [r3, #9]
 800c312:	f003 030c 	and.w	r3, r3, #12
 800c316:	b2da      	uxtb	r2, r3
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	7a1a      	ldrb	r2, [r3, #8]
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c324:	4b2e      	ldr	r3, [pc, #184]	; (800c3e0 <tcp_listen_input+0x1f4>)
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	60da      	str	r2, [r3, #12]
 800c32c:	4a2c      	ldr	r2, [pc, #176]	; (800c3e0 <tcp_listen_input+0x1f4>)
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	6013      	str	r3, [r2, #0]
 800c332:	f003 f8d1 	bl	800f4d8 <tcp_timer_needed>
 800c336:	4b2b      	ldr	r3, [pc, #172]	; (800c3e4 <tcp_listen_input+0x1f8>)
 800c338:	2201      	movs	r2, #1
 800c33a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c33c:	6978      	ldr	r0, [r7, #20]
 800c33e:	f001 fd8f 	bl	800de60 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c342:	4b23      	ldr	r3, [pc, #140]	; (800c3d0 <tcp_listen_input+0x1e4>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	89db      	ldrh	r3, [r3, #14]
 800c348:	b29a      	uxth	r2, r3
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	3304      	adds	r3, #4
 800c364:	4618      	mov	r0, r3
 800c366:	f005 f829 	bl	80113bc <ip4_route>
 800c36a:	4601      	mov	r1, r0
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	3304      	adds	r3, #4
 800c370:	461a      	mov	r2, r3
 800c372:	4620      	mov	r0, r4
 800c374:	f7ff fa30 	bl	800b7d8 <tcp_eff_send_mss_netif>
 800c378:	4603      	mov	r3, r0
 800c37a:	461a      	mov	r2, r3
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c380:	2112      	movs	r1, #18
 800c382:	6978      	ldr	r0, [r7, #20]
 800c384:	f002 f844 	bl	800e410 <tcp_enqueue_flags>
 800c388:	4603      	mov	r3, r0
 800c38a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c38c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d004      	beq.n	800c39e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c394:	2100      	movs	r1, #0
 800c396:	6978      	ldr	r0, [r7, #20]
 800c398:	f7fe f97e 	bl	800a698 <tcp_abandon>
      return;
 800c39c:	e006      	b.n	800c3ac <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c39e:	6978      	ldr	r0, [r7, #20]
 800c3a0:	f002 f924 	bl	800e5ec <tcp_output>
  return;
 800c3a4:	e001      	b.n	800c3aa <tcp_listen_input+0x1be>
    return;
 800c3a6:	bf00      	nop
 800c3a8:	e000      	b.n	800c3ac <tcp_listen_input+0x1c0>
  return;
 800c3aa:	bf00      	nop
}
 800c3ac:	371c      	adds	r7, #28
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd90      	pop	{r4, r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	2400bd34 	.word	0x2400bd34
 800c3b8:	08014e40 	.word	0x08014e40
 800c3bc:	08015038 	.word	0x08015038
 800c3c0:	08014e8c 	.word	0x08014e8c
 800c3c4:	2400bd2c 	.word	0x2400bd2c
 800c3c8:	2400bd32 	.word	0x2400bd32
 800c3cc:	2400bd28 	.word	0x2400bd28
 800c3d0:	2400bd18 	.word	0x2400bd18
 800c3d4:	24008c00 	.word	0x24008c00
 800c3d8:	24008c04 	.word	0x24008c04
 800c3dc:	24008bf0 	.word	0x24008bf0
 800c3e0:	2400bcfc 	.word	0x2400bcfc
 800c3e4:	2400bd04 	.word	0x2400bd04

0800c3e8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af04      	add	r7, sp, #16
 800c3ee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c3f0:	4b2f      	ldr	r3, [pc, #188]	; (800c4b0 <tcp_timewait_input+0xc8>)
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	f003 0304 	and.w	r3, r3, #4
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d153      	bne.n	800c4a4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d106      	bne.n	800c410 <tcp_timewait_input+0x28>
 800c402:	4b2c      	ldr	r3, [pc, #176]	; (800c4b4 <tcp_timewait_input+0xcc>)
 800c404:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c408:	492b      	ldr	r1, [pc, #172]	; (800c4b8 <tcp_timewait_input+0xd0>)
 800c40a:	482c      	ldr	r0, [pc, #176]	; (800c4bc <tcp_timewait_input+0xd4>)
 800c40c:	f006 fbc6 	bl	8012b9c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c410:	4b27      	ldr	r3, [pc, #156]	; (800c4b0 <tcp_timewait_input+0xc8>)
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	f003 0302 	and.w	r3, r3, #2
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d02a      	beq.n	800c472 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c41c:	4b28      	ldr	r3, [pc, #160]	; (800c4c0 <tcp_timewait_input+0xd8>)
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c424:	1ad3      	subs	r3, r2, r3
 800c426:	2b00      	cmp	r3, #0
 800c428:	db2d      	blt.n	800c486 <tcp_timewait_input+0x9e>
 800c42a:	4b25      	ldr	r3, [pc, #148]	; (800c4c0 <tcp_timewait_input+0xd8>)
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c432:	6879      	ldr	r1, [r7, #4]
 800c434:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c436:	440b      	add	r3, r1
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	dc23      	bgt.n	800c486 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c43e:	4b21      	ldr	r3, [pc, #132]	; (800c4c4 <tcp_timewait_input+0xdc>)
 800c440:	6819      	ldr	r1, [r3, #0]
 800c442:	4b21      	ldr	r3, [pc, #132]	; (800c4c8 <tcp_timewait_input+0xe0>)
 800c444:	881b      	ldrh	r3, [r3, #0]
 800c446:	461a      	mov	r2, r3
 800c448:	4b1d      	ldr	r3, [pc, #116]	; (800c4c0 <tcp_timewait_input+0xd8>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c44e:	4b1f      	ldr	r3, [pc, #124]	; (800c4cc <tcp_timewait_input+0xe4>)
 800c450:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c452:	885b      	ldrh	r3, [r3, #2]
 800c454:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c456:	4a1d      	ldr	r2, [pc, #116]	; (800c4cc <tcp_timewait_input+0xe4>)
 800c458:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c45a:	8812      	ldrh	r2, [r2, #0]
 800c45c:	b292      	uxth	r2, r2
 800c45e:	9202      	str	r2, [sp, #8]
 800c460:	9301      	str	r3, [sp, #4]
 800c462:	4b1b      	ldr	r3, [pc, #108]	; (800c4d0 <tcp_timewait_input+0xe8>)
 800c464:	9300      	str	r3, [sp, #0]
 800c466:	4b1b      	ldr	r3, [pc, #108]	; (800c4d4 <tcp_timewait_input+0xec>)
 800c468:	4602      	mov	r2, r0
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f002 fe72 	bl	800f154 <tcp_rst>
      return;
 800c470:	e01b      	b.n	800c4aa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c472:	4b0f      	ldr	r3, [pc, #60]	; (800c4b0 <tcp_timewait_input+0xc8>)
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	f003 0301 	and.w	r3, r3, #1
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d003      	beq.n	800c486 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c47e:	4b16      	ldr	r3, [pc, #88]	; (800c4d8 <tcp_timewait_input+0xf0>)
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c486:	4b10      	ldr	r3, [pc, #64]	; (800c4c8 <tcp_timewait_input+0xe0>)
 800c488:	881b      	ldrh	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00c      	beq.n	800c4a8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	8b5b      	ldrh	r3, [r3, #26]
 800c492:	f043 0302 	orr.w	r3, r3, #2
 800c496:	b29a      	uxth	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f002 f8a5 	bl	800e5ec <tcp_output>
  }
  return;
 800c4a2:	e001      	b.n	800c4a8 <tcp_timewait_input+0xc0>
    return;
 800c4a4:	bf00      	nop
 800c4a6:	e000      	b.n	800c4aa <tcp_timewait_input+0xc2>
  return;
 800c4a8:	bf00      	nop
}
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	2400bd34 	.word	0x2400bd34
 800c4b4:	08014e40 	.word	0x08014e40
 800c4b8:	08015058 	.word	0x08015058
 800c4bc:	08014e8c 	.word	0x08014e8c
 800c4c0:	2400bd28 	.word	0x2400bd28
 800c4c4:	2400bd2c 	.word	0x2400bd2c
 800c4c8:	2400bd32 	.word	0x2400bd32
 800c4cc:	2400bd18 	.word	0x2400bd18
 800c4d0:	24008c00 	.word	0x24008c00
 800c4d4:	24008c04 	.word	0x24008c04
 800c4d8:	2400bcf0 	.word	0x2400bcf0

0800c4dc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c4dc:	b590      	push	{r4, r7, lr}
 800c4de:	b08d      	sub	sp, #52	; 0x34
 800c4e0:	af04      	add	r7, sp, #16
 800c4e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d106      	bne.n	800c500 <tcp_process+0x24>
 800c4f2:	4b9d      	ldr	r3, [pc, #628]	; (800c768 <tcp_process+0x28c>)
 800c4f4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c4f8:	499c      	ldr	r1, [pc, #624]	; (800c76c <tcp_process+0x290>)
 800c4fa:	489d      	ldr	r0, [pc, #628]	; (800c770 <tcp_process+0x294>)
 800c4fc:	f006 fb4e 	bl	8012b9c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c500:	4b9c      	ldr	r3, [pc, #624]	; (800c774 <tcp_process+0x298>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	f003 0304 	and.w	r3, r3, #4
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d04e      	beq.n	800c5aa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	7d1b      	ldrb	r3, [r3, #20]
 800c510:	2b02      	cmp	r3, #2
 800c512:	d108      	bne.n	800c526 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c518:	4b97      	ldr	r3, [pc, #604]	; (800c778 <tcp_process+0x29c>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d123      	bne.n	800c568 <tcp_process+0x8c>
        acceptable = 1;
 800c520:	2301      	movs	r3, #1
 800c522:	76fb      	strb	r3, [r7, #27]
 800c524:	e020      	b.n	800c568 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c52a:	4b94      	ldr	r3, [pc, #592]	; (800c77c <tcp_process+0x2a0>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d102      	bne.n	800c538 <tcp_process+0x5c>
        acceptable = 1;
 800c532:	2301      	movs	r3, #1
 800c534:	76fb      	strb	r3, [r7, #27]
 800c536:	e017      	b.n	800c568 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c538:	4b90      	ldr	r3, [pc, #576]	; (800c77c <tcp_process+0x2a0>)
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	2b00      	cmp	r3, #0
 800c544:	db10      	blt.n	800c568 <tcp_process+0x8c>
 800c546:	4b8d      	ldr	r3, [pc, #564]	; (800c77c <tcp_process+0x2a0>)
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54e:	6879      	ldr	r1, [r7, #4]
 800c550:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c552:	440b      	add	r3, r1
 800c554:	1ad3      	subs	r3, r2, r3
 800c556:	2b00      	cmp	r3, #0
 800c558:	dc06      	bgt.n	800c568 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	8b5b      	ldrh	r3, [r3, #26]
 800c55e:	f043 0302 	orr.w	r3, r3, #2
 800c562:	b29a      	uxth	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c568:	7efb      	ldrb	r3, [r7, #27]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d01b      	beq.n	800c5a6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	7d1b      	ldrb	r3, [r3, #20]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d106      	bne.n	800c584 <tcp_process+0xa8>
 800c576:	4b7c      	ldr	r3, [pc, #496]	; (800c768 <tcp_process+0x28c>)
 800c578:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c57c:	4980      	ldr	r1, [pc, #512]	; (800c780 <tcp_process+0x2a4>)
 800c57e:	487c      	ldr	r0, [pc, #496]	; (800c770 <tcp_process+0x294>)
 800c580:	f006 fb0c 	bl	8012b9c <iprintf>
      recv_flags |= TF_RESET;
 800c584:	4b7f      	ldr	r3, [pc, #508]	; (800c784 <tcp_process+0x2a8>)
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	f043 0308 	orr.w	r3, r3, #8
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	4b7d      	ldr	r3, [pc, #500]	; (800c784 <tcp_process+0x2a8>)
 800c590:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	8b5b      	ldrh	r3, [r3, #26]
 800c596:	f023 0301 	bic.w	r3, r3, #1
 800c59a:	b29a      	uxth	r2, r3
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c5a0:	f06f 030d 	mvn.w	r3, #13
 800c5a4:	e37a      	b.n	800cc9c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	e378      	b.n	800cc9c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c5aa:	4b72      	ldr	r3, [pc, #456]	; (800c774 <tcp_process+0x298>)
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	f003 0302 	and.w	r3, r3, #2
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d010      	beq.n	800c5d8 <tcp_process+0xfc>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	7d1b      	ldrb	r3, [r3, #20]
 800c5ba:	2b02      	cmp	r3, #2
 800c5bc:	d00c      	beq.n	800c5d8 <tcp_process+0xfc>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	7d1b      	ldrb	r3, [r3, #20]
 800c5c2:	2b03      	cmp	r3, #3
 800c5c4:	d008      	beq.n	800c5d8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	8b5b      	ldrh	r3, [r3, #26]
 800c5ca:	f043 0302 	orr.w	r3, r3, #2
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	e361      	b.n	800cc9c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	8b5b      	ldrh	r3, [r3, #26]
 800c5dc:	f003 0310 	and.w	r3, r3, #16
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d103      	bne.n	800c5ec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c5e4:	4b68      	ldr	r3, [pc, #416]	; (800c788 <tcp_process+0x2ac>)
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f001 fc2f 	bl	800de60 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	7d1b      	ldrb	r3, [r3, #20]
 800c606:	3b02      	subs	r3, #2
 800c608:	2b07      	cmp	r3, #7
 800c60a:	f200 8337 	bhi.w	800cc7c <tcp_process+0x7a0>
 800c60e:	a201      	add	r2, pc, #4	; (adr r2, 800c614 <tcp_process+0x138>)
 800c610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c614:	0800c635 	.word	0x0800c635
 800c618:	0800c865 	.word	0x0800c865
 800c61c:	0800c9dd 	.word	0x0800c9dd
 800c620:	0800ca07 	.word	0x0800ca07
 800c624:	0800cb2b 	.word	0x0800cb2b
 800c628:	0800c9dd 	.word	0x0800c9dd
 800c62c:	0800cbb7 	.word	0x0800cbb7
 800c630:	0800cc47 	.word	0x0800cc47
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c634:	4b4f      	ldr	r3, [pc, #316]	; (800c774 <tcp_process+0x298>)
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	f003 0310 	and.w	r3, r3, #16
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f000 80e4 	beq.w	800c80a <tcp_process+0x32e>
 800c642:	4b4c      	ldr	r3, [pc, #304]	; (800c774 <tcp_process+0x298>)
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	f003 0302 	and.w	r3, r3, #2
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f000 80dd 	beq.w	800c80a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c654:	1c5a      	adds	r2, r3, #1
 800c656:	4b48      	ldr	r3, [pc, #288]	; (800c778 <tcp_process+0x29c>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	f040 80d5 	bne.w	800c80a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c660:	4b46      	ldr	r3, [pc, #280]	; (800c77c <tcp_process+0x2a0>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	1c5a      	adds	r2, r3, #1
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c672:	4b41      	ldr	r3, [pc, #260]	; (800c778 <tcp_process+0x29c>)
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c67a:	4b44      	ldr	r3, [pc, #272]	; (800c78c <tcp_process+0x2b0>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	89db      	ldrh	r3, [r3, #14]
 800c680:	b29a      	uxth	r2, r3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c694:	4b39      	ldr	r3, [pc, #228]	; (800c77c <tcp_process+0x2a0>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	1e5a      	subs	r2, r3, #1
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2204      	movs	r2, #4
 800c6a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	3304      	adds	r3, #4
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f004 fe85 	bl	80113bc <ip4_route>
 800c6b2:	4601      	mov	r1, r0
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f7ff f88c 	bl	800b7d8 <tcp_eff_send_mss_netif>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6cc:	009a      	lsls	r2, r3, #2
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6d2:	005b      	lsls	r3, r3, #1
 800c6d4:	f241 111c 	movw	r1, #4380	; 0x111c
 800c6d8:	428b      	cmp	r3, r1
 800c6da:	bf38      	it	cc
 800c6dc:	460b      	movcc	r3, r1
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d204      	bcs.n	800c6ec <tcp_process+0x210>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6e6:	009b      	lsls	r3, r3, #2
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	e00d      	b.n	800c708 <tcp_process+0x22c>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6f0:	005b      	lsls	r3, r3, #1
 800c6f2:	f241 121c 	movw	r2, #4380	; 0x111c
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d904      	bls.n	800c704 <tcp_process+0x228>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6fe:	005b      	lsls	r3, r3, #1
 800c700:	b29b      	uxth	r3, r3
 800c702:	e001      	b.n	800c708 <tcp_process+0x22c>
 800c704:	f241 131c 	movw	r3, #4380	; 0x111c
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c714:	2b00      	cmp	r3, #0
 800c716:	d106      	bne.n	800c726 <tcp_process+0x24a>
 800c718:	4b13      	ldr	r3, [pc, #76]	; (800c768 <tcp_process+0x28c>)
 800c71a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c71e:	491c      	ldr	r1, [pc, #112]	; (800c790 <tcp_process+0x2b4>)
 800c720:	4813      	ldr	r0, [pc, #76]	; (800c770 <tcp_process+0x294>)
 800c722:	f006 fa3b 	bl	8012b9c <iprintf>
        --pcb->snd_queuelen;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c72c:	3b01      	subs	r3, #1
 800c72e:	b29a      	uxth	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c73a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d12a      	bne.n	800c798 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c746:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d106      	bne.n	800c75c <tcp_process+0x280>
 800c74e:	4b06      	ldr	r3, [pc, #24]	; (800c768 <tcp_process+0x28c>)
 800c750:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c754:	490f      	ldr	r1, [pc, #60]	; (800c794 <tcp_process+0x2b8>)
 800c756:	4806      	ldr	r0, [pc, #24]	; (800c770 <tcp_process+0x294>)
 800c758:	f006 fa20 	bl	8012b9c <iprintf>
          pcb->unsent = rseg->next;
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	66da      	str	r2, [r3, #108]	; 0x6c
 800c764:	e01c      	b.n	800c7a0 <tcp_process+0x2c4>
 800c766:	bf00      	nop
 800c768:	08014e40 	.word	0x08014e40
 800c76c:	08015078 	.word	0x08015078
 800c770:	08014e8c 	.word	0x08014e8c
 800c774:	2400bd34 	.word	0x2400bd34
 800c778:	2400bd2c 	.word	0x2400bd2c
 800c77c:	2400bd28 	.word	0x2400bd28
 800c780:	08015094 	.word	0x08015094
 800c784:	2400bd35 	.word	0x2400bd35
 800c788:	2400bcf0 	.word	0x2400bcf0
 800c78c:	2400bd18 	.word	0x2400bd18
 800c790:	080150b4 	.word	0x080150b4
 800c794:	080150cc 	.word	0x080150cc
        } else {
          pcb->unacked = rseg->next;
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c7a0:	69f8      	ldr	r0, [r7, #28]
 800c7a2:	f7fe fd22 	bl	800b1ea <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d104      	bne.n	800c7b8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7b4:	861a      	strh	r2, [r3, #48]	; 0x30
 800c7b6:	e006      	b.n	800c7c6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00a      	beq.n	800c7e6 <tcp_process+0x30a>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	6910      	ldr	r0, [r2, #16]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	6879      	ldr	r1, [r7, #4]
 800c7de:	4798      	blx	r3
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	76bb      	strb	r3, [r7, #26]
 800c7e4:	e001      	b.n	800c7ea <tcp_process+0x30e>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c7ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c7ee:	f113 0f0d 	cmn.w	r3, #13
 800c7f2:	d102      	bne.n	800c7fa <tcp_process+0x31e>
          return ERR_ABRT;
 800c7f4:	f06f 030c 	mvn.w	r3, #12
 800c7f8:	e250      	b.n	800cc9c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	8b5b      	ldrh	r3, [r3, #26]
 800c7fe:	f043 0302 	orr.w	r3, r3, #2
 800c802:	b29a      	uxth	r2, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c808:	e23a      	b.n	800cc80 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c80a:	4b98      	ldr	r3, [pc, #608]	; (800ca6c <tcp_process+0x590>)
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	f003 0310 	and.w	r3, r3, #16
 800c812:	2b00      	cmp	r3, #0
 800c814:	f000 8234 	beq.w	800cc80 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c818:	4b95      	ldr	r3, [pc, #596]	; (800ca70 <tcp_process+0x594>)
 800c81a:	6819      	ldr	r1, [r3, #0]
 800c81c:	4b95      	ldr	r3, [pc, #596]	; (800ca74 <tcp_process+0x598>)
 800c81e:	881b      	ldrh	r3, [r3, #0]
 800c820:	461a      	mov	r2, r3
 800c822:	4b95      	ldr	r3, [pc, #596]	; (800ca78 <tcp_process+0x59c>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c828:	4b94      	ldr	r3, [pc, #592]	; (800ca7c <tcp_process+0x5a0>)
 800c82a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c82c:	885b      	ldrh	r3, [r3, #2]
 800c82e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c830:	4a92      	ldr	r2, [pc, #584]	; (800ca7c <tcp_process+0x5a0>)
 800c832:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c834:	8812      	ldrh	r2, [r2, #0]
 800c836:	b292      	uxth	r2, r2
 800c838:	9202      	str	r2, [sp, #8]
 800c83a:	9301      	str	r3, [sp, #4]
 800c83c:	4b90      	ldr	r3, [pc, #576]	; (800ca80 <tcp_process+0x5a4>)
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	4b90      	ldr	r3, [pc, #576]	; (800ca84 <tcp_process+0x5a8>)
 800c842:	4602      	mov	r2, r0
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f002 fc85 	bl	800f154 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c850:	2b05      	cmp	r3, #5
 800c852:	f200 8215 	bhi.w	800cc80 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f002 fa51 	bl	800ed04 <tcp_rexmit_rto>
      break;
 800c862:	e20d      	b.n	800cc80 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c864:	4b81      	ldr	r3, [pc, #516]	; (800ca6c <tcp_process+0x590>)
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	f003 0310 	and.w	r3, r3, #16
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f000 80a1 	beq.w	800c9b4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c872:	4b7f      	ldr	r3, [pc, #508]	; (800ca70 <tcp_process+0x594>)
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c87a:	1ad3      	subs	r3, r2, r3
 800c87c:	3b01      	subs	r3, #1
 800c87e:	2b00      	cmp	r3, #0
 800c880:	db7e      	blt.n	800c980 <tcp_process+0x4a4>
 800c882:	4b7b      	ldr	r3, [pc, #492]	; (800ca70 <tcp_process+0x594>)
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c88a:	1ad3      	subs	r3, r2, r3
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	dc77      	bgt.n	800c980 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2204      	movs	r2, #4
 800c894:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d102      	bne.n	800c8a4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c89e:	23fa      	movs	r3, #250	; 0xfa
 800c8a0:	76bb      	strb	r3, [r7, #26]
 800c8a2:	e01d      	b.n	800c8e0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8a8:	699b      	ldr	r3, [r3, #24]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d106      	bne.n	800c8bc <tcp_process+0x3e0>
 800c8ae:	4b76      	ldr	r3, [pc, #472]	; (800ca88 <tcp_process+0x5ac>)
 800c8b0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c8b4:	4975      	ldr	r1, [pc, #468]	; (800ca8c <tcp_process+0x5b0>)
 800c8b6:	4876      	ldr	r0, [pc, #472]	; (800ca90 <tcp_process+0x5b4>)
 800c8b8:	f006 f970 	bl	8012b9c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8c0:	699b      	ldr	r3, [r3, #24]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d00a      	beq.n	800c8dc <tcp_process+0x400>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8ca:	699b      	ldr	r3, [r3, #24]
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	6910      	ldr	r0, [r2, #16]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	6879      	ldr	r1, [r7, #4]
 800c8d4:	4798      	blx	r3
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	76bb      	strb	r3, [r7, #26]
 800c8da:	e001      	b.n	800c8e0 <tcp_process+0x404>
 800c8dc:	23f0      	movs	r3, #240	; 0xf0
 800c8de:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c8e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00a      	beq.n	800c8fe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c8e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c8ec:	f113 0f0d 	cmn.w	r3, #13
 800c8f0:	d002      	beq.n	800c8f8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f7fd ff8e 	bl	800a814 <tcp_abort>
            }
            return ERR_ABRT;
 800c8f8:	f06f 030c 	mvn.w	r3, #12
 800c8fc:	e1ce      	b.n	800cc9c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fae0 	bl	800cec4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c904:	4b63      	ldr	r3, [pc, #396]	; (800ca94 <tcp_process+0x5b8>)
 800c906:	881b      	ldrh	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d005      	beq.n	800c918 <tcp_process+0x43c>
            recv_acked--;
 800c90c:	4b61      	ldr	r3, [pc, #388]	; (800ca94 <tcp_process+0x5b8>)
 800c90e:	881b      	ldrh	r3, [r3, #0]
 800c910:	3b01      	subs	r3, #1
 800c912:	b29a      	uxth	r2, r3
 800c914:	4b5f      	ldr	r3, [pc, #380]	; (800ca94 <tcp_process+0x5b8>)
 800c916:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c91c:	009a      	lsls	r2, r3, #2
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c922:	005b      	lsls	r3, r3, #1
 800c924:	f241 111c 	movw	r1, #4380	; 0x111c
 800c928:	428b      	cmp	r3, r1
 800c92a:	bf38      	it	cc
 800c92c:	460b      	movcc	r3, r1
 800c92e:	429a      	cmp	r2, r3
 800c930:	d204      	bcs.n	800c93c <tcp_process+0x460>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c936:	009b      	lsls	r3, r3, #2
 800c938:	b29b      	uxth	r3, r3
 800c93a:	e00d      	b.n	800c958 <tcp_process+0x47c>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c940:	005b      	lsls	r3, r3, #1
 800c942:	f241 121c 	movw	r2, #4380	; 0x111c
 800c946:	4293      	cmp	r3, r2
 800c948:	d904      	bls.n	800c954 <tcp_process+0x478>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	b29b      	uxth	r3, r3
 800c952:	e001      	b.n	800c958 <tcp_process+0x47c>
 800c954:	f241 131c 	movw	r3, #4380	; 0x111c
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c95e:	4b4e      	ldr	r3, [pc, #312]	; (800ca98 <tcp_process+0x5bc>)
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	f003 0320 	and.w	r3, r3, #32
 800c966:	2b00      	cmp	r3, #0
 800c968:	d037      	beq.n	800c9da <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	8b5b      	ldrh	r3, [r3, #26]
 800c96e:	f043 0302 	orr.w	r3, r3, #2
 800c972:	b29a      	uxth	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2207      	movs	r2, #7
 800c97c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c97e:	e02c      	b.n	800c9da <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c980:	4b3b      	ldr	r3, [pc, #236]	; (800ca70 <tcp_process+0x594>)
 800c982:	6819      	ldr	r1, [r3, #0]
 800c984:	4b3b      	ldr	r3, [pc, #236]	; (800ca74 <tcp_process+0x598>)
 800c986:	881b      	ldrh	r3, [r3, #0]
 800c988:	461a      	mov	r2, r3
 800c98a:	4b3b      	ldr	r3, [pc, #236]	; (800ca78 <tcp_process+0x59c>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c990:	4b3a      	ldr	r3, [pc, #232]	; (800ca7c <tcp_process+0x5a0>)
 800c992:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c994:	885b      	ldrh	r3, [r3, #2]
 800c996:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c998:	4a38      	ldr	r2, [pc, #224]	; (800ca7c <tcp_process+0x5a0>)
 800c99a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c99c:	8812      	ldrh	r2, [r2, #0]
 800c99e:	b292      	uxth	r2, r2
 800c9a0:	9202      	str	r2, [sp, #8]
 800c9a2:	9301      	str	r3, [sp, #4]
 800c9a4:	4b36      	ldr	r3, [pc, #216]	; (800ca80 <tcp_process+0x5a4>)
 800c9a6:	9300      	str	r3, [sp, #0]
 800c9a8:	4b36      	ldr	r3, [pc, #216]	; (800ca84 <tcp_process+0x5a8>)
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f002 fbd1 	bl	800f154 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c9b2:	e167      	b.n	800cc84 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c9b4:	4b2d      	ldr	r3, [pc, #180]	; (800ca6c <tcp_process+0x590>)
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	f003 0302 	and.w	r3, r3, #2
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f000 8161 	beq.w	800cc84 <tcp_process+0x7a8>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c6:	1e5a      	subs	r2, r3, #1
 800c9c8:	4b2b      	ldr	r3, [pc, #172]	; (800ca78 <tcp_process+0x59c>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	f040 8159 	bne.w	800cc84 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f002 f9b8 	bl	800ed48 <tcp_rexmit>
      break;
 800c9d8:	e154      	b.n	800cc84 <tcp_process+0x7a8>
 800c9da:	e153      	b.n	800cc84 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 fa71 	bl	800cec4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c9e2:	4b2d      	ldr	r3, [pc, #180]	; (800ca98 <tcp_process+0x5bc>)
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	f003 0320 	and.w	r3, r3, #32
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	f000 814c 	beq.w	800cc88 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	8b5b      	ldrh	r3, [r3, #26]
 800c9f4:	f043 0302 	orr.w	r3, r3, #2
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2207      	movs	r2, #7
 800ca02:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ca04:	e140      	b.n	800cc88 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 fa5c 	bl	800cec4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ca0c:	4b22      	ldr	r3, [pc, #136]	; (800ca98 <tcp_process+0x5bc>)
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	f003 0320 	and.w	r3, r3, #32
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d071      	beq.n	800cafc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ca18:	4b14      	ldr	r3, [pc, #80]	; (800ca6c <tcp_process+0x590>)
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	f003 0310 	and.w	r3, r3, #16
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d060      	beq.n	800cae6 <tcp_process+0x60a>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca28:	4b11      	ldr	r3, [pc, #68]	; (800ca70 <tcp_process+0x594>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d15a      	bne.n	800cae6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d156      	bne.n	800cae6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	8b5b      	ldrh	r3, [r3, #26]
 800ca3c:	f043 0302 	orr.w	r3, r3, #2
 800ca40:	b29a      	uxth	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f7fe fdbc 	bl	800b5c4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ca4c:	4b13      	ldr	r3, [pc, #76]	; (800ca9c <tcp_process+0x5c0>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d105      	bne.n	800ca62 <tcp_process+0x586>
 800ca56:	4b11      	ldr	r3, [pc, #68]	; (800ca9c <tcp_process+0x5c0>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	4a0f      	ldr	r2, [pc, #60]	; (800ca9c <tcp_process+0x5c0>)
 800ca5e:	6013      	str	r3, [r2, #0]
 800ca60:	e02e      	b.n	800cac0 <tcp_process+0x5e4>
 800ca62:	4b0e      	ldr	r3, [pc, #56]	; (800ca9c <tcp_process+0x5c0>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	617b      	str	r3, [r7, #20]
 800ca68:	e027      	b.n	800caba <tcp_process+0x5de>
 800ca6a:	bf00      	nop
 800ca6c:	2400bd34 	.word	0x2400bd34
 800ca70:	2400bd2c 	.word	0x2400bd2c
 800ca74:	2400bd32 	.word	0x2400bd32
 800ca78:	2400bd28 	.word	0x2400bd28
 800ca7c:	2400bd18 	.word	0x2400bd18
 800ca80:	24008c00 	.word	0x24008c00
 800ca84:	24008c04 	.word	0x24008c04
 800ca88:	08014e40 	.word	0x08014e40
 800ca8c:	080150e0 	.word	0x080150e0
 800ca90:	08014e8c 	.word	0x08014e8c
 800ca94:	2400bd30 	.word	0x2400bd30
 800ca98:	2400bd35 	.word	0x2400bd35
 800ca9c:	2400bcfc 	.word	0x2400bcfc
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d104      	bne.n	800cab4 <tcp_process+0x5d8>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	68da      	ldr	r2, [r3, #12]
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	60da      	str	r2, [r3, #12]
 800cab2:	e005      	b.n	800cac0 <tcp_process+0x5e4>
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	617b      	str	r3, [r7, #20]
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d1ef      	bne.n	800caa0 <tcp_process+0x5c4>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2200      	movs	r2, #0
 800cac4:	60da      	str	r2, [r3, #12]
 800cac6:	4b77      	ldr	r3, [pc, #476]	; (800cca4 <tcp_process+0x7c8>)
 800cac8:	2201      	movs	r2, #1
 800caca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	220a      	movs	r2, #10
 800cad0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800cad2:	4b75      	ldr	r3, [pc, #468]	; (800cca8 <tcp_process+0x7cc>)
 800cad4:	681a      	ldr	r2, [r3, #0]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	60da      	str	r2, [r3, #12]
 800cada:	4a73      	ldr	r2, [pc, #460]	; (800cca8 <tcp_process+0x7cc>)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6013      	str	r3, [r2, #0]
 800cae0:	f002 fcfa 	bl	800f4d8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800cae4:	e0d2      	b.n	800cc8c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	8b5b      	ldrh	r3, [r3, #26]
 800caea:	f043 0302 	orr.w	r3, r3, #2
 800caee:	b29a      	uxth	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2208      	movs	r2, #8
 800caf8:	751a      	strb	r2, [r3, #20]
      break;
 800cafa:	e0c7      	b.n	800cc8c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cafc:	4b6b      	ldr	r3, [pc, #428]	; (800ccac <tcp_process+0x7d0>)
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	f003 0310 	and.w	r3, r3, #16
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	f000 80c1 	beq.w	800cc8c <tcp_process+0x7b0>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb0e:	4b68      	ldr	r3, [pc, #416]	; (800ccb0 <tcp_process+0x7d4>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	f040 80ba 	bne.w	800cc8c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f040 80b5 	bne.w	800cc8c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2206      	movs	r2, #6
 800cb26:	751a      	strb	r2, [r3, #20]
      break;
 800cb28:	e0b0      	b.n	800cc8c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 f9ca 	bl	800cec4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cb30:	4b60      	ldr	r3, [pc, #384]	; (800ccb4 <tcp_process+0x7d8>)
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	f003 0320 	and.w	r3, r3, #32
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f000 80a9 	beq.w	800cc90 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	8b5b      	ldrh	r3, [r3, #26]
 800cb42:	f043 0302 	orr.w	r3, r3, #2
 800cb46:	b29a      	uxth	r2, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7fe fd39 	bl	800b5c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cb52:	4b59      	ldr	r3, [pc, #356]	; (800ccb8 <tcp_process+0x7dc>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d105      	bne.n	800cb68 <tcp_process+0x68c>
 800cb5c:	4b56      	ldr	r3, [pc, #344]	; (800ccb8 <tcp_process+0x7dc>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	4a55      	ldr	r2, [pc, #340]	; (800ccb8 <tcp_process+0x7dc>)
 800cb64:	6013      	str	r3, [r2, #0]
 800cb66:	e013      	b.n	800cb90 <tcp_process+0x6b4>
 800cb68:	4b53      	ldr	r3, [pc, #332]	; (800ccb8 <tcp_process+0x7dc>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	613b      	str	r3, [r7, #16]
 800cb6e:	e00c      	b.n	800cb8a <tcp_process+0x6ae>
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d104      	bne.n	800cb84 <tcp_process+0x6a8>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	68da      	ldr	r2, [r3, #12]
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	60da      	str	r2, [r3, #12]
 800cb82:	e005      	b.n	800cb90 <tcp_process+0x6b4>
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	68db      	ldr	r3, [r3, #12]
 800cb88:	613b      	str	r3, [r7, #16]
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d1ef      	bne.n	800cb70 <tcp_process+0x694>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	60da      	str	r2, [r3, #12]
 800cb96:	4b43      	ldr	r3, [pc, #268]	; (800cca4 <tcp_process+0x7c8>)
 800cb98:	2201      	movs	r2, #1
 800cb9a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	220a      	movs	r2, #10
 800cba0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cba2:	4b41      	ldr	r3, [pc, #260]	; (800cca8 <tcp_process+0x7cc>)
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	60da      	str	r2, [r3, #12]
 800cbaa:	4a3f      	ldr	r2, [pc, #252]	; (800cca8 <tcp_process+0x7cc>)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6013      	str	r3, [r2, #0]
 800cbb0:	f002 fc92 	bl	800f4d8 <tcp_timer_needed>
      }
      break;
 800cbb4:	e06c      	b.n	800cc90 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 f984 	bl	800cec4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cbbc:	4b3b      	ldr	r3, [pc, #236]	; (800ccac <tcp_process+0x7d0>)
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	f003 0310 	and.w	r3, r3, #16
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d065      	beq.n	800cc94 <tcp_process+0x7b8>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cbcc:	4b38      	ldr	r3, [pc, #224]	; (800ccb0 <tcp_process+0x7d4>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d15f      	bne.n	800cc94 <tcp_process+0x7b8>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d15b      	bne.n	800cc94 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f7fe fcf1 	bl	800b5c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cbe2:	4b35      	ldr	r3, [pc, #212]	; (800ccb8 <tcp_process+0x7dc>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d105      	bne.n	800cbf8 <tcp_process+0x71c>
 800cbec:	4b32      	ldr	r3, [pc, #200]	; (800ccb8 <tcp_process+0x7dc>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	4a31      	ldr	r2, [pc, #196]	; (800ccb8 <tcp_process+0x7dc>)
 800cbf4:	6013      	str	r3, [r2, #0]
 800cbf6:	e013      	b.n	800cc20 <tcp_process+0x744>
 800cbf8:	4b2f      	ldr	r3, [pc, #188]	; (800ccb8 <tcp_process+0x7dc>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	60fb      	str	r3, [r7, #12]
 800cbfe:	e00c      	b.n	800cc1a <tcp_process+0x73e>
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d104      	bne.n	800cc14 <tcp_process+0x738>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	68da      	ldr	r2, [r3, #12]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	60da      	str	r2, [r3, #12]
 800cc12:	e005      	b.n	800cc20 <tcp_process+0x744>
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	60fb      	str	r3, [r7, #12]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1ef      	bne.n	800cc00 <tcp_process+0x724>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2200      	movs	r2, #0
 800cc24:	60da      	str	r2, [r3, #12]
 800cc26:	4b1f      	ldr	r3, [pc, #124]	; (800cca4 <tcp_process+0x7c8>)
 800cc28:	2201      	movs	r2, #1
 800cc2a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	220a      	movs	r2, #10
 800cc30:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cc32:	4b1d      	ldr	r3, [pc, #116]	; (800cca8 <tcp_process+0x7cc>)
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	60da      	str	r2, [r3, #12]
 800cc3a:	4a1b      	ldr	r2, [pc, #108]	; (800cca8 <tcp_process+0x7cc>)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6013      	str	r3, [r2, #0]
 800cc40:	f002 fc4a 	bl	800f4d8 <tcp_timer_needed>
      }
      break;
 800cc44:	e026      	b.n	800cc94 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 f93c 	bl	800cec4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cc4c:	4b17      	ldr	r3, [pc, #92]	; (800ccac <tcp_process+0x7d0>)
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	f003 0310 	and.w	r3, r3, #16
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d01f      	beq.n	800cc98 <tcp_process+0x7bc>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc5c:	4b14      	ldr	r3, [pc, #80]	; (800ccb0 <tcp_process+0x7d4>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d119      	bne.n	800cc98 <tcp_process+0x7bc>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d115      	bne.n	800cc98 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800cc6c:	4b11      	ldr	r3, [pc, #68]	; (800ccb4 <tcp_process+0x7d8>)
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	f043 0310 	orr.w	r3, r3, #16
 800cc74:	b2da      	uxtb	r2, r3
 800cc76:	4b0f      	ldr	r3, [pc, #60]	; (800ccb4 <tcp_process+0x7d8>)
 800cc78:	701a      	strb	r2, [r3, #0]
      }
      break;
 800cc7a:	e00d      	b.n	800cc98 <tcp_process+0x7bc>
    default:
      break;
 800cc7c:	bf00      	nop
 800cc7e:	e00c      	b.n	800cc9a <tcp_process+0x7be>
      break;
 800cc80:	bf00      	nop
 800cc82:	e00a      	b.n	800cc9a <tcp_process+0x7be>
      break;
 800cc84:	bf00      	nop
 800cc86:	e008      	b.n	800cc9a <tcp_process+0x7be>
      break;
 800cc88:	bf00      	nop
 800cc8a:	e006      	b.n	800cc9a <tcp_process+0x7be>
      break;
 800cc8c:	bf00      	nop
 800cc8e:	e004      	b.n	800cc9a <tcp_process+0x7be>
      break;
 800cc90:	bf00      	nop
 800cc92:	e002      	b.n	800cc9a <tcp_process+0x7be>
      break;
 800cc94:	bf00      	nop
 800cc96:	e000      	b.n	800cc9a <tcp_process+0x7be>
      break;
 800cc98:	bf00      	nop
  }
  return ERR_OK;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3724      	adds	r7, #36	; 0x24
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd90      	pop	{r4, r7, pc}
 800cca4:	2400bd04 	.word	0x2400bd04
 800cca8:	2400bd00 	.word	0x2400bd00
 800ccac:	2400bd34 	.word	0x2400bd34
 800ccb0:	2400bd2c 	.word	0x2400bd2c
 800ccb4:	2400bd35 	.word	0x2400bd35
 800ccb8:	2400bcfc 	.word	0x2400bcfc

0800ccbc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ccbc:	b590      	push	{r4, r7, lr}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d106      	bne.n	800ccda <tcp_oos_insert_segment+0x1e>
 800cccc:	4b3b      	ldr	r3, [pc, #236]	; (800cdbc <tcp_oos_insert_segment+0x100>)
 800ccce:	f240 421f 	movw	r2, #1055	; 0x41f
 800ccd2:	493b      	ldr	r1, [pc, #236]	; (800cdc0 <tcp_oos_insert_segment+0x104>)
 800ccd4:	483b      	ldr	r0, [pc, #236]	; (800cdc4 <tcp_oos_insert_segment+0x108>)
 800ccd6:	f005 ff61 	bl	8012b9c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	899b      	ldrh	r3, [r3, #12]
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7fb fb5c 	bl	80083a0 <lwip_htons>
 800cce8:	4603      	mov	r3, r0
 800ccea:	b2db      	uxtb	r3, r3
 800ccec:	f003 0301 	and.w	r3, r3, #1
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d028      	beq.n	800cd46 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ccf4:	6838      	ldr	r0, [r7, #0]
 800ccf6:	f7fe fa63 	bl	800b1c0 <tcp_segs_free>
    next = NULL;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	603b      	str	r3, [r7, #0]
 800ccfe:	e056      	b.n	800cdae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	899b      	ldrh	r3, [r3, #12]
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7fb fb49 	bl	80083a0 <lwip_htons>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	f003 0301 	and.w	r3, r3, #1
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00d      	beq.n	800cd36 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	68db      	ldr	r3, [r3, #12]
 800cd1e:	899b      	ldrh	r3, [r3, #12]
 800cd20:	b29c      	uxth	r4, r3
 800cd22:	2001      	movs	r0, #1
 800cd24:	f7fb fb3c 	bl	80083a0 <lwip_htons>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	4322      	orrs	r2, r4
 800cd32:	b292      	uxth	r2, r2
 800cd34:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f7fe fa52 	bl	800b1ea <tcp_seg_free>
    while (next &&
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00e      	beq.n	800cd6a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	891b      	ldrh	r3, [r3, #8]
 800cd50:	461a      	mov	r2, r3
 800cd52:	4b1d      	ldr	r3, [pc, #116]	; (800cdc8 <tcp_oos_insert_segment+0x10c>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	441a      	add	r2, r3
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	6839      	ldr	r1, [r7, #0]
 800cd60:	8909      	ldrh	r1, [r1, #8]
 800cd62:	440b      	add	r3, r1
 800cd64:	1ad3      	subs	r3, r2, r3
    while (next &&
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	daca      	bge.n	800cd00 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d01e      	beq.n	800cdae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	891b      	ldrh	r3, [r3, #8]
 800cd74:	461a      	mov	r2, r3
 800cd76:	4b14      	ldr	r3, [pc, #80]	; (800cdc8 <tcp_oos_insert_segment+0x10c>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	441a      	add	r2, r3
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	1ad3      	subs	r3, r2, r3
    if (next &&
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	dd12      	ble.n	800cdae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	b29a      	uxth	r2, r3
 800cd90:	4b0d      	ldr	r3, [pc, #52]	; (800cdc8 <tcp_oos_insert_segment+0x10c>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	b29b      	uxth	r3, r3
 800cd96:	1ad3      	subs	r3, r2, r3
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	685a      	ldr	r2, [r3, #4]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	891b      	ldrh	r3, [r3, #8]
 800cda6:	4619      	mov	r1, r3
 800cda8:	4610      	mov	r0, r2
 800cdaa:	f7fc fe0b 	bl	80099c4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	683a      	ldr	r2, [r7, #0]
 800cdb2:	601a      	str	r2, [r3, #0]
}
 800cdb4:	bf00      	nop
 800cdb6:	3714      	adds	r7, #20
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd90      	pop	{r4, r7, pc}
 800cdbc:	08014e40 	.word	0x08014e40
 800cdc0:	08015100 	.word	0x08015100
 800cdc4:	08014e8c 	.word	0x08014e8c
 800cdc8:	2400bd28 	.word	0x2400bd28

0800cdcc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800cdcc:	b5b0      	push	{r4, r5, r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
 800cdd8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800cdda:	e03e      	b.n	800ce5a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fc fffc 	bl	8009de8 <pbuf_clen>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cdfa:	8a7a      	ldrh	r2, [r7, #18]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d906      	bls.n	800ce0e <tcp_free_acked_segments+0x42>
 800ce00:	4b2a      	ldr	r3, [pc, #168]	; (800ceac <tcp_free_acked_segments+0xe0>)
 800ce02:	f240 4257 	movw	r2, #1111	; 0x457
 800ce06:	492a      	ldr	r1, [pc, #168]	; (800ceb0 <tcp_free_acked_segments+0xe4>)
 800ce08:	482a      	ldr	r0, [pc, #168]	; (800ceb4 <tcp_free_acked_segments+0xe8>)
 800ce0a:	f005 fec7 	bl	8012b9c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ce14:	8a7b      	ldrh	r3, [r7, #18]
 800ce16:	1ad3      	subs	r3, r2, r3
 800ce18:	b29a      	uxth	r2, r3
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	891a      	ldrh	r2, [r3, #8]
 800ce24:	4b24      	ldr	r3, [pc, #144]	; (800ceb8 <tcp_free_acked_segments+0xec>)
 800ce26:	881b      	ldrh	r3, [r3, #0]
 800ce28:	4413      	add	r3, r2
 800ce2a:	b29a      	uxth	r2, r3
 800ce2c:	4b22      	ldr	r3, [pc, #136]	; (800ceb8 <tcp_free_acked_segments+0xec>)
 800ce2e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ce30:	6978      	ldr	r0, [r7, #20]
 800ce32:	f7fe f9da 	bl	800b1ea <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00c      	beq.n	800ce5a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d109      	bne.n	800ce5a <tcp_free_acked_segments+0x8e>
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d106      	bne.n	800ce5a <tcp_free_acked_segments+0x8e>
 800ce4c:	4b17      	ldr	r3, [pc, #92]	; (800ceac <tcp_free_acked_segments+0xe0>)
 800ce4e:	f240 4261 	movw	r2, #1121	; 0x461
 800ce52:	491a      	ldr	r1, [pc, #104]	; (800cebc <tcp_free_acked_segments+0xf0>)
 800ce54:	4817      	ldr	r0, [pc, #92]	; (800ceb4 <tcp_free_acked_segments+0xe8>)
 800ce56:	f005 fea1 	bl	8012b9c <iprintf>
  while (seg_list != NULL &&
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d020      	beq.n	800cea2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fb faaf 	bl	80083ca <lwip_htonl>
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	891b      	ldrh	r3, [r3, #8]
 800ce72:	461d      	mov	r5, r3
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	899b      	ldrh	r3, [r3, #12]
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7fb fa8f 	bl	80083a0 <lwip_htons>
 800ce82:	4603      	mov	r3, r0
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	f003 0303 	and.w	r3, r3, #3
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d001      	beq.n	800ce92 <tcp_free_acked_segments+0xc6>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e000      	b.n	800ce94 <tcp_free_acked_segments+0xc8>
 800ce92:	2300      	movs	r3, #0
 800ce94:	442b      	add	r3, r5
 800ce96:	18e2      	adds	r2, r4, r3
 800ce98:	4b09      	ldr	r3, [pc, #36]	; (800cec0 <tcp_free_acked_segments+0xf4>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	dd9c      	ble.n	800cddc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800cea2:	68bb      	ldr	r3, [r7, #8]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3718      	adds	r7, #24
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bdb0      	pop	{r4, r5, r7, pc}
 800ceac:	08014e40 	.word	0x08014e40
 800ceb0:	08015128 	.word	0x08015128
 800ceb4:	08014e8c 	.word	0x08014e8c
 800ceb8:	2400bd30 	.word	0x2400bd30
 800cebc:	08015150 	.word	0x08015150
 800cec0:	2400bd2c 	.word	0x2400bd2c

0800cec4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800cec4:	b5b0      	push	{r4, r5, r7, lr}
 800cec6:	b094      	sub	sp, #80	; 0x50
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800cecc:	2300      	movs	r3, #0
 800cece:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d106      	bne.n	800cee4 <tcp_receive+0x20>
 800ced6:	4b91      	ldr	r3, [pc, #580]	; (800d11c <tcp_receive+0x258>)
 800ced8:	f240 427b 	movw	r2, #1147	; 0x47b
 800cedc:	4990      	ldr	r1, [pc, #576]	; (800d120 <tcp_receive+0x25c>)
 800cede:	4891      	ldr	r0, [pc, #580]	; (800d124 <tcp_receive+0x260>)
 800cee0:	f005 fe5c 	bl	8012b9c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	7d1b      	ldrb	r3, [r3, #20]
 800cee8:	2b03      	cmp	r3, #3
 800ceea:	d806      	bhi.n	800cefa <tcp_receive+0x36>
 800ceec:	4b8b      	ldr	r3, [pc, #556]	; (800d11c <tcp_receive+0x258>)
 800ceee:	f240 427c 	movw	r2, #1148	; 0x47c
 800cef2:	498d      	ldr	r1, [pc, #564]	; (800d128 <tcp_receive+0x264>)
 800cef4:	488b      	ldr	r0, [pc, #556]	; (800d124 <tcp_receive+0x260>)
 800cef6:	f005 fe51 	bl	8012b9c <iprintf>

  if (flags & TCP_ACK) {
 800cefa:	4b8c      	ldr	r3, [pc, #560]	; (800d12c <tcp_receive+0x268>)
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	f003 0310 	and.w	r3, r3, #16
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f000 8264 	beq.w	800d3d0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf0e:	461a      	mov	r2, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf14:	4413      	add	r3, r2
 800cf16:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf1c:	4b84      	ldr	r3, [pc, #528]	; (800d130 <tcp_receive+0x26c>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	1ad3      	subs	r3, r2, r3
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	db1b      	blt.n	800cf5e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf2a:	4b81      	ldr	r3, [pc, #516]	; (800d130 <tcp_receive+0x26c>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d106      	bne.n	800cf40 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cf36:	4b7f      	ldr	r3, [pc, #508]	; (800d134 <tcp_receive+0x270>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	db0e      	blt.n	800cf5e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cf44:	4b7b      	ldr	r3, [pc, #492]	; (800d134 <tcp_receive+0x270>)
 800cf46:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d125      	bne.n	800cf98 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cf4c:	4b7a      	ldr	r3, [pc, #488]	; (800d138 <tcp_receive+0x274>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	89db      	ldrh	r3, [r3, #14]
 800cf52:	b29a      	uxth	r2, r3
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d91c      	bls.n	800cf98 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800cf5e:	4b76      	ldr	r3, [pc, #472]	; (800d138 <tcp_receive+0x274>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	89db      	ldrh	r3, [r3, #14]
 800cf64:	b29a      	uxth	r2, r3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d205      	bcs.n	800cf88 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800cf88:	4b69      	ldr	r3, [pc, #420]	; (800d130 <tcp_receive+0x26c>)
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800cf90:	4b68      	ldr	r3, [pc, #416]	; (800d134 <tcp_receive+0x270>)
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800cf98:	4b66      	ldr	r3, [pc, #408]	; (800d134 <tcp_receive+0x270>)
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	dc58      	bgt.n	800d058 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800cfa6:	4b65      	ldr	r3, [pc, #404]	; (800d13c <tcp_receive+0x278>)
 800cfa8:	881b      	ldrh	r3, [r3, #0]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d14b      	bne.n	800d046 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800cfb8:	4413      	add	r3, r2
 800cfba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d142      	bne.n	800d046 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	db3d      	blt.n	800d046 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfce:	4b59      	ldr	r3, [pc, #356]	; (800d134 <tcp_receive+0x270>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d137      	bne.n	800d046 <tcp_receive+0x182>
              found_dupack = 1;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cfe0:	2bff      	cmp	r3, #255	; 0xff
 800cfe2:	d007      	beq.n	800cff4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cfea:	3301      	adds	r3, #1
 800cfec:	b2da      	uxtb	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cffa:	2b03      	cmp	r3, #3
 800cffc:	d91b      	bls.n	800d036 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d008:	4413      	add	r3, r2
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d012:	429a      	cmp	r2, r3
 800d014:	d30a      	bcc.n	800d02c <tcp_receive+0x168>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d020:	4413      	add	r3, r2
 800d022:	b29a      	uxth	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d02a:	e004      	b.n	800d036 <tcp_receive+0x172>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d032:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d03c:	2b02      	cmp	r3, #2
 800d03e:	d902      	bls.n	800d046 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f001 feed 	bl	800ee20 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f040 8161 	bne.w	800d310 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2200      	movs	r2, #0
 800d052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d056:	e15b      	b.n	800d310 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d058:	4b36      	ldr	r3, [pc, #216]	; (800d134 <tcp_receive+0x270>)
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d060:	1ad3      	subs	r3, r2, r3
 800d062:	3b01      	subs	r3, #1
 800d064:	2b00      	cmp	r3, #0
 800d066:	f2c0 814e 	blt.w	800d306 <tcp_receive+0x442>
 800d06a:	4b32      	ldr	r3, [pc, #200]	; (800d134 <tcp_receive+0x270>)
 800d06c:	681a      	ldr	r2, [r3, #0]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d072:	1ad3      	subs	r3, r2, r3
 800d074:	2b00      	cmp	r3, #0
 800d076:	f300 8146 	bgt.w	800d306 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	8b5b      	ldrh	r3, [r3, #26]
 800d07e:	f003 0304 	and.w	r3, r3, #4
 800d082:	2b00      	cmp	r3, #0
 800d084:	d010      	beq.n	800d0a8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	8b5b      	ldrh	r3, [r3, #26]
 800d08a:	f023 0304 	bic.w	r3, r3, #4
 800d08e:	b29a      	uxth	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d0b6:	10db      	asrs	r3, r3, #3
 800d0b8:	b21b      	sxth	r3, r3
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	4413      	add	r3, r2
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	b21a      	sxth	r2, r3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d0d0:	4b18      	ldr	r3, [pc, #96]	; (800d134 <tcp_receive+0x270>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	b29a      	uxth	r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d0e8:	4b12      	ldr	r3, [pc, #72]	; (800d134 <tcp_receive+0x270>)
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	7d1b      	ldrb	r3, [r3, #20]
 800d0f4:	2b03      	cmp	r3, #3
 800d0f6:	f240 8097 	bls.w	800d228 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d106:	429a      	cmp	r2, r3
 800d108:	d245      	bcs.n	800d196 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	8b5b      	ldrh	r3, [r3, #26]
 800d10e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d112:	2b00      	cmp	r3, #0
 800d114:	d014      	beq.n	800d140 <tcp_receive+0x27c>
 800d116:	2301      	movs	r3, #1
 800d118:	e013      	b.n	800d142 <tcp_receive+0x27e>
 800d11a:	bf00      	nop
 800d11c:	08014e40 	.word	0x08014e40
 800d120:	08015170 	.word	0x08015170
 800d124:	08014e8c 	.word	0x08014e8c
 800d128:	0801518c 	.word	0x0801518c
 800d12c:	2400bd34 	.word	0x2400bd34
 800d130:	2400bd28 	.word	0x2400bd28
 800d134:	2400bd2c 	.word	0x2400bd2c
 800d138:	2400bd18 	.word	0x2400bd18
 800d13c:	2400bd32 	.word	0x2400bd32
 800d140:	2302      	movs	r3, #2
 800d142:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d146:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d14a:	b29a      	uxth	r2, r3
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d150:	fb12 f303 	smulbb	r3, r2, r3
 800d154:	b29b      	uxth	r3, r3
 800d156:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d158:	4293      	cmp	r3, r2
 800d15a:	bf28      	it	cs
 800d15c:	4613      	movcs	r3, r2
 800d15e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d166:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d168:	4413      	add	r3, r2
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d172:	429a      	cmp	r2, r3
 800d174:	d309      	bcc.n	800d18a <tcp_receive+0x2c6>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d17c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d17e:	4413      	add	r3, r2
 800d180:	b29a      	uxth	r2, r3
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d188:	e04e      	b.n	800d228 <tcp_receive+0x364>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d190:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d194:	e048      	b.n	800d228 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d19c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d19e:	4413      	add	r3, r2
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d309      	bcc.n	800d1c0 <tcp_receive+0x2fc>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d1b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d1b4:	4413      	add	r3, r2
 800d1b6:	b29a      	uxth	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d1be:	e004      	b.n	800d1ca <tcp_receive+0x306>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d326      	bcc.n	800d228 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d1e6:	1ad3      	subs	r3, r2, r3
 800d1e8:	b29a      	uxth	r2, r3
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1fa:	4413      	add	r3, r2
 800d1fc:	b29a      	uxth	r2, r3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d204:	429a      	cmp	r2, r3
 800d206:	d30a      	bcc.n	800d21e <tcp_receive+0x35a>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d212:	4413      	add	r3, r2
 800d214:	b29a      	uxth	r2, r3
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d21c:	e004      	b.n	800d228 <tcp_receive+0x364>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d224:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d230:	4a98      	ldr	r2, [pc, #608]	; (800d494 <tcp_receive+0x5d0>)
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f7ff fdca 	bl	800cdcc <tcp_free_acked_segments>
 800d238:	4602      	mov	r2, r0
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d246:	4a94      	ldr	r2, [pc, #592]	; (800d498 <tcp_receive+0x5d4>)
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f7ff fdbf 	bl	800cdcc <tcp_free_acked_segments>
 800d24e:	4602      	mov	r2, r0
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d104      	bne.n	800d266 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d262:	861a      	strh	r2, [r3, #48]	; 0x30
 800d264:	e002      	b.n	800d26c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2200      	movs	r2, #0
 800d26a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2200      	movs	r2, #0
 800d270:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d276:	2b00      	cmp	r3, #0
 800d278:	d103      	bne.n	800d282 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2200      	movs	r2, #0
 800d27e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d288:	4b84      	ldr	r3, [pc, #528]	; (800d49c <tcp_receive+0x5d8>)
 800d28a:	881b      	ldrh	r3, [r3, #0]
 800d28c:	4413      	add	r3, r2
 800d28e:	b29a      	uxth	r2, r3
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	8b5b      	ldrh	r3, [r3, #26]
 800d29a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d035      	beq.n	800d30e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d118      	bne.n	800d2dc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d00c      	beq.n	800d2cc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fb f883 	bl	80083ca <lwip_htonl>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	dc20      	bgt.n	800d30e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	8b5b      	ldrh	r3, [r3, #26]
 800d2d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2d4:	b29a      	uxth	r2, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d2da:	e018      	b.n	800d30e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7fb f86e 	bl	80083ca <lwip_htonl>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	1ae3      	subs	r3, r4, r3
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	dc0b      	bgt.n	800d30e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	8b5b      	ldrh	r3, [r3, #26]
 800d2fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d304:	e003      	b.n	800d30e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f001 ff76 	bl	800f1f8 <tcp_send_empty_ack>
 800d30c:	e000      	b.n	800d310 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d30e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d314:	2b00      	cmp	r3, #0
 800d316:	d05b      	beq.n	800d3d0 <tcp_receive+0x50c>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d31c:	4b60      	ldr	r3, [pc, #384]	; (800d4a0 <tcp_receive+0x5dc>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	1ad3      	subs	r3, r2, r3
 800d322:	2b00      	cmp	r3, #0
 800d324:	da54      	bge.n	800d3d0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d326:	4b5f      	ldr	r3, [pc, #380]	; (800d4a4 <tcp_receive+0x5e0>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	b29a      	uxth	r2, r3
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d330:	b29b      	uxth	r3, r3
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	b29b      	uxth	r3, r3
 800d336:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d33a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d344:	10db      	asrs	r3, r3, #3
 800d346:	b21b      	sxth	r3, r3
 800d348:	b29b      	uxth	r3, r3
 800d34a:	1ad3      	subs	r3, r2, r3
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d358:	b29a      	uxth	r2, r3
 800d35a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d35e:	4413      	add	r3, r2
 800d360:	b29b      	uxth	r3, r3
 800d362:	b21a      	sxth	r2, r3
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d368:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	da05      	bge.n	800d37c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800d370:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d374:	425b      	negs	r3, r3
 800d376:	b29b      	uxth	r3, r3
 800d378:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d37c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d386:	109b      	asrs	r3, r3, #2
 800d388:	b21b      	sxth	r3, r3
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	1ad3      	subs	r3, r2, r3
 800d38e:	b29b      	uxth	r3, r3
 800d390:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d39a:	b29a      	uxth	r2, r3
 800d39c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d3a0:	4413      	add	r3, r2
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	b21a      	sxth	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d3b0:	10db      	asrs	r3, r3, #3
 800d3b2:	b21b      	sxth	r3, r3
 800d3b4:	b29a      	uxth	r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	4413      	add	r3, r2
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	b21a      	sxth	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d3d0:	4b35      	ldr	r3, [pc, #212]	; (800d4a8 <tcp_receive+0x5e4>)
 800d3d2:	881b      	ldrh	r3, [r3, #0]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f000 84e2 	beq.w	800dd9e <tcp_receive+0xeda>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	7d1b      	ldrb	r3, [r3, #20]
 800d3de:	2b06      	cmp	r3, #6
 800d3e0:	f200 84dd 	bhi.w	800dd9e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3e8:	4b30      	ldr	r3, [pc, #192]	; (800d4ac <tcp_receive+0x5e8>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	1ad3      	subs	r3, r2, r3
 800d3ee:	3b01      	subs	r3, #1
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f2c0 808f 	blt.w	800d514 <tcp_receive+0x650>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3fa:	4b2b      	ldr	r3, [pc, #172]	; (800d4a8 <tcp_receive+0x5e4>)
 800d3fc:	881b      	ldrh	r3, [r3, #0]
 800d3fe:	4619      	mov	r1, r3
 800d400:	4b2a      	ldr	r3, [pc, #168]	; (800d4ac <tcp_receive+0x5e8>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	440b      	add	r3, r1
 800d406:	1ad3      	subs	r3, r2, r3
 800d408:	3301      	adds	r3, #1
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	f300 8082 	bgt.w	800d514 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d410:	4b27      	ldr	r3, [pc, #156]	; (800d4b0 <tcp_receive+0x5ec>)
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d41a:	4b24      	ldr	r3, [pc, #144]	; (800d4ac <tcp_receive+0x5e8>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	1ad3      	subs	r3, r2, r3
 800d420:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d422:	4b23      	ldr	r3, [pc, #140]	; (800d4b0 <tcp_receive+0x5ec>)
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d106      	bne.n	800d438 <tcp_receive+0x574>
 800d42a:	4b22      	ldr	r3, [pc, #136]	; (800d4b4 <tcp_receive+0x5f0>)
 800d42c:	f240 5294 	movw	r2, #1428	; 0x594
 800d430:	4921      	ldr	r1, [pc, #132]	; (800d4b8 <tcp_receive+0x5f4>)
 800d432:	4822      	ldr	r0, [pc, #136]	; (800d4bc <tcp_receive+0x5f8>)
 800d434:	f005 fbb2 	bl	8012b9c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d43e:	4293      	cmp	r3, r2
 800d440:	d906      	bls.n	800d450 <tcp_receive+0x58c>
 800d442:	4b1c      	ldr	r3, [pc, #112]	; (800d4b4 <tcp_receive+0x5f0>)
 800d444:	f240 5295 	movw	r2, #1429	; 0x595
 800d448:	491d      	ldr	r1, [pc, #116]	; (800d4c0 <tcp_receive+0x5fc>)
 800d44a:	481c      	ldr	r0, [pc, #112]	; (800d4bc <tcp_receive+0x5f8>)
 800d44c:	f005 fba6 	bl	8012b9c <iprintf>
      off = (u16_t)off32;
 800d450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d452:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d456:	4b16      	ldr	r3, [pc, #88]	; (800d4b0 <tcp_receive+0x5ec>)
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	891b      	ldrh	r3, [r3, #8]
 800d45c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d460:	429a      	cmp	r2, r3
 800d462:	d906      	bls.n	800d472 <tcp_receive+0x5ae>
 800d464:	4b13      	ldr	r3, [pc, #76]	; (800d4b4 <tcp_receive+0x5f0>)
 800d466:	f240 5297 	movw	r2, #1431	; 0x597
 800d46a:	4916      	ldr	r1, [pc, #88]	; (800d4c4 <tcp_receive+0x600>)
 800d46c:	4813      	ldr	r0, [pc, #76]	; (800d4bc <tcp_receive+0x5f8>)
 800d46e:	f005 fb95 	bl	8012b9c <iprintf>
      inseg.len -= off;
 800d472:	4b0f      	ldr	r3, [pc, #60]	; (800d4b0 <tcp_receive+0x5ec>)
 800d474:	891a      	ldrh	r2, [r3, #8]
 800d476:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d47a:	1ad3      	subs	r3, r2, r3
 800d47c:	b29a      	uxth	r2, r3
 800d47e:	4b0c      	ldr	r3, [pc, #48]	; (800d4b0 <tcp_receive+0x5ec>)
 800d480:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d482:	4b0b      	ldr	r3, [pc, #44]	; (800d4b0 <tcp_receive+0x5ec>)
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	891a      	ldrh	r2, [r3, #8]
 800d488:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d48c:	1ad3      	subs	r3, r2, r3
 800d48e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800d490:	e02a      	b.n	800d4e8 <tcp_receive+0x624>
 800d492:	bf00      	nop
 800d494:	080151a8 	.word	0x080151a8
 800d498:	080151b0 	.word	0x080151b0
 800d49c:	2400bd30 	.word	0x2400bd30
 800d4a0:	2400bd2c 	.word	0x2400bd2c
 800d4a4:	2400bcf0 	.word	0x2400bcf0
 800d4a8:	2400bd32 	.word	0x2400bd32
 800d4ac:	2400bd28 	.word	0x2400bd28
 800d4b0:	2400bd08 	.word	0x2400bd08
 800d4b4:	08014e40 	.word	0x08014e40
 800d4b8:	080151b8 	.word	0x080151b8
 800d4bc:	08014e8c 	.word	0x08014e8c
 800d4c0:	080151c8 	.word	0x080151c8
 800d4c4:	080151d8 	.word	0x080151d8
        off -= p->len;
 800d4c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4ca:	895b      	ldrh	r3, [r3, #10]
 800d4cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d4d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d4da:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d4dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4de:	2200      	movs	r2, #0
 800d4e0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d4e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d4e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4ea:	895b      	ldrh	r3, [r3, #10]
 800d4ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d8e9      	bhi.n	800d4c8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d4f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d4fc:	f7fc fb60 	bl	8009bc0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d504:	4a91      	ldr	r2, [pc, #580]	; (800d74c <tcp_receive+0x888>)
 800d506:	6013      	str	r3, [r2, #0]
 800d508:	4b91      	ldr	r3, [pc, #580]	; (800d750 <tcp_receive+0x88c>)
 800d50a:	68db      	ldr	r3, [r3, #12]
 800d50c:	4a8f      	ldr	r2, [pc, #572]	; (800d74c <tcp_receive+0x888>)
 800d50e:	6812      	ldr	r2, [r2, #0]
 800d510:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d512:	e00d      	b.n	800d530 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d514:	4b8d      	ldr	r3, [pc, #564]	; (800d74c <tcp_receive+0x888>)
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51c:	1ad3      	subs	r3, r2, r3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	da06      	bge.n	800d530 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	8b5b      	ldrh	r3, [r3, #26]
 800d526:	f043 0302 	orr.w	r3, r3, #2
 800d52a:	b29a      	uxth	r2, r3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d530:	4b86      	ldr	r3, [pc, #536]	; (800d74c <tcp_receive+0x888>)
 800d532:	681a      	ldr	r2, [r3, #0]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d538:	1ad3      	subs	r3, r2, r3
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	f2c0 842a 	blt.w	800dd94 <tcp_receive+0xed0>
 800d540:	4b82      	ldr	r3, [pc, #520]	; (800d74c <tcp_receive+0x888>)
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d548:	6879      	ldr	r1, [r7, #4]
 800d54a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d54c:	440b      	add	r3, r1
 800d54e:	1ad3      	subs	r3, r2, r3
 800d550:	3301      	adds	r3, #1
 800d552:	2b00      	cmp	r3, #0
 800d554:	f300 841e 	bgt.w	800dd94 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d55c:	4b7b      	ldr	r3, [pc, #492]	; (800d74c <tcp_receive+0x888>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	429a      	cmp	r2, r3
 800d562:	f040 829a 	bne.w	800da9a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d566:	4b7a      	ldr	r3, [pc, #488]	; (800d750 <tcp_receive+0x88c>)
 800d568:	891c      	ldrh	r4, [r3, #8]
 800d56a:	4b79      	ldr	r3, [pc, #484]	; (800d750 <tcp_receive+0x88c>)
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	899b      	ldrh	r3, [r3, #12]
 800d570:	b29b      	uxth	r3, r3
 800d572:	4618      	mov	r0, r3
 800d574:	f7fa ff14 	bl	80083a0 <lwip_htons>
 800d578:	4603      	mov	r3, r0
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	f003 0303 	and.w	r3, r3, #3
 800d580:	2b00      	cmp	r3, #0
 800d582:	d001      	beq.n	800d588 <tcp_receive+0x6c4>
 800d584:	2301      	movs	r3, #1
 800d586:	e000      	b.n	800d58a <tcp_receive+0x6c6>
 800d588:	2300      	movs	r3, #0
 800d58a:	4423      	add	r3, r4
 800d58c:	b29a      	uxth	r2, r3
 800d58e:	4b71      	ldr	r3, [pc, #452]	; (800d754 <tcp_receive+0x890>)
 800d590:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d596:	4b6f      	ldr	r3, [pc, #444]	; (800d754 <tcp_receive+0x890>)
 800d598:	881b      	ldrh	r3, [r3, #0]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d275      	bcs.n	800d68a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d59e:	4b6c      	ldr	r3, [pc, #432]	; (800d750 <tcp_receive+0x88c>)
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	899b      	ldrh	r3, [r3, #12]
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7fa fefa 	bl	80083a0 <lwip_htons>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	f003 0301 	and.w	r3, r3, #1
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d01f      	beq.n	800d5f8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d5b8:	4b65      	ldr	r3, [pc, #404]	; (800d750 <tcp_receive+0x88c>)
 800d5ba:	68db      	ldr	r3, [r3, #12]
 800d5bc:	899b      	ldrh	r3, [r3, #12]
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	b21b      	sxth	r3, r3
 800d5c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d5c6:	b21c      	sxth	r4, r3
 800d5c8:	4b61      	ldr	r3, [pc, #388]	; (800d750 <tcp_receive+0x88c>)
 800d5ca:	68db      	ldr	r3, [r3, #12]
 800d5cc:	899b      	ldrh	r3, [r3, #12]
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7fa fee5 	bl	80083a0 <lwip_htons>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7fa fedc 	bl	80083a0 <lwip_htons>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	b21b      	sxth	r3, r3
 800d5ec:	4323      	orrs	r3, r4
 800d5ee:	b21a      	sxth	r2, r3
 800d5f0:	4b57      	ldr	r3, [pc, #348]	; (800d750 <tcp_receive+0x88c>)
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	b292      	uxth	r2, r2
 800d5f6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d5fc:	4b54      	ldr	r3, [pc, #336]	; (800d750 <tcp_receive+0x88c>)
 800d5fe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d600:	4b53      	ldr	r3, [pc, #332]	; (800d750 <tcp_receive+0x88c>)
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	899b      	ldrh	r3, [r3, #12]
 800d606:	b29b      	uxth	r3, r3
 800d608:	4618      	mov	r0, r3
 800d60a:	f7fa fec9 	bl	80083a0 <lwip_htons>
 800d60e:	4603      	mov	r3, r0
 800d610:	b2db      	uxtb	r3, r3
 800d612:	f003 0302 	and.w	r3, r3, #2
 800d616:	2b00      	cmp	r3, #0
 800d618:	d005      	beq.n	800d626 <tcp_receive+0x762>
            inseg.len -= 1;
 800d61a:	4b4d      	ldr	r3, [pc, #308]	; (800d750 <tcp_receive+0x88c>)
 800d61c:	891b      	ldrh	r3, [r3, #8]
 800d61e:	3b01      	subs	r3, #1
 800d620:	b29a      	uxth	r2, r3
 800d622:	4b4b      	ldr	r3, [pc, #300]	; (800d750 <tcp_receive+0x88c>)
 800d624:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d626:	4b4a      	ldr	r3, [pc, #296]	; (800d750 <tcp_receive+0x88c>)
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	4a49      	ldr	r2, [pc, #292]	; (800d750 <tcp_receive+0x88c>)
 800d62c:	8912      	ldrh	r2, [r2, #8]
 800d62e:	4611      	mov	r1, r2
 800d630:	4618      	mov	r0, r3
 800d632:	f7fc f9c7 	bl	80099c4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d636:	4b46      	ldr	r3, [pc, #280]	; (800d750 <tcp_receive+0x88c>)
 800d638:	891c      	ldrh	r4, [r3, #8]
 800d63a:	4b45      	ldr	r3, [pc, #276]	; (800d750 <tcp_receive+0x88c>)
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	899b      	ldrh	r3, [r3, #12]
 800d640:	b29b      	uxth	r3, r3
 800d642:	4618      	mov	r0, r3
 800d644:	f7fa feac 	bl	80083a0 <lwip_htons>
 800d648:	4603      	mov	r3, r0
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	f003 0303 	and.w	r3, r3, #3
 800d650:	2b00      	cmp	r3, #0
 800d652:	d001      	beq.n	800d658 <tcp_receive+0x794>
 800d654:	2301      	movs	r3, #1
 800d656:	e000      	b.n	800d65a <tcp_receive+0x796>
 800d658:	2300      	movs	r3, #0
 800d65a:	4423      	add	r3, r4
 800d65c:	b29a      	uxth	r2, r3
 800d65e:	4b3d      	ldr	r3, [pc, #244]	; (800d754 <tcp_receive+0x890>)
 800d660:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d662:	4b3c      	ldr	r3, [pc, #240]	; (800d754 <tcp_receive+0x890>)
 800d664:	881b      	ldrh	r3, [r3, #0]
 800d666:	461a      	mov	r2, r3
 800d668:	4b38      	ldr	r3, [pc, #224]	; (800d74c <tcp_receive+0x888>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	441a      	add	r2, r3
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d672:	6879      	ldr	r1, [r7, #4]
 800d674:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d676:	440b      	add	r3, r1
 800d678:	429a      	cmp	r2, r3
 800d67a:	d006      	beq.n	800d68a <tcp_receive+0x7c6>
 800d67c:	4b36      	ldr	r3, [pc, #216]	; (800d758 <tcp_receive+0x894>)
 800d67e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800d682:	4936      	ldr	r1, [pc, #216]	; (800d75c <tcp_receive+0x898>)
 800d684:	4836      	ldr	r0, [pc, #216]	; (800d760 <tcp_receive+0x89c>)
 800d686:	f005 fa89 	bl	8012b9c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d68e:	2b00      	cmp	r3, #0
 800d690:	f000 80e7 	beq.w	800d862 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d694:	4b2e      	ldr	r3, [pc, #184]	; (800d750 <tcp_receive+0x88c>)
 800d696:	68db      	ldr	r3, [r3, #12]
 800d698:	899b      	ldrh	r3, [r3, #12]
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7fa fe7f 	bl	80083a0 <lwip_htons>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	f003 0301 	and.w	r3, r3, #1
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d010      	beq.n	800d6d0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d6ae:	e00a      	b.n	800d6c6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6b4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d6c0:	68f8      	ldr	r0, [r7, #12]
 800d6c2:	f7fd fd92 	bl	800b1ea <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1f0      	bne.n	800d6b0 <tcp_receive+0x7ec>
 800d6ce:	e0c8      	b.n	800d862 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d6d6:	e052      	b.n	800d77e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	899b      	ldrh	r3, [r3, #12]
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7fa fe5d 	bl	80083a0 <lwip_htons>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	f003 0301 	and.w	r3, r3, #1
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d03d      	beq.n	800d76e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d6f2:	4b17      	ldr	r3, [pc, #92]	; (800d750 <tcp_receive+0x88c>)
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	899b      	ldrh	r3, [r3, #12]
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7fa fe50 	bl	80083a0 <lwip_htons>
 800d700:	4603      	mov	r3, r0
 800d702:	b2db      	uxtb	r3, r3
 800d704:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d130      	bne.n	800d76e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d70c:	4b10      	ldr	r3, [pc, #64]	; (800d750 <tcp_receive+0x88c>)
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	899b      	ldrh	r3, [r3, #12]
 800d712:	b29c      	uxth	r4, r3
 800d714:	2001      	movs	r0, #1
 800d716:	f7fa fe43 	bl	80083a0 <lwip_htons>
 800d71a:	4603      	mov	r3, r0
 800d71c:	461a      	mov	r2, r3
 800d71e:	4b0c      	ldr	r3, [pc, #48]	; (800d750 <tcp_receive+0x88c>)
 800d720:	68db      	ldr	r3, [r3, #12]
 800d722:	4322      	orrs	r2, r4
 800d724:	b292      	uxth	r2, r2
 800d726:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d728:	4b09      	ldr	r3, [pc, #36]	; (800d750 <tcp_receive+0x88c>)
 800d72a:	891c      	ldrh	r4, [r3, #8]
 800d72c:	4b08      	ldr	r3, [pc, #32]	; (800d750 <tcp_receive+0x88c>)
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	899b      	ldrh	r3, [r3, #12]
 800d732:	b29b      	uxth	r3, r3
 800d734:	4618      	mov	r0, r3
 800d736:	f7fa fe33 	bl	80083a0 <lwip_htons>
 800d73a:	4603      	mov	r3, r0
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	f003 0303 	and.w	r3, r3, #3
 800d742:	2b00      	cmp	r3, #0
 800d744:	d00e      	beq.n	800d764 <tcp_receive+0x8a0>
 800d746:	2301      	movs	r3, #1
 800d748:	e00d      	b.n	800d766 <tcp_receive+0x8a2>
 800d74a:	bf00      	nop
 800d74c:	2400bd28 	.word	0x2400bd28
 800d750:	2400bd08 	.word	0x2400bd08
 800d754:	2400bd32 	.word	0x2400bd32
 800d758:	08014e40 	.word	0x08014e40
 800d75c:	080151e8 	.word	0x080151e8
 800d760:	08014e8c 	.word	0x08014e8c
 800d764:	2300      	movs	r3, #0
 800d766:	4423      	add	r3, r4
 800d768:	b29a      	uxth	r2, r3
 800d76a:	4b98      	ldr	r3, [pc, #608]	; (800d9cc <tcp_receive+0xb08>)
 800d76c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d76e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d770:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d778:	6938      	ldr	r0, [r7, #16]
 800d77a:	f7fd fd36 	bl	800b1ea <tcp_seg_free>
            while (next &&
 800d77e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d780:	2b00      	cmp	r3, #0
 800d782:	d00e      	beq.n	800d7a2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d784:	4b91      	ldr	r3, [pc, #580]	; (800d9cc <tcp_receive+0xb08>)
 800d786:	881b      	ldrh	r3, [r3, #0]
 800d788:	461a      	mov	r2, r3
 800d78a:	4b91      	ldr	r3, [pc, #580]	; (800d9d0 <tcp_receive+0xb0c>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	441a      	add	r2, r3
 800d790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d798:	8909      	ldrh	r1, [r1, #8]
 800d79a:	440b      	add	r3, r1
 800d79c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	da9a      	bge.n	800d6d8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d7a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d059      	beq.n	800d85c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800d7a8:	4b88      	ldr	r3, [pc, #544]	; (800d9cc <tcp_receive+0xb08>)
 800d7aa:	881b      	ldrh	r3, [r3, #0]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	4b88      	ldr	r3, [pc, #544]	; (800d9d0 <tcp_receive+0xb0c>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	441a      	add	r2, r3
 800d7b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	dd4d      	ble.n	800d85c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7c2:	68db      	ldr	r3, [r3, #12]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	4b81      	ldr	r3, [pc, #516]	; (800d9d0 <tcp_receive+0xb0c>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	b29a      	uxth	r2, r3
 800d7d2:	4b80      	ldr	r3, [pc, #512]	; (800d9d4 <tcp_receive+0xb10>)
 800d7d4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d7d6:	4b7f      	ldr	r3, [pc, #508]	; (800d9d4 <tcp_receive+0xb10>)
 800d7d8:	68db      	ldr	r3, [r3, #12]
 800d7da:	899b      	ldrh	r3, [r3, #12]
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fa fdde 	bl	80083a0 <lwip_htons>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	b2db      	uxtb	r3, r3
 800d7e8:	f003 0302 	and.w	r3, r3, #2
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d005      	beq.n	800d7fc <tcp_receive+0x938>
                inseg.len -= 1;
 800d7f0:	4b78      	ldr	r3, [pc, #480]	; (800d9d4 <tcp_receive+0xb10>)
 800d7f2:	891b      	ldrh	r3, [r3, #8]
 800d7f4:	3b01      	subs	r3, #1
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	4b76      	ldr	r3, [pc, #472]	; (800d9d4 <tcp_receive+0xb10>)
 800d7fa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d7fc:	4b75      	ldr	r3, [pc, #468]	; (800d9d4 <tcp_receive+0xb10>)
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	4a74      	ldr	r2, [pc, #464]	; (800d9d4 <tcp_receive+0xb10>)
 800d802:	8912      	ldrh	r2, [r2, #8]
 800d804:	4611      	mov	r1, r2
 800d806:	4618      	mov	r0, r3
 800d808:	f7fc f8dc 	bl	80099c4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d80c:	4b71      	ldr	r3, [pc, #452]	; (800d9d4 <tcp_receive+0xb10>)
 800d80e:	891c      	ldrh	r4, [r3, #8]
 800d810:	4b70      	ldr	r3, [pc, #448]	; (800d9d4 <tcp_receive+0xb10>)
 800d812:	68db      	ldr	r3, [r3, #12]
 800d814:	899b      	ldrh	r3, [r3, #12]
 800d816:	b29b      	uxth	r3, r3
 800d818:	4618      	mov	r0, r3
 800d81a:	f7fa fdc1 	bl	80083a0 <lwip_htons>
 800d81e:	4603      	mov	r3, r0
 800d820:	b2db      	uxtb	r3, r3
 800d822:	f003 0303 	and.w	r3, r3, #3
 800d826:	2b00      	cmp	r3, #0
 800d828:	d001      	beq.n	800d82e <tcp_receive+0x96a>
 800d82a:	2301      	movs	r3, #1
 800d82c:	e000      	b.n	800d830 <tcp_receive+0x96c>
 800d82e:	2300      	movs	r3, #0
 800d830:	4423      	add	r3, r4
 800d832:	b29a      	uxth	r2, r3
 800d834:	4b65      	ldr	r3, [pc, #404]	; (800d9cc <tcp_receive+0xb08>)
 800d836:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d838:	4b64      	ldr	r3, [pc, #400]	; (800d9cc <tcp_receive+0xb08>)
 800d83a:	881b      	ldrh	r3, [r3, #0]
 800d83c:	461a      	mov	r2, r3
 800d83e:	4b64      	ldr	r3, [pc, #400]	; (800d9d0 <tcp_receive+0xb0c>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	441a      	add	r2, r3
 800d844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d006      	beq.n	800d85c <tcp_receive+0x998>
 800d84e:	4b62      	ldr	r3, [pc, #392]	; (800d9d8 <tcp_receive+0xb14>)
 800d850:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d854:	4961      	ldr	r1, [pc, #388]	; (800d9dc <tcp_receive+0xb18>)
 800d856:	4862      	ldr	r0, [pc, #392]	; (800d9e0 <tcp_receive+0xb1c>)
 800d858:	f005 f9a0 	bl	8012b9c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d860:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d862:	4b5a      	ldr	r3, [pc, #360]	; (800d9cc <tcp_receive+0xb08>)
 800d864:	881b      	ldrh	r3, [r3, #0]
 800d866:	461a      	mov	r2, r3
 800d868:	4b59      	ldr	r3, [pc, #356]	; (800d9d0 <tcp_receive+0xb0c>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	441a      	add	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d876:	4b55      	ldr	r3, [pc, #340]	; (800d9cc <tcp_receive+0xb08>)
 800d878:	881b      	ldrh	r3, [r3, #0]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d206      	bcs.n	800d88c <tcp_receive+0x9c8>
 800d87e:	4b56      	ldr	r3, [pc, #344]	; (800d9d8 <tcp_receive+0xb14>)
 800d880:	f240 6207 	movw	r2, #1543	; 0x607
 800d884:	4957      	ldr	r1, [pc, #348]	; (800d9e4 <tcp_receive+0xb20>)
 800d886:	4856      	ldr	r0, [pc, #344]	; (800d9e0 <tcp_receive+0xb1c>)
 800d888:	f005 f988 	bl	8012b9c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d890:	4b4e      	ldr	r3, [pc, #312]	; (800d9cc <tcp_receive+0xb08>)
 800d892:	881b      	ldrh	r3, [r3, #0]
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	b29a      	uxth	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f7fc ffc5 	bl	800a82c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d8a2:	4b4c      	ldr	r3, [pc, #304]	; (800d9d4 <tcp_receive+0xb10>)
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	891b      	ldrh	r3, [r3, #8]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d006      	beq.n	800d8ba <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800d8ac:	4b49      	ldr	r3, [pc, #292]	; (800d9d4 <tcp_receive+0xb10>)
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	4a4d      	ldr	r2, [pc, #308]	; (800d9e8 <tcp_receive+0xb24>)
 800d8b2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d8b4:	4b47      	ldr	r3, [pc, #284]	; (800d9d4 <tcp_receive+0xb10>)
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d8ba:	4b46      	ldr	r3, [pc, #280]	; (800d9d4 <tcp_receive+0xb10>)
 800d8bc:	68db      	ldr	r3, [r3, #12]
 800d8be:	899b      	ldrh	r3, [r3, #12]
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7fa fd6c 	bl	80083a0 <lwip_htons>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	f003 0301 	and.w	r3, r3, #1
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f000 80b8 	beq.w	800da46 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d8d6:	4b45      	ldr	r3, [pc, #276]	; (800d9ec <tcp_receive+0xb28>)
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	f043 0320 	orr.w	r3, r3, #32
 800d8de:	b2da      	uxtb	r2, r3
 800d8e0:	4b42      	ldr	r3, [pc, #264]	; (800d9ec <tcp_receive+0xb28>)
 800d8e2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d8e4:	e0af      	b.n	800da46 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8ea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8f0:	68db      	ldr	r3, [r3, #12]
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	4a36      	ldr	r2, [pc, #216]	; (800d9d0 <tcp_receive+0xb0c>)
 800d8f6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	891b      	ldrh	r3, [r3, #8]
 800d8fc:	461c      	mov	r4, r3
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	899b      	ldrh	r3, [r3, #12]
 800d904:	b29b      	uxth	r3, r3
 800d906:	4618      	mov	r0, r3
 800d908:	f7fa fd4a 	bl	80083a0 <lwip_htons>
 800d90c:	4603      	mov	r3, r0
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	f003 0303 	and.w	r3, r3, #3
 800d914:	2b00      	cmp	r3, #0
 800d916:	d001      	beq.n	800d91c <tcp_receive+0xa58>
 800d918:	2301      	movs	r3, #1
 800d91a:	e000      	b.n	800d91e <tcp_receive+0xa5a>
 800d91c:	2300      	movs	r3, #0
 800d91e:	191a      	adds	r2, r3, r4
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d924:	441a      	add	r2, r3
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d92e:	461c      	mov	r4, r3
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	891b      	ldrh	r3, [r3, #8]
 800d934:	461d      	mov	r5, r3
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	68db      	ldr	r3, [r3, #12]
 800d93a:	899b      	ldrh	r3, [r3, #12]
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	4618      	mov	r0, r3
 800d940:	f7fa fd2e 	bl	80083a0 <lwip_htons>
 800d944:	4603      	mov	r3, r0
 800d946:	b2db      	uxtb	r3, r3
 800d948:	f003 0303 	and.w	r3, r3, #3
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d001      	beq.n	800d954 <tcp_receive+0xa90>
 800d950:	2301      	movs	r3, #1
 800d952:	e000      	b.n	800d956 <tcp_receive+0xa92>
 800d954:	2300      	movs	r3, #0
 800d956:	442b      	add	r3, r5
 800d958:	429c      	cmp	r4, r3
 800d95a:	d206      	bcs.n	800d96a <tcp_receive+0xaa6>
 800d95c:	4b1e      	ldr	r3, [pc, #120]	; (800d9d8 <tcp_receive+0xb14>)
 800d95e:	f240 622b 	movw	r2, #1579	; 0x62b
 800d962:	4923      	ldr	r1, [pc, #140]	; (800d9f0 <tcp_receive+0xb2c>)
 800d964:	481e      	ldr	r0, [pc, #120]	; (800d9e0 <tcp_receive+0xb1c>)
 800d966:	f005 f919 	bl	8012b9c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	891b      	ldrh	r3, [r3, #8]
 800d96e:	461c      	mov	r4, r3
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	899b      	ldrh	r3, [r3, #12]
 800d976:	b29b      	uxth	r3, r3
 800d978:	4618      	mov	r0, r3
 800d97a:	f7fa fd11 	bl	80083a0 <lwip_htons>
 800d97e:	4603      	mov	r3, r0
 800d980:	b2db      	uxtb	r3, r3
 800d982:	f003 0303 	and.w	r3, r3, #3
 800d986:	2b00      	cmp	r3, #0
 800d988:	d001      	beq.n	800d98e <tcp_receive+0xaca>
 800d98a:	2301      	movs	r3, #1
 800d98c:	e000      	b.n	800d990 <tcp_receive+0xacc>
 800d98e:	2300      	movs	r3, #0
 800d990:	1919      	adds	r1, r3, r4
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d996:	b28b      	uxth	r3, r1
 800d998:	1ad3      	subs	r3, r2, r3
 800d99a:	b29a      	uxth	r2, r3
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f7fc ff43 	bl	800a82c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	891b      	ldrh	r3, [r3, #8]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d028      	beq.n	800da02 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d9b0:	4b0d      	ldr	r3, [pc, #52]	; (800d9e8 <tcp_receive+0xb24>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d01d      	beq.n	800d9f4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800d9b8:	4b0b      	ldr	r3, [pc, #44]	; (800d9e8 <tcp_receive+0xb24>)
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	4610      	mov	r0, r2
 800d9c4:	f7fc fa50 	bl	8009e68 <pbuf_cat>
 800d9c8:	e018      	b.n	800d9fc <tcp_receive+0xb38>
 800d9ca:	bf00      	nop
 800d9cc:	2400bd32 	.word	0x2400bd32
 800d9d0:	2400bd28 	.word	0x2400bd28
 800d9d4:	2400bd08 	.word	0x2400bd08
 800d9d8:	08014e40 	.word	0x08014e40
 800d9dc:	08015220 	.word	0x08015220
 800d9e0:	08014e8c 	.word	0x08014e8c
 800d9e4:	0801525c 	.word	0x0801525c
 800d9e8:	2400bd38 	.word	0x2400bd38
 800d9ec:	2400bd35 	.word	0x2400bd35
 800d9f0:	0801527c 	.word	0x0801527c
            } else {
              recv_data = cseg->p;
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	4a70      	ldr	r2, [pc, #448]	; (800dbbc <tcp_receive+0xcf8>)
 800d9fa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	2200      	movs	r2, #0
 800da00:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	68db      	ldr	r3, [r3, #12]
 800da06:	899b      	ldrh	r3, [r3, #12]
 800da08:	b29b      	uxth	r3, r3
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7fa fcc8 	bl	80083a0 <lwip_htons>
 800da10:	4603      	mov	r3, r0
 800da12:	b2db      	uxtb	r3, r3
 800da14:	f003 0301 	and.w	r3, r3, #1
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d00d      	beq.n	800da38 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800da1c:	4b68      	ldr	r3, [pc, #416]	; (800dbc0 <tcp_receive+0xcfc>)
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	f043 0320 	orr.w	r3, r3, #32
 800da24:	b2da      	uxtb	r2, r3
 800da26:	4b66      	ldr	r3, [pc, #408]	; (800dbc0 <tcp_receive+0xcfc>)
 800da28:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	7d1b      	ldrb	r3, [r3, #20]
 800da2e:	2b04      	cmp	r3, #4
 800da30:	d102      	bne.n	800da38 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2207      	movs	r2, #7
 800da36:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800da40:	68b8      	ldr	r0, [r7, #8]
 800da42:	f7fd fbd2 	bl	800b1ea <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d008      	beq.n	800da60 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da52:	68db      	ldr	r3, [r3, #12]
 800da54:	685a      	ldr	r2, [r3, #4]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800da5a:	429a      	cmp	r2, r3
 800da5c:	f43f af43 	beq.w	800d8e6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	8b5b      	ldrh	r3, [r3, #26]
 800da64:	f003 0301 	and.w	r3, r3, #1
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d00e      	beq.n	800da8a <tcp_receive+0xbc6>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	8b5b      	ldrh	r3, [r3, #26]
 800da70:	f023 0301 	bic.w	r3, r3, #1
 800da74:	b29a      	uxth	r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	835a      	strh	r2, [r3, #26]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	8b5b      	ldrh	r3, [r3, #26]
 800da7e:	f043 0302 	orr.w	r3, r3, #2
 800da82:	b29a      	uxth	r2, r3
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800da88:	e188      	b.n	800dd9c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	8b5b      	ldrh	r3, [r3, #26]
 800da8e:	f043 0301 	orr.w	r3, r3, #1
 800da92:	b29a      	uxth	r2, r3
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800da98:	e180      	b.n	800dd9c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d106      	bne.n	800dab0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800daa2:	4848      	ldr	r0, [pc, #288]	; (800dbc4 <tcp_receive+0xd00>)
 800daa4:	f7fd fbba 	bl	800b21c <tcp_seg_copy>
 800daa8:	4602      	mov	r2, r0
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	675a      	str	r2, [r3, #116]	; 0x74
 800daae:	e16d      	b.n	800dd8c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800dab0:	2300      	movs	r3, #0
 800dab2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dab8:	63bb      	str	r3, [r7, #56]	; 0x38
 800daba:	e157      	b.n	800dd6c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800dabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	685a      	ldr	r2, [r3, #4]
 800dac2:	4b41      	ldr	r3, [pc, #260]	; (800dbc8 <tcp_receive+0xd04>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d11d      	bne.n	800db06 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800daca:	4b3e      	ldr	r3, [pc, #248]	; (800dbc4 <tcp_receive+0xd00>)
 800dacc:	891a      	ldrh	r2, [r3, #8]
 800dace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad0:	891b      	ldrh	r3, [r3, #8]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	f240 814f 	bls.w	800dd76 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dad8:	483a      	ldr	r0, [pc, #232]	; (800dbc4 <tcp_receive+0xd00>)
 800dada:	f7fd fb9f 	bl	800b21c <tcp_seg_copy>
 800dade:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	f000 8149 	beq.w	800dd7a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800dae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daea:	2b00      	cmp	r3, #0
 800daec:	d003      	beq.n	800daf6 <tcp_receive+0xc32>
                    prev->next = cseg;
 800daee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf0:	697a      	ldr	r2, [r7, #20]
 800daf2:	601a      	str	r2, [r3, #0]
 800daf4:	e002      	b.n	800dafc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	697a      	ldr	r2, [r7, #20]
 800dafa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800dafc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dafe:	6978      	ldr	r0, [r7, #20]
 800db00:	f7ff f8dc 	bl	800ccbc <tcp_oos_insert_segment>
                }
                break;
 800db04:	e139      	b.n	800dd7a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800db06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d117      	bne.n	800db3c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800db0c:	4b2e      	ldr	r3, [pc, #184]	; (800dbc8 <tcp_receive+0xd04>)
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db12:	68db      	ldr	r3, [r3, #12]
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	1ad3      	subs	r3, r2, r3
 800db18:	2b00      	cmp	r3, #0
 800db1a:	da57      	bge.n	800dbcc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800db1c:	4829      	ldr	r0, [pc, #164]	; (800dbc4 <tcp_receive+0xd00>)
 800db1e:	f7fd fb7d 	bl	800b21c <tcp_seg_copy>
 800db22:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800db24:	69bb      	ldr	r3, [r7, #24]
 800db26:	2b00      	cmp	r3, #0
 800db28:	f000 8129 	beq.w	800dd7e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	69ba      	ldr	r2, [r7, #24]
 800db30:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800db32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db34:	69b8      	ldr	r0, [r7, #24]
 800db36:	f7ff f8c1 	bl	800ccbc <tcp_oos_insert_segment>
                  }
                  break;
 800db3a:	e120      	b.n	800dd7e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800db3c:	4b22      	ldr	r3, [pc, #136]	; (800dbc8 <tcp_receive+0xd04>)
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db42:	68db      	ldr	r3, [r3, #12]
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	3b01      	subs	r3, #1
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	db3e      	blt.n	800dbcc <tcp_receive+0xd08>
 800db4e:	4b1e      	ldr	r3, [pc, #120]	; (800dbc8 <tcp_receive+0xd04>)
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	1ad3      	subs	r3, r2, r3
 800db5a:	3301      	adds	r3, #1
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	dc35      	bgt.n	800dbcc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800db60:	4818      	ldr	r0, [pc, #96]	; (800dbc4 <tcp_receive+0xd00>)
 800db62:	f7fd fb5b 	bl	800b21c <tcp_seg_copy>
 800db66:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	f000 8109 	beq.w	800dd82 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800db70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db72:	68db      	ldr	r3, [r3, #12]
 800db74:	685b      	ldr	r3, [r3, #4]
 800db76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db78:	8912      	ldrh	r2, [r2, #8]
 800db7a:	441a      	add	r2, r3
 800db7c:	4b12      	ldr	r3, [pc, #72]	; (800dbc8 <tcp_receive+0xd04>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	1ad3      	subs	r3, r2, r3
 800db82:	2b00      	cmp	r3, #0
 800db84:	dd12      	ble.n	800dbac <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800db86:	4b10      	ldr	r3, [pc, #64]	; (800dbc8 <tcp_receive+0xd04>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	b29b      	uxth	r3, r3
 800db94:	1ad3      	subs	r3, r2, r3
 800db96:	b29a      	uxth	r2, r3
 800db98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db9a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800db9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db9e:	685a      	ldr	r2, [r3, #4]
 800dba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dba2:	891b      	ldrh	r3, [r3, #8]
 800dba4:	4619      	mov	r1, r3
 800dba6:	4610      	mov	r0, r2
 800dba8:	f7fb ff0c 	bl	80099c4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800dbac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbae:	69fa      	ldr	r2, [r7, #28]
 800dbb0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800dbb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dbb4:	69f8      	ldr	r0, [r7, #28]
 800dbb6:	f7ff f881 	bl	800ccbc <tcp_oos_insert_segment>
                  }
                  break;
 800dbba:	e0e2      	b.n	800dd82 <tcp_receive+0xebe>
 800dbbc:	2400bd38 	.word	0x2400bd38
 800dbc0:	2400bd35 	.word	0x2400bd35
 800dbc4:	2400bd08 	.word	0x2400bd08
 800dbc8:	2400bd28 	.word	0x2400bd28
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800dbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbce:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800dbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	f040 80c6 	bne.w	800dd66 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800dbda:	4b80      	ldr	r3, [pc, #512]	; (800dddc <tcp_receive+0xf18>)
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	f340 80bd 	ble.w	800dd66 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbee:	68db      	ldr	r3, [r3, #12]
 800dbf0:	899b      	ldrh	r3, [r3, #12]
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7fa fbd3 	bl	80083a0 <lwip_htons>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	f003 0301 	and.w	r3, r3, #1
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	f040 80bf 	bne.w	800dd86 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800dc08:	4875      	ldr	r0, [pc, #468]	; (800dde0 <tcp_receive+0xf1c>)
 800dc0a:	f7fd fb07 	bl	800b21c <tcp_seg_copy>
 800dc0e:	4602      	mov	r2, r0
 800dc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc12:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800dc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f000 80b6 	beq.w	800dd8a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800dc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc20:	68db      	ldr	r3, [r3, #12]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc26:	8912      	ldrh	r2, [r2, #8]
 800dc28:	441a      	add	r2, r3
 800dc2a:	4b6c      	ldr	r3, [pc, #432]	; (800dddc <tcp_receive+0xf18>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	1ad3      	subs	r3, r2, r3
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	dd12      	ble.n	800dc5a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800dc34:	4b69      	ldr	r3, [pc, #420]	; (800dddc <tcp_receive+0xf18>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	b29a      	uxth	r2, r3
 800dc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3c:	68db      	ldr	r3, [r3, #12]
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	b29b      	uxth	r3, r3
 800dc42:	1ad3      	subs	r3, r2, r3
 800dc44:	b29a      	uxth	r2, r3
 800dc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc48:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800dc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4c:	685a      	ldr	r2, [r3, #4]
 800dc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc50:	891b      	ldrh	r3, [r3, #8]
 800dc52:	4619      	mov	r1, r3
 800dc54:	4610      	mov	r0, r2
 800dc56:	f7fb feb5 	bl	80099c4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800dc5a:	4b62      	ldr	r3, [pc, #392]	; (800dde4 <tcp_receive+0xf20>)
 800dc5c:	881b      	ldrh	r3, [r3, #0]
 800dc5e:	461a      	mov	r2, r3
 800dc60:	4b5e      	ldr	r3, [pc, #376]	; (800dddc <tcp_receive+0xf18>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	441a      	add	r2, r3
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6a:	6879      	ldr	r1, [r7, #4]
 800dc6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dc6e:	440b      	add	r3, r1
 800dc70:	1ad3      	subs	r3, r2, r3
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	f340 8089 	ble.w	800dd8a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800dc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	68db      	ldr	r3, [r3, #12]
 800dc7e:	899b      	ldrh	r3, [r3, #12]
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7fa fb8c 	bl	80083a0 <lwip_htons>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	f003 0301 	and.w	r3, r3, #1
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d022      	beq.n	800dcda <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800dc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	68db      	ldr	r3, [r3, #12]
 800dc9a:	899b      	ldrh	r3, [r3, #12]
 800dc9c:	b29b      	uxth	r3, r3
 800dc9e:	b21b      	sxth	r3, r3
 800dca0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dca4:	b21c      	sxth	r4, r3
 800dca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	899b      	ldrh	r3, [r3, #12]
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7fa fb75 	bl	80083a0 <lwip_htons>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7fa fb6c 	bl	80083a0 <lwip_htons>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	b21b      	sxth	r3, r3
 800dccc:	4323      	orrs	r3, r4
 800dcce:	b21a      	sxth	r2, r3
 800dcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	68db      	ldr	r3, [r3, #12]
 800dcd6:	b292      	uxth	r2, r2
 800dcd8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcde:	b29a      	uxth	r2, r3
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dce4:	4413      	add	r3, r2
 800dce6:	b299      	uxth	r1, r3
 800dce8:	4b3c      	ldr	r3, [pc, #240]	; (800dddc <tcp_receive+0xf18>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	b29a      	uxth	r2, r3
 800dcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	1a8a      	subs	r2, r1, r2
 800dcf4:	b292      	uxth	r2, r2
 800dcf6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800dcf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	685a      	ldr	r2, [r3, #4]
 800dcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	891b      	ldrh	r3, [r3, #8]
 800dd04:	4619      	mov	r1, r3
 800dd06:	4610      	mov	r0, r2
 800dd08:	f7fb fe5c 	bl	80099c4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800dd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	891c      	ldrh	r4, [r3, #8]
 800dd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	68db      	ldr	r3, [r3, #12]
 800dd18:	899b      	ldrh	r3, [r3, #12]
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fa fb3f 	bl	80083a0 <lwip_htons>
 800dd22:	4603      	mov	r3, r0
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	f003 0303 	and.w	r3, r3, #3
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d001      	beq.n	800dd32 <tcp_receive+0xe6e>
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e000      	b.n	800dd34 <tcp_receive+0xe70>
 800dd32:	2300      	movs	r3, #0
 800dd34:	4423      	add	r3, r4
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	4b2a      	ldr	r3, [pc, #168]	; (800dde4 <tcp_receive+0xf20>)
 800dd3a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dd3c:	4b29      	ldr	r3, [pc, #164]	; (800dde4 <tcp_receive+0xf20>)
 800dd3e:	881b      	ldrh	r3, [r3, #0]
 800dd40:	461a      	mov	r2, r3
 800dd42:	4b26      	ldr	r3, [pc, #152]	; (800dddc <tcp_receive+0xf18>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	441a      	add	r2, r3
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4c:	6879      	ldr	r1, [r7, #4]
 800dd4e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dd50:	440b      	add	r3, r1
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d019      	beq.n	800dd8a <tcp_receive+0xec6>
 800dd56:	4b24      	ldr	r3, [pc, #144]	; (800dde8 <tcp_receive+0xf24>)
 800dd58:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800dd5c:	4923      	ldr	r1, [pc, #140]	; (800ddec <tcp_receive+0xf28>)
 800dd5e:	4824      	ldr	r0, [pc, #144]	; (800ddf0 <tcp_receive+0xf2c>)
 800dd60:	f004 ff1c 	bl	8012b9c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800dd64:	e011      	b.n	800dd8a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	f47f aea4 	bne.w	800dabc <tcp_receive+0xbf8>
 800dd74:	e00a      	b.n	800dd8c <tcp_receive+0xec8>
                break;
 800dd76:	bf00      	nop
 800dd78:	e008      	b.n	800dd8c <tcp_receive+0xec8>
                break;
 800dd7a:	bf00      	nop
 800dd7c:	e006      	b.n	800dd8c <tcp_receive+0xec8>
                  break;
 800dd7e:	bf00      	nop
 800dd80:	e004      	b.n	800dd8c <tcp_receive+0xec8>
                  break;
 800dd82:	bf00      	nop
 800dd84:	e002      	b.n	800dd8c <tcp_receive+0xec8>
                  break;
 800dd86:	bf00      	nop
 800dd88:	e000      	b.n	800dd8c <tcp_receive+0xec8>
                break;
 800dd8a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f001 fa33 	bl	800f1f8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800dd92:	e003      	b.n	800dd9c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f001 fa2f 	bl	800f1f8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dd9a:	e01a      	b.n	800ddd2 <tcp_receive+0xf0e>
 800dd9c:	e019      	b.n	800ddd2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800dd9e:	4b0f      	ldr	r3, [pc, #60]	; (800dddc <tcp_receive+0xf18>)
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda6:	1ad3      	subs	r3, r2, r3
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	db0a      	blt.n	800ddc2 <tcp_receive+0xefe>
 800ddac:	4b0b      	ldr	r3, [pc, #44]	; (800dddc <tcp_receive+0xf18>)
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb4:	6879      	ldr	r1, [r7, #4]
 800ddb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ddb8:	440b      	add	r3, r1
 800ddba:	1ad3      	subs	r3, r2, r3
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	dd07      	ble.n	800ddd2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	8b5b      	ldrh	r3, [r3, #26]
 800ddc6:	f043 0302 	orr.w	r3, r3, #2
 800ddca:	b29a      	uxth	r2, r3
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ddd0:	e7ff      	b.n	800ddd2 <tcp_receive+0xf0e>
 800ddd2:	bf00      	nop
 800ddd4:	3750      	adds	r7, #80	; 0x50
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bdb0      	pop	{r4, r5, r7, pc}
 800ddda:	bf00      	nop
 800dddc:	2400bd28 	.word	0x2400bd28
 800dde0:	2400bd08 	.word	0x2400bd08
 800dde4:	2400bd32 	.word	0x2400bd32
 800dde8:	08014e40 	.word	0x08014e40
 800ddec:	080151e8 	.word	0x080151e8
 800ddf0:	08014e8c 	.word	0x08014e8c

0800ddf4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b083      	sub	sp, #12
 800ddf8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ddfa:	4b15      	ldr	r3, [pc, #84]	; (800de50 <tcp_get_next_optbyte+0x5c>)
 800ddfc:	881b      	ldrh	r3, [r3, #0]
 800ddfe:	1c5a      	adds	r2, r3, #1
 800de00:	b291      	uxth	r1, r2
 800de02:	4a13      	ldr	r2, [pc, #76]	; (800de50 <tcp_get_next_optbyte+0x5c>)
 800de04:	8011      	strh	r1, [r2, #0]
 800de06:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800de08:	4b12      	ldr	r3, [pc, #72]	; (800de54 <tcp_get_next_optbyte+0x60>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d004      	beq.n	800de1a <tcp_get_next_optbyte+0x26>
 800de10:	4b11      	ldr	r3, [pc, #68]	; (800de58 <tcp_get_next_optbyte+0x64>)
 800de12:	881b      	ldrh	r3, [r3, #0]
 800de14:	88fa      	ldrh	r2, [r7, #6]
 800de16:	429a      	cmp	r2, r3
 800de18:	d208      	bcs.n	800de2c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800de1a:	4b10      	ldr	r3, [pc, #64]	; (800de5c <tcp_get_next_optbyte+0x68>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	3314      	adds	r3, #20
 800de20:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800de22:	88fb      	ldrh	r3, [r7, #6]
 800de24:	683a      	ldr	r2, [r7, #0]
 800de26:	4413      	add	r3, r2
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	e00b      	b.n	800de44 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800de2c:	88fb      	ldrh	r3, [r7, #6]
 800de2e:	b2da      	uxtb	r2, r3
 800de30:	4b09      	ldr	r3, [pc, #36]	; (800de58 <tcp_get_next_optbyte+0x64>)
 800de32:	881b      	ldrh	r3, [r3, #0]
 800de34:	b2db      	uxtb	r3, r3
 800de36:	1ad3      	subs	r3, r2, r3
 800de38:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800de3a:	4b06      	ldr	r3, [pc, #24]	; (800de54 <tcp_get_next_optbyte+0x60>)
 800de3c:	681a      	ldr	r2, [r3, #0]
 800de3e:	797b      	ldrb	r3, [r7, #5]
 800de40:	4413      	add	r3, r2
 800de42:	781b      	ldrb	r3, [r3, #0]
  }
}
 800de44:	4618      	mov	r0, r3
 800de46:	370c      	adds	r7, #12
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	2400bd24 	.word	0x2400bd24
 800de54:	2400bd20 	.word	0x2400bd20
 800de58:	2400bd1e 	.word	0x2400bd1e
 800de5c:	2400bd18 	.word	0x2400bd18

0800de60 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d106      	bne.n	800de7c <tcp_parseopt+0x1c>
 800de6e:	4b32      	ldr	r3, [pc, #200]	; (800df38 <tcp_parseopt+0xd8>)
 800de70:	f240 727d 	movw	r2, #1917	; 0x77d
 800de74:	4931      	ldr	r1, [pc, #196]	; (800df3c <tcp_parseopt+0xdc>)
 800de76:	4832      	ldr	r0, [pc, #200]	; (800df40 <tcp_parseopt+0xe0>)
 800de78:	f004 fe90 	bl	8012b9c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800de7c:	4b31      	ldr	r3, [pc, #196]	; (800df44 <tcp_parseopt+0xe4>)
 800de7e:	881b      	ldrh	r3, [r3, #0]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d055      	beq.n	800df30 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800de84:	4b30      	ldr	r3, [pc, #192]	; (800df48 <tcp_parseopt+0xe8>)
 800de86:	2200      	movs	r2, #0
 800de88:	801a      	strh	r2, [r3, #0]
 800de8a:	e045      	b.n	800df18 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800de8c:	f7ff ffb2 	bl	800ddf4 <tcp_get_next_optbyte>
 800de90:	4603      	mov	r3, r0
 800de92:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800de94:	7bfb      	ldrb	r3, [r7, #15]
 800de96:	2b02      	cmp	r3, #2
 800de98:	d006      	beq.n	800dea8 <tcp_parseopt+0x48>
 800de9a:	2b02      	cmp	r3, #2
 800de9c:	dc2b      	bgt.n	800def6 <tcp_parseopt+0x96>
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d041      	beq.n	800df26 <tcp_parseopt+0xc6>
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d127      	bne.n	800def6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800dea6:	e037      	b.n	800df18 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800dea8:	f7ff ffa4 	bl	800ddf4 <tcp_get_next_optbyte>
 800deac:	4603      	mov	r3, r0
 800deae:	2b04      	cmp	r3, #4
 800deb0:	d13b      	bne.n	800df2a <tcp_parseopt+0xca>
 800deb2:	4b25      	ldr	r3, [pc, #148]	; (800df48 <tcp_parseopt+0xe8>)
 800deb4:	881b      	ldrh	r3, [r3, #0]
 800deb6:	3301      	adds	r3, #1
 800deb8:	4a22      	ldr	r2, [pc, #136]	; (800df44 <tcp_parseopt+0xe4>)
 800deba:	8812      	ldrh	r2, [r2, #0]
 800debc:	4293      	cmp	r3, r2
 800debe:	da34      	bge.n	800df2a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800dec0:	f7ff ff98 	bl	800ddf4 <tcp_get_next_optbyte>
 800dec4:	4603      	mov	r3, r0
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	021b      	lsls	r3, r3, #8
 800deca:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800decc:	f7ff ff92 	bl	800ddf4 <tcp_get_next_optbyte>
 800ded0:	4603      	mov	r3, r0
 800ded2:	b29a      	uxth	r2, r3
 800ded4:	89bb      	ldrh	r3, [r7, #12]
 800ded6:	4313      	orrs	r3, r2
 800ded8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800deda:	89bb      	ldrh	r3, [r7, #12]
 800dedc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800dee0:	d804      	bhi.n	800deec <tcp_parseopt+0x8c>
 800dee2:	89bb      	ldrh	r3, [r7, #12]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d001      	beq.n	800deec <tcp_parseopt+0x8c>
 800dee8:	89ba      	ldrh	r2, [r7, #12]
 800deea:	e001      	b.n	800def0 <tcp_parseopt+0x90>
 800deec:	f44f 7206 	mov.w	r2, #536	; 0x218
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800def4:	e010      	b.n	800df18 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800def6:	f7ff ff7d 	bl	800ddf4 <tcp_get_next_optbyte>
 800defa:	4603      	mov	r3, r0
 800defc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800defe:	7afb      	ldrb	r3, [r7, #11]
 800df00:	2b01      	cmp	r3, #1
 800df02:	d914      	bls.n	800df2e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800df04:	7afb      	ldrb	r3, [r7, #11]
 800df06:	b29a      	uxth	r2, r3
 800df08:	4b0f      	ldr	r3, [pc, #60]	; (800df48 <tcp_parseopt+0xe8>)
 800df0a:	881b      	ldrh	r3, [r3, #0]
 800df0c:	4413      	add	r3, r2
 800df0e:	b29b      	uxth	r3, r3
 800df10:	3b02      	subs	r3, #2
 800df12:	b29a      	uxth	r2, r3
 800df14:	4b0c      	ldr	r3, [pc, #48]	; (800df48 <tcp_parseopt+0xe8>)
 800df16:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800df18:	4b0b      	ldr	r3, [pc, #44]	; (800df48 <tcp_parseopt+0xe8>)
 800df1a:	881a      	ldrh	r2, [r3, #0]
 800df1c:	4b09      	ldr	r3, [pc, #36]	; (800df44 <tcp_parseopt+0xe4>)
 800df1e:	881b      	ldrh	r3, [r3, #0]
 800df20:	429a      	cmp	r2, r3
 800df22:	d3b3      	bcc.n	800de8c <tcp_parseopt+0x2c>
 800df24:	e004      	b.n	800df30 <tcp_parseopt+0xd0>
          return;
 800df26:	bf00      	nop
 800df28:	e002      	b.n	800df30 <tcp_parseopt+0xd0>
            return;
 800df2a:	bf00      	nop
 800df2c:	e000      	b.n	800df30 <tcp_parseopt+0xd0>
            return;
 800df2e:	bf00      	nop
      }
    }
  }
}
 800df30:	3710      	adds	r7, #16
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	08014e40 	.word	0x08014e40
 800df3c:	080152a4 	.word	0x080152a4
 800df40:	08014e8c 	.word	0x08014e8c
 800df44:	2400bd1c 	.word	0x2400bd1c
 800df48:	2400bd24 	.word	0x2400bd24

0800df4c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800df4c:	b480      	push	{r7}
 800df4e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800df50:	4b05      	ldr	r3, [pc, #20]	; (800df68 <tcp_trigger_input_pcb_close+0x1c>)
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	f043 0310 	orr.w	r3, r3, #16
 800df58:	b2da      	uxtb	r2, r3
 800df5a:	4b03      	ldr	r3, [pc, #12]	; (800df68 <tcp_trigger_input_pcb_close+0x1c>)
 800df5c:	701a      	strb	r2, [r3, #0]
}
 800df5e:	bf00      	nop
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr
 800df68:	2400bd35 	.word	0x2400bd35

0800df6c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00a      	beq.n	800df94 <tcp_route+0x28>
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	7a1b      	ldrb	r3, [r3, #8]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d006      	beq.n	800df94 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	7a1b      	ldrb	r3, [r3, #8]
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7fb fb12 	bl	80095b4 <netif_get_by_index>
 800df90:	4603      	mov	r3, r0
 800df92:	e003      	b.n	800df9c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f003 fa11 	bl	80113bc <ip4_route>
 800df9a:	4603      	mov	r3, r0
  }
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3710      	adds	r7, #16
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800dfa4:	b590      	push	{r4, r7, lr}
 800dfa6:	b087      	sub	sp, #28
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	60b9      	str	r1, [r7, #8]
 800dfae:	603b      	str	r3, [r7, #0]
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d105      	bne.n	800dfc6 <tcp_create_segment+0x22>
 800dfba:	4b44      	ldr	r3, [pc, #272]	; (800e0cc <tcp_create_segment+0x128>)
 800dfbc:	22a3      	movs	r2, #163	; 0xa3
 800dfbe:	4944      	ldr	r1, [pc, #272]	; (800e0d0 <tcp_create_segment+0x12c>)
 800dfc0:	4844      	ldr	r0, [pc, #272]	; (800e0d4 <tcp_create_segment+0x130>)
 800dfc2:	f004 fdeb 	bl	8012b9c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d105      	bne.n	800dfd8 <tcp_create_segment+0x34>
 800dfcc:	4b3f      	ldr	r3, [pc, #252]	; (800e0cc <tcp_create_segment+0x128>)
 800dfce:	22a4      	movs	r2, #164	; 0xa4
 800dfd0:	4941      	ldr	r1, [pc, #260]	; (800e0d8 <tcp_create_segment+0x134>)
 800dfd2:	4840      	ldr	r0, [pc, #256]	; (800e0d4 <tcp_create_segment+0x130>)
 800dfd4:	f004 fde2 	bl	8012b9c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dfd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dfdc:	009b      	lsls	r3, r3, #2
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	f003 0304 	and.w	r3, r3, #4
 800dfe4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800dfe6:	2003      	movs	r0, #3
 800dfe8:	f7fa ff58 	bl	8008e9c <memp_malloc>
 800dfec:	6138      	str	r0, [r7, #16]
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d104      	bne.n	800dffe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800dff4:	68b8      	ldr	r0, [r7, #8]
 800dff6:	f7fb fe69 	bl	8009ccc <pbuf_free>
    return NULL;
 800dffa:	2300      	movs	r3, #0
 800dffc:	e061      	b.n	800e0c2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e004:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	2200      	movs	r2, #0
 800e00a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	68ba      	ldr	r2, [r7, #8]
 800e010:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	891a      	ldrh	r2, [r3, #8]
 800e016:	7dfb      	ldrb	r3, [r7, #23]
 800e018:	b29b      	uxth	r3, r3
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d205      	bcs.n	800e02a <tcp_create_segment+0x86>
 800e01e:	4b2b      	ldr	r3, [pc, #172]	; (800e0cc <tcp_create_segment+0x128>)
 800e020:	22b0      	movs	r2, #176	; 0xb0
 800e022:	492e      	ldr	r1, [pc, #184]	; (800e0dc <tcp_create_segment+0x138>)
 800e024:	482b      	ldr	r0, [pc, #172]	; (800e0d4 <tcp_create_segment+0x130>)
 800e026:	f004 fdb9 	bl	8012b9c <iprintf>
  seg->len = p->tot_len - optlen;
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	891a      	ldrh	r2, [r3, #8]
 800e02e:	7dfb      	ldrb	r3, [r7, #23]
 800e030:	b29b      	uxth	r3, r3
 800e032:	1ad3      	subs	r3, r2, r3
 800e034:	b29a      	uxth	r2, r3
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e03a:	2114      	movs	r1, #20
 800e03c:	68b8      	ldr	r0, [r7, #8]
 800e03e:	f7fb fdaf 	bl	8009ba0 <pbuf_add_header>
 800e042:	4603      	mov	r3, r0
 800e044:	2b00      	cmp	r3, #0
 800e046:	d004      	beq.n	800e052 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e048:	6938      	ldr	r0, [r7, #16]
 800e04a:	f7fd f8ce 	bl	800b1ea <tcp_seg_free>
    return NULL;
 800e04e:	2300      	movs	r3, #0
 800e050:	e037      	b.n	800e0c2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	685a      	ldr	r2, [r3, #4]
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	8ada      	ldrh	r2, [r3, #22]
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	68dc      	ldr	r4, [r3, #12]
 800e064:	4610      	mov	r0, r2
 800e066:	f7fa f99b 	bl	80083a0 <lwip_htons>
 800e06a:	4603      	mov	r3, r0
 800e06c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	8b1a      	ldrh	r2, [r3, #24]
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	68dc      	ldr	r4, [r3, #12]
 800e076:	4610      	mov	r0, r2
 800e078:	f7fa f992 	bl	80083a0 <lwip_htons>
 800e07c:	4603      	mov	r3, r0
 800e07e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	68dc      	ldr	r4, [r3, #12]
 800e084:	6838      	ldr	r0, [r7, #0]
 800e086:	f7fa f9a0 	bl	80083ca <lwip_htonl>
 800e08a:	4603      	mov	r3, r0
 800e08c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e08e:	7dfb      	ldrb	r3, [r7, #23]
 800e090:	089b      	lsrs	r3, r3, #2
 800e092:	b2db      	uxtb	r3, r3
 800e094:	b29b      	uxth	r3, r3
 800e096:	3305      	adds	r3, #5
 800e098:	b29b      	uxth	r3, r3
 800e09a:	031b      	lsls	r3, r3, #12
 800e09c:	b29a      	uxth	r2, r3
 800e09e:	79fb      	ldrb	r3, [r7, #7]
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	4313      	orrs	r3, r2
 800e0a4:	b29a      	uxth	r2, r3
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	68dc      	ldr	r4, [r3, #12]
 800e0aa:	4610      	mov	r0, r2
 800e0ac:	f7fa f978 	bl	80083a0 <lwip_htons>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	749a      	strb	r2, [r3, #18]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	74da      	strb	r2, [r3, #19]
  return seg;
 800e0c0:	693b      	ldr	r3, [r7, #16]
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	371c      	adds	r7, #28
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd90      	pop	{r4, r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	080152c0 	.word	0x080152c0
 800e0d0:	080152f4 	.word	0x080152f4
 800e0d4:	08015314 	.word	0x08015314
 800e0d8:	0801533c 	.word	0x0801533c
 800e0dc:	08015360 	.word	0x08015360

0800e0e0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e0e0:	b590      	push	{r4, r7, lr}
 800e0e2:	b08b      	sub	sp, #44	; 0x2c
 800e0e4:	af02      	add	r7, sp, #8
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	61fb      	str	r3, [r7, #28]
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d106      	bne.n	800e10c <tcp_split_unsent_seg+0x2c>
 800e0fe:	4b95      	ldr	r3, [pc, #596]	; (800e354 <tcp_split_unsent_seg+0x274>)
 800e100:	f240 324b 	movw	r2, #843	; 0x34b
 800e104:	4994      	ldr	r1, [pc, #592]	; (800e358 <tcp_split_unsent_seg+0x278>)
 800e106:	4895      	ldr	r0, [pc, #596]	; (800e35c <tcp_split_unsent_seg+0x27c>)
 800e108:	f004 fd48 	bl	8012b9c <iprintf>

  useg = pcb->unsent;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e110:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d102      	bne.n	800e11e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e11c:	e116      	b.n	800e34c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e11e:	887b      	ldrh	r3, [r7, #2]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d109      	bne.n	800e138 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e124:	4b8b      	ldr	r3, [pc, #556]	; (800e354 <tcp_split_unsent_seg+0x274>)
 800e126:	f240 3253 	movw	r2, #851	; 0x353
 800e12a:	498d      	ldr	r1, [pc, #564]	; (800e360 <tcp_split_unsent_seg+0x280>)
 800e12c:	488b      	ldr	r0, [pc, #556]	; (800e35c <tcp_split_unsent_seg+0x27c>)
 800e12e:	f004 fd35 	bl	8012b9c <iprintf>
    return ERR_VAL;
 800e132:	f06f 0305 	mvn.w	r3, #5
 800e136:	e109      	b.n	800e34c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	891b      	ldrh	r3, [r3, #8]
 800e13c:	887a      	ldrh	r2, [r7, #2]
 800e13e:	429a      	cmp	r2, r3
 800e140:	d301      	bcc.n	800e146 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e142:	2300      	movs	r3, #0
 800e144:	e102      	b.n	800e34c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e14a:	887a      	ldrh	r2, [r7, #2]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d906      	bls.n	800e15e <tcp_split_unsent_seg+0x7e>
 800e150:	4b80      	ldr	r3, [pc, #512]	; (800e354 <tcp_split_unsent_seg+0x274>)
 800e152:	f240 325b 	movw	r2, #859	; 0x35b
 800e156:	4983      	ldr	r1, [pc, #524]	; (800e364 <tcp_split_unsent_seg+0x284>)
 800e158:	4880      	ldr	r0, [pc, #512]	; (800e35c <tcp_split_unsent_seg+0x27c>)
 800e15a:	f004 fd1f 	bl	8012b9c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	891b      	ldrh	r3, [r3, #8]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d106      	bne.n	800e174 <tcp_split_unsent_seg+0x94>
 800e166:	4b7b      	ldr	r3, [pc, #492]	; (800e354 <tcp_split_unsent_seg+0x274>)
 800e168:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e16c:	497e      	ldr	r1, [pc, #504]	; (800e368 <tcp_split_unsent_seg+0x288>)
 800e16e:	487b      	ldr	r0, [pc, #492]	; (800e35c <tcp_split_unsent_seg+0x27c>)
 800e170:	f004 fd14 	bl	8012b9c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	7a9b      	ldrb	r3, [r3, #10]
 800e178:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e17a:	7bfb      	ldrb	r3, [r7, #15]
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	b2db      	uxtb	r3, r3
 800e180:	f003 0304 	and.w	r3, r3, #4
 800e184:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	891a      	ldrh	r2, [r3, #8]
 800e18a:	887b      	ldrh	r3, [r7, #2]
 800e18c:	1ad3      	subs	r3, r2, r3
 800e18e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e190:	7bbb      	ldrb	r3, [r7, #14]
 800e192:	b29a      	uxth	r2, r3
 800e194:	89bb      	ldrh	r3, [r7, #12]
 800e196:	4413      	add	r3, r2
 800e198:	b29b      	uxth	r3, r3
 800e19a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e19e:	4619      	mov	r1, r3
 800e1a0:	2036      	movs	r0, #54	; 0x36
 800e1a2:	f7fb fab1 	bl	8009708 <pbuf_alloc>
 800e1a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	f000 80b7 	beq.w	800e31e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	891a      	ldrh	r2, [r3, #8]
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	891b      	ldrh	r3, [r3, #8]
 800e1ba:	1ad3      	subs	r3, r2, r3
 800e1bc:	b29a      	uxth	r2, r3
 800e1be:	887b      	ldrh	r3, [r7, #2]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	6858      	ldr	r0, [r3, #4]
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	685a      	ldr	r2, [r3, #4]
 800e1cc:	7bbb      	ldrb	r3, [r7, #14]
 800e1ce:	18d1      	adds	r1, r2, r3
 800e1d0:	897b      	ldrh	r3, [r7, #10]
 800e1d2:	89ba      	ldrh	r2, [r7, #12]
 800e1d4:	f7fb ff80 	bl	800a0d8 <pbuf_copy_partial>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	461a      	mov	r2, r3
 800e1dc:	89bb      	ldrh	r3, [r7, #12]
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	f040 809f 	bne.w	800e322 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	899b      	ldrh	r3, [r3, #12]
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7fa f8d7 	bl	80083a0 <lwip_htons>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	b2db      	uxtb	r3, r3
 800e1f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e1fa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e200:	7efb      	ldrb	r3, [r7, #27]
 800e202:	f003 0308 	and.w	r3, r3, #8
 800e206:	2b00      	cmp	r3, #0
 800e208:	d007      	beq.n	800e21a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e20a:	7efb      	ldrb	r3, [r7, #27]
 800e20c:	f023 0308 	bic.w	r3, r3, #8
 800e210:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e212:	7ebb      	ldrb	r3, [r7, #26]
 800e214:	f043 0308 	orr.w	r3, r3, #8
 800e218:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e21a:	7efb      	ldrb	r3, [r7, #27]
 800e21c:	f003 0301 	and.w	r3, r3, #1
 800e220:	2b00      	cmp	r3, #0
 800e222:	d007      	beq.n	800e234 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e224:	7efb      	ldrb	r3, [r7, #27]
 800e226:	f023 0301 	bic.w	r3, r3, #1
 800e22a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e22c:	7ebb      	ldrb	r3, [r7, #26]
 800e22e:	f043 0301 	orr.w	r3, r3, #1
 800e232:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	68db      	ldr	r3, [r3, #12]
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7fa f8c5 	bl	80083ca <lwip_htonl>
 800e240:	4602      	mov	r2, r0
 800e242:	887b      	ldrh	r3, [r7, #2]
 800e244:	18d1      	adds	r1, r2, r3
 800e246:	7eba      	ldrb	r2, [r7, #26]
 800e248:	7bfb      	ldrb	r3, [r7, #15]
 800e24a:	9300      	str	r3, [sp, #0]
 800e24c:	460b      	mov	r3, r1
 800e24e:	6939      	ldr	r1, [r7, #16]
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f7ff fea7 	bl	800dfa4 <tcp_create_segment>
 800e256:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d063      	beq.n	800e326 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	4618      	mov	r0, r3
 800e264:	f7fb fdc0 	bl	8009de8 <pbuf_clen>
 800e268:	4603      	mov	r3, r0
 800e26a:	461a      	mov	r2, r3
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e272:	1a9b      	subs	r3, r3, r2
 800e274:	b29a      	uxth	r2, r3
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	6858      	ldr	r0, [r3, #4]
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	891a      	ldrh	r2, [r3, #8]
 800e286:	89bb      	ldrh	r3, [r7, #12]
 800e288:	1ad3      	subs	r3, r2, r3
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	4619      	mov	r1, r3
 800e28e:	f7fb fb99 	bl	80099c4 <pbuf_realloc>
  useg->len -= remainder;
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	891a      	ldrh	r2, [r3, #8]
 800e296:	89bb      	ldrh	r3, [r7, #12]
 800e298:	1ad3      	subs	r3, r2, r3
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	899b      	ldrh	r3, [r3, #12]
 800e2a6:	b29c      	uxth	r4, r3
 800e2a8:	7efb      	ldrb	r3, [r7, #27]
 800e2aa:	b29b      	uxth	r3, r3
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7fa f877 	bl	80083a0 <lwip_htons>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	461a      	mov	r2, r3
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	68db      	ldr	r3, [r3, #12]
 800e2ba:	4322      	orrs	r2, r4
 800e2bc:	b292      	uxth	r2, r2
 800e2be:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7fb fd8f 	bl	8009de8 <pbuf_clen>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e2d4:	4413      	add	r3, r2
 800e2d6:	b29a      	uxth	r2, r3
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e2de:	69fb      	ldr	r3, [r7, #28]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7fb fd80 	bl	8009de8 <pbuf_clen>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e2f2:	4413      	add	r3, r2
 800e2f4:	b29a      	uxth	r2, r3
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	69fa      	ldr	r2, [r7, #28]
 800e308:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e30a:	69fb      	ldr	r3, [r7, #28]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d103      	bne.n	800e31a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2200      	movs	r2, #0
 800e316:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e31a:	2300      	movs	r3, #0
 800e31c:	e016      	b.n	800e34c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e31e:	bf00      	nop
 800e320:	e002      	b.n	800e328 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e322:	bf00      	nop
 800e324:	e000      	b.n	800e328 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e326:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d006      	beq.n	800e33c <tcp_split_unsent_seg+0x25c>
 800e32e:	4b09      	ldr	r3, [pc, #36]	; (800e354 <tcp_split_unsent_seg+0x274>)
 800e330:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e334:	490d      	ldr	r1, [pc, #52]	; (800e36c <tcp_split_unsent_seg+0x28c>)
 800e336:	4809      	ldr	r0, [pc, #36]	; (800e35c <tcp_split_unsent_seg+0x27c>)
 800e338:	f004 fc30 	bl	8012b9c <iprintf>
  if (p != NULL) {
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d002      	beq.n	800e348 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e342:	6938      	ldr	r0, [r7, #16]
 800e344:	f7fb fcc2 	bl	8009ccc <pbuf_free>
  }

  return ERR_MEM;
 800e348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3724      	adds	r7, #36	; 0x24
 800e350:	46bd      	mov	sp, r7
 800e352:	bd90      	pop	{r4, r7, pc}
 800e354:	080152c0 	.word	0x080152c0
 800e358:	08015654 	.word	0x08015654
 800e35c:	08015314 	.word	0x08015314
 800e360:	08015678 	.word	0x08015678
 800e364:	0801569c 	.word	0x0801569c
 800e368:	080156ac 	.word	0x080156ac
 800e36c:	080156bc 	.word	0x080156bc

0800e370 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e370:	b590      	push	{r4, r7, lr}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d106      	bne.n	800e38c <tcp_send_fin+0x1c>
 800e37e:	4b21      	ldr	r3, [pc, #132]	; (800e404 <tcp_send_fin+0x94>)
 800e380:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e384:	4920      	ldr	r1, [pc, #128]	; (800e408 <tcp_send_fin+0x98>)
 800e386:	4821      	ldr	r0, [pc, #132]	; (800e40c <tcp_send_fin+0x9c>)
 800e388:	f004 fc08 	bl	8012b9c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e390:	2b00      	cmp	r3, #0
 800e392:	d02e      	beq.n	800e3f2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e398:	60fb      	str	r3, [r7, #12]
 800e39a:	e002      	b.n	800e3a2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d1f8      	bne.n	800e39c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	899b      	ldrh	r3, [r3, #12]
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7f9 fff4 	bl	80083a0 <lwip_htons>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	f003 0307 	and.w	r3, r3, #7
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d116      	bne.n	800e3f2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	68db      	ldr	r3, [r3, #12]
 800e3c8:	899b      	ldrh	r3, [r3, #12]
 800e3ca:	b29c      	uxth	r4, r3
 800e3cc:	2001      	movs	r0, #1
 800e3ce:	f7f9 ffe7 	bl	80083a0 <lwip_htons>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	4322      	orrs	r2, r4
 800e3dc:	b292      	uxth	r2, r2
 800e3de:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	8b5b      	ldrh	r3, [r3, #26]
 800e3e4:	f043 0320 	orr.w	r3, r3, #32
 800e3e8:	b29a      	uxth	r2, r3
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	e004      	b.n	800e3fc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e3f2:	2101      	movs	r1, #1
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 f80b 	bl	800e410 <tcp_enqueue_flags>
 800e3fa:	4603      	mov	r3, r0
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3714      	adds	r7, #20
 800e400:	46bd      	mov	sp, r7
 800e402:	bd90      	pop	{r4, r7, pc}
 800e404:	080152c0 	.word	0x080152c0
 800e408:	080156c8 	.word	0x080156c8
 800e40c:	08015314 	.word	0x08015314

0800e410 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b08a      	sub	sp, #40	; 0x28
 800e414:	af02      	add	r7, sp, #8
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	460b      	mov	r3, r1
 800e41a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e41c:	2300      	movs	r3, #0
 800e41e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e420:	2300      	movs	r3, #0
 800e422:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e424:	78fb      	ldrb	r3, [r7, #3]
 800e426:	f003 0303 	and.w	r3, r3, #3
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d106      	bne.n	800e43c <tcp_enqueue_flags+0x2c>
 800e42e:	4b67      	ldr	r3, [pc, #412]	; (800e5cc <tcp_enqueue_flags+0x1bc>)
 800e430:	f240 4211 	movw	r2, #1041	; 0x411
 800e434:	4966      	ldr	r1, [pc, #408]	; (800e5d0 <tcp_enqueue_flags+0x1c0>)
 800e436:	4867      	ldr	r0, [pc, #412]	; (800e5d4 <tcp_enqueue_flags+0x1c4>)
 800e438:	f004 fbb0 	bl	8012b9c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d106      	bne.n	800e450 <tcp_enqueue_flags+0x40>
 800e442:	4b62      	ldr	r3, [pc, #392]	; (800e5cc <tcp_enqueue_flags+0x1bc>)
 800e444:	f240 4213 	movw	r2, #1043	; 0x413
 800e448:	4963      	ldr	r1, [pc, #396]	; (800e5d8 <tcp_enqueue_flags+0x1c8>)
 800e44a:	4862      	ldr	r0, [pc, #392]	; (800e5d4 <tcp_enqueue_flags+0x1c4>)
 800e44c:	f004 fba6 	bl	8012b9c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e450:	78fb      	ldrb	r3, [r7, #3]
 800e452:	f003 0302 	and.w	r3, r3, #2
 800e456:	2b00      	cmp	r3, #0
 800e458:	d001      	beq.n	800e45e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e45a:	2301      	movs	r3, #1
 800e45c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e45e:	7ffb      	ldrb	r3, [r7, #31]
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	b2db      	uxtb	r3, r3
 800e464:	f003 0304 	and.w	r3, r3, #4
 800e468:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e46a:	7dfb      	ldrb	r3, [r7, #23]
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e472:	4619      	mov	r1, r3
 800e474:	2036      	movs	r0, #54	; 0x36
 800e476:	f7fb f947 	bl	8009708 <pbuf_alloc>
 800e47a:	6138      	str	r0, [r7, #16]
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d109      	bne.n	800e496 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	8b5b      	ldrh	r3, [r3, #26]
 800e486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e48a:	b29a      	uxth	r2, r3
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e494:	e095      	b.n	800e5c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	895a      	ldrh	r2, [r3, #10]
 800e49a:	7dfb      	ldrb	r3, [r7, #23]
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d206      	bcs.n	800e4b0 <tcp_enqueue_flags+0xa0>
 800e4a2:	4b4a      	ldr	r3, [pc, #296]	; (800e5cc <tcp_enqueue_flags+0x1bc>)
 800e4a4:	f240 4239 	movw	r2, #1081	; 0x439
 800e4a8:	494c      	ldr	r1, [pc, #304]	; (800e5dc <tcp_enqueue_flags+0x1cc>)
 800e4aa:	484a      	ldr	r0, [pc, #296]	; (800e5d4 <tcp_enqueue_flags+0x1c4>)
 800e4ac:	f004 fb76 	bl	8012b9c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e4b4:	78fa      	ldrb	r2, [r7, #3]
 800e4b6:	7ffb      	ldrb	r3, [r7, #31]
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	6939      	ldr	r1, [r7, #16]
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f7ff fd70 	bl	800dfa4 <tcp_create_segment>
 800e4c4:	60f8      	str	r0, [r7, #12]
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d109      	bne.n	800e4e0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	8b5b      	ldrh	r3, [r3, #26]
 800e4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4d4:	b29a      	uxth	r2, r3
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e4da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4de:	e070      	b.n	800e5c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	f003 0303 	and.w	r3, r3, #3
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d006      	beq.n	800e4fa <tcp_enqueue_flags+0xea>
 800e4ec:	4b37      	ldr	r3, [pc, #220]	; (800e5cc <tcp_enqueue_flags+0x1bc>)
 800e4ee:	f240 4242 	movw	r2, #1090	; 0x442
 800e4f2:	493b      	ldr	r1, [pc, #236]	; (800e5e0 <tcp_enqueue_flags+0x1d0>)
 800e4f4:	4837      	ldr	r0, [pc, #220]	; (800e5d4 <tcp_enqueue_flags+0x1c4>)
 800e4f6:	f004 fb51 	bl	8012b9c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	891b      	ldrh	r3, [r3, #8]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d006      	beq.n	800e510 <tcp_enqueue_flags+0x100>
 800e502:	4b32      	ldr	r3, [pc, #200]	; (800e5cc <tcp_enqueue_flags+0x1bc>)
 800e504:	f240 4243 	movw	r2, #1091	; 0x443
 800e508:	4936      	ldr	r1, [pc, #216]	; (800e5e4 <tcp_enqueue_flags+0x1d4>)
 800e50a:	4832      	ldr	r0, [pc, #200]	; (800e5d4 <tcp_enqueue_flags+0x1c4>)
 800e50c:	f004 fb46 	bl	8012b9c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e514:	2b00      	cmp	r3, #0
 800e516:	d103      	bne.n	800e520 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	68fa      	ldr	r2, [r7, #12]
 800e51c:	66da      	str	r2, [r3, #108]	; 0x6c
 800e51e:	e00d      	b.n	800e53c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e524:	61bb      	str	r3, [r7, #24]
 800e526:	e002      	b.n	800e52e <tcp_enqueue_flags+0x11e>
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	61bb      	str	r3, [r7, #24]
 800e52e:	69bb      	ldr	r3, [r7, #24]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d1f8      	bne.n	800e528 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e536:	69bb      	ldr	r3, [r7, #24]
 800e538:	68fa      	ldr	r2, [r7, #12]
 800e53a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2200      	movs	r2, #0
 800e540:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e544:	78fb      	ldrb	r3, [r7, #3]
 800e546:	f003 0302 	and.w	r3, r3, #2
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d104      	bne.n	800e558 <tcp_enqueue_flags+0x148>
 800e54e:	78fb      	ldrb	r3, [r7, #3]
 800e550:	f003 0301 	and.w	r3, r3, #1
 800e554:	2b00      	cmp	r3, #0
 800e556:	d004      	beq.n	800e562 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e55c:	1c5a      	adds	r2, r3, #1
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e562:	78fb      	ldrb	r3, [r7, #3]
 800e564:	f003 0301 	and.w	r3, r3, #1
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d006      	beq.n	800e57a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	8b5b      	ldrh	r3, [r3, #26]
 800e570:	f043 0320 	orr.w	r3, r3, #32
 800e574:	b29a      	uxth	r2, r3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	4618      	mov	r0, r3
 800e580:	f7fb fc32 	bl	8009de8 <pbuf_clen>
 800e584:	4603      	mov	r3, r0
 800e586:	461a      	mov	r2, r3
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e58e:	4413      	add	r3, r2
 800e590:	b29a      	uxth	r2, r3
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d00e      	beq.n	800e5c0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d10a      	bne.n	800e5c0 <tcp_enqueue_flags+0x1b0>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d106      	bne.n	800e5c0 <tcp_enqueue_flags+0x1b0>
 800e5b2:	4b06      	ldr	r3, [pc, #24]	; (800e5cc <tcp_enqueue_flags+0x1bc>)
 800e5b4:	f240 4265 	movw	r2, #1125	; 0x465
 800e5b8:	490b      	ldr	r1, [pc, #44]	; (800e5e8 <tcp_enqueue_flags+0x1d8>)
 800e5ba:	4806      	ldr	r0, [pc, #24]	; (800e5d4 <tcp_enqueue_flags+0x1c4>)
 800e5bc:	f004 faee 	bl	8012b9c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e5c0:	2300      	movs	r3, #0
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3720      	adds	r7, #32
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	080152c0 	.word	0x080152c0
 800e5d0:	080156e4 	.word	0x080156e4
 800e5d4:	08015314 	.word	0x08015314
 800e5d8:	0801573c 	.word	0x0801573c
 800e5dc:	0801575c 	.word	0x0801575c
 800e5e0:	08015798 	.word	0x08015798
 800e5e4:	080157b0 	.word	0x080157b0
 800e5e8:	080157dc 	.word	0x080157dc

0800e5ec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e5ec:	b5b0      	push	{r4, r5, r7, lr}
 800e5ee:	b08a      	sub	sp, #40	; 0x28
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d106      	bne.n	800e608 <tcp_output+0x1c>
 800e5fa:	4b8a      	ldr	r3, [pc, #552]	; (800e824 <tcp_output+0x238>)
 800e5fc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e600:	4989      	ldr	r1, [pc, #548]	; (800e828 <tcp_output+0x23c>)
 800e602:	488a      	ldr	r0, [pc, #552]	; (800e82c <tcp_output+0x240>)
 800e604:	f004 faca 	bl	8012b9c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	7d1b      	ldrb	r3, [r3, #20]
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d106      	bne.n	800e61e <tcp_output+0x32>
 800e610:	4b84      	ldr	r3, [pc, #528]	; (800e824 <tcp_output+0x238>)
 800e612:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e616:	4986      	ldr	r1, [pc, #536]	; (800e830 <tcp_output+0x244>)
 800e618:	4884      	ldr	r0, [pc, #528]	; (800e82c <tcp_output+0x240>)
 800e61a:	f004 fabf 	bl	8012b9c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e61e:	4b85      	ldr	r3, [pc, #532]	; (800e834 <tcp_output+0x248>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	429a      	cmp	r2, r3
 800e626:	d101      	bne.n	800e62c <tcp_output+0x40>
    return ERR_OK;
 800e628:	2300      	movs	r3, #0
 800e62a:	e1ce      	b.n	800e9ca <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e638:	4293      	cmp	r3, r2
 800e63a:	bf28      	it	cs
 800e63c:	4613      	movcs	r3, r2
 800e63e:	b29b      	uxth	r3, r3
 800e640:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e646:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d10b      	bne.n	800e666 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	8b5b      	ldrh	r3, [r3, #26]
 800e652:	f003 0302 	and.w	r3, r3, #2
 800e656:	2b00      	cmp	r3, #0
 800e658:	f000 81aa 	beq.w	800e9b0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f000 fdcb 	bl	800f1f8 <tcp_send_empty_ack>
 800e662:	4603      	mov	r3, r0
 800e664:	e1b1      	b.n	800e9ca <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e666:	6879      	ldr	r1, [r7, #4]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	3304      	adds	r3, #4
 800e66c:	461a      	mov	r2, r3
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f7ff fc7c 	bl	800df6c <tcp_route>
 800e674:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d102      	bne.n	800e682 <tcp_output+0x96>
    return ERR_RTE;
 800e67c:	f06f 0303 	mvn.w	r3, #3
 800e680:	e1a3      	b.n	800e9ca <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d003      	beq.n	800e690 <tcp_output+0xa4>
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d111      	bne.n	800e6b4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d002      	beq.n	800e69c <tcp_output+0xb0>
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	3304      	adds	r3, #4
 800e69a:	e000      	b.n	800e69e <tcp_output+0xb2>
 800e69c:	2300      	movs	r3, #0
 800e69e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d102      	bne.n	800e6ac <tcp_output+0xc0>
      return ERR_RTE;
 800e6a6:	f06f 0303 	mvn.w	r3, #3
 800e6aa:	e18e      	b.n	800e9ca <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	681a      	ldr	r2, [r3, #0]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7f9 fe85 	bl	80083ca <lwip_htonl>
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6c6:	1ad3      	subs	r3, r2, r3
 800e6c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6ca:	8912      	ldrh	r2, [r2, #8]
 800e6cc:	4413      	add	r3, r2
 800e6ce:	69ba      	ldr	r2, [r7, #24]
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d227      	bcs.n	800e724 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e6da:	461a      	mov	r2, r3
 800e6dc:	69bb      	ldr	r3, [r7, #24]
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	d114      	bne.n	800e70c <tcp_output+0x120>
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d110      	bne.n	800e70c <tcp_output+0x120>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d10b      	bne.n	800e70c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2201      	movs	r2, #1
 800e700:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2200      	movs	r2, #0
 800e708:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	8b5b      	ldrh	r3, [r3, #26]
 800e710:	f003 0302 	and.w	r3, r3, #2
 800e714:	2b00      	cmp	r3, #0
 800e716:	f000 814d 	beq.w	800e9b4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f000 fd6c 	bl	800f1f8 <tcp_send_empty_ack>
 800e720:	4603      	mov	r3, r0
 800e722:	e152      	b.n	800e9ca <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2200      	movs	r2, #0
 800e728:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e730:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e732:	6a3b      	ldr	r3, [r7, #32]
 800e734:	2b00      	cmp	r3, #0
 800e736:	f000 811c 	beq.w	800e972 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e73a:	e002      	b.n	800e742 <tcp_output+0x156>
 800e73c:	6a3b      	ldr	r3, [r7, #32]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	623b      	str	r3, [r7, #32]
 800e742:	6a3b      	ldr	r3, [r7, #32]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d1f8      	bne.n	800e73c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e74a:	e112      	b.n	800e972 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	899b      	ldrh	r3, [r3, #12]
 800e752:	b29b      	uxth	r3, r3
 800e754:	4618      	mov	r0, r3
 800e756:	f7f9 fe23 	bl	80083a0 <lwip_htons>
 800e75a:	4603      	mov	r3, r0
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	f003 0304 	and.w	r3, r3, #4
 800e762:	2b00      	cmp	r3, #0
 800e764:	d006      	beq.n	800e774 <tcp_output+0x188>
 800e766:	4b2f      	ldr	r3, [pc, #188]	; (800e824 <tcp_output+0x238>)
 800e768:	f240 5236 	movw	r2, #1334	; 0x536
 800e76c:	4932      	ldr	r1, [pc, #200]	; (800e838 <tcp_output+0x24c>)
 800e76e:	482f      	ldr	r0, [pc, #188]	; (800e82c <tcp_output+0x240>)
 800e770:	f004 fa14 	bl	8012b9c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d01f      	beq.n	800e7bc <tcp_output+0x1d0>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	8b5b      	ldrh	r3, [r3, #26]
 800e780:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e784:	2b00      	cmp	r3, #0
 800e786:	d119      	bne.n	800e7bc <tcp_output+0x1d0>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d00b      	beq.n	800e7a8 <tcp_output+0x1bc>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d110      	bne.n	800e7bc <tcp_output+0x1d0>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e79e:	891a      	ldrh	r2, [r3, #8]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d209      	bcs.n	800e7bc <tcp_output+0x1d0>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d004      	beq.n	800e7bc <tcp_output+0x1d0>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e7b8:	2b08      	cmp	r3, #8
 800e7ba:	d901      	bls.n	800e7c0 <tcp_output+0x1d4>
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e000      	b.n	800e7c2 <tcp_output+0x1d6>
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d106      	bne.n	800e7d4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	8b5b      	ldrh	r3, [r3, #26]
 800e7ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	f000 80e4 	beq.w	800e99c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	7d1b      	ldrb	r3, [r3, #20]
 800e7d8:	2b02      	cmp	r3, #2
 800e7da:	d00d      	beq.n	800e7f8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7de:	68db      	ldr	r3, [r3, #12]
 800e7e0:	899b      	ldrh	r3, [r3, #12]
 800e7e2:	b29c      	uxth	r4, r3
 800e7e4:	2010      	movs	r0, #16
 800e7e6:	f7f9 fddb 	bl	80083a0 <lwip_htons>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f0:	68db      	ldr	r3, [r3, #12]
 800e7f2:	4322      	orrs	r2, r4
 800e7f4:	b292      	uxth	r2, r2
 800e7f6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e7f8:	697a      	ldr	r2, [r7, #20]
 800e7fa:	6879      	ldr	r1, [r7, #4]
 800e7fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7fe:	f000 f909 	bl	800ea14 <tcp_output_segment>
 800e802:	4603      	mov	r3, r0
 800e804:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d016      	beq.n	800e83c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	8b5b      	ldrh	r3, [r3, #26]
 800e812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e816:	b29a      	uxth	r2, r3
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	835a      	strh	r2, [r3, #26]
      return err;
 800e81c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e820:	e0d3      	b.n	800e9ca <tcp_output+0x3de>
 800e822:	bf00      	nop
 800e824:	080152c0 	.word	0x080152c0
 800e828:	08015804 	.word	0x08015804
 800e82c:	08015314 	.word	0x08015314
 800e830:	0801581c 	.word	0x0801581c
 800e834:	2400bd3c 	.word	0x2400bd3c
 800e838:	08015844 	.word	0x08015844
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	7d1b      	ldrb	r3, [r3, #20]
 800e848:	2b02      	cmp	r3, #2
 800e84a:	d006      	beq.n	800e85a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	8b5b      	ldrh	r3, [r3, #26]
 800e850:	f023 0303 	bic.w	r3, r3, #3
 800e854:	b29a      	uxth	r2, r3
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	4618      	mov	r0, r3
 800e862:	f7f9 fdb2 	bl	80083ca <lwip_htonl>
 800e866:	4604      	mov	r4, r0
 800e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86a:	891b      	ldrh	r3, [r3, #8]
 800e86c:	461d      	mov	r5, r3
 800e86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e870:	68db      	ldr	r3, [r3, #12]
 800e872:	899b      	ldrh	r3, [r3, #12]
 800e874:	b29b      	uxth	r3, r3
 800e876:	4618      	mov	r0, r3
 800e878:	f7f9 fd92 	bl	80083a0 <lwip_htons>
 800e87c:	4603      	mov	r3, r0
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	f003 0303 	and.w	r3, r3, #3
 800e884:	2b00      	cmp	r3, #0
 800e886:	d001      	beq.n	800e88c <tcp_output+0x2a0>
 800e888:	2301      	movs	r3, #1
 800e88a:	e000      	b.n	800e88e <tcp_output+0x2a2>
 800e88c:	2300      	movs	r3, #0
 800e88e:	442b      	add	r3, r5
 800e890:	4423      	add	r3, r4
 800e892:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	1ad3      	subs	r3, r2, r3
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	da02      	bge.n	800e8a6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	68ba      	ldr	r2, [r7, #8]
 800e8a4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a8:	891b      	ldrh	r3, [r3, #8]
 800e8aa:	461c      	mov	r4, r3
 800e8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	899b      	ldrh	r3, [r3, #12]
 800e8b2:	b29b      	uxth	r3, r3
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7f9 fd73 	bl	80083a0 <lwip_htons>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	f003 0303 	and.w	r3, r3, #3
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d001      	beq.n	800e8ca <tcp_output+0x2de>
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	e000      	b.n	800e8cc <tcp_output+0x2e0>
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	4423      	add	r3, r4
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d049      	beq.n	800e966 <tcp_output+0x37a>
      seg->next = NULL;
 800e8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d105      	bne.n	800e8ec <tcp_output+0x300>
        pcb->unacked = seg;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8e4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e8:	623b      	str	r3, [r7, #32]
 800e8ea:	e03f      	b.n	800e96c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ee:	68db      	ldr	r3, [r3, #12]
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7f9 fd69 	bl	80083ca <lwip_htonl>
 800e8f8:	4604      	mov	r4, r0
 800e8fa:	6a3b      	ldr	r3, [r7, #32]
 800e8fc:	68db      	ldr	r3, [r3, #12]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	4618      	mov	r0, r3
 800e902:	f7f9 fd62 	bl	80083ca <lwip_htonl>
 800e906:	4603      	mov	r3, r0
 800e908:	1ae3      	subs	r3, r4, r3
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	da24      	bge.n	800e958 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	3370      	adds	r3, #112	; 0x70
 800e912:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e914:	e002      	b.n	800e91c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d011      	beq.n	800e948 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e924:	69fb      	ldr	r3, [r7, #28]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	68db      	ldr	r3, [r3, #12]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7f9 fd4c 	bl	80083ca <lwip_htonl>
 800e932:	4604      	mov	r4, r0
 800e934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e936:	68db      	ldr	r3, [r3, #12]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7f9 fd45 	bl	80083ca <lwip_htonl>
 800e940:	4603      	mov	r3, r0
 800e942:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e944:	2b00      	cmp	r3, #0
 800e946:	dbe6      	blt.n	800e916 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e954:	601a      	str	r2, [r3, #0]
 800e956:	e009      	b.n	800e96c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e958:	6a3b      	ldr	r3, [r7, #32]
 800e95a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e95c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e95e:	6a3b      	ldr	r3, [r7, #32]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	623b      	str	r3, [r7, #32]
 800e964:	e002      	b.n	800e96c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e966:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e968:	f7fc fc3f 	bl	800b1ea <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e970:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e974:	2b00      	cmp	r3, #0
 800e976:	d012      	beq.n	800e99e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97a:	68db      	ldr	r3, [r3, #12]
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	4618      	mov	r0, r3
 800e980:	f7f9 fd23 	bl	80083ca <lwip_htonl>
 800e984:	4602      	mov	r2, r0
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e98a:	1ad3      	subs	r3, r2, r3
 800e98c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e98e:	8912      	ldrh	r2, [r2, #8]
 800e990:	4413      	add	r3, r2
  while (seg != NULL &&
 800e992:	69ba      	ldr	r2, [r7, #24]
 800e994:	429a      	cmp	r2, r3
 800e996:	f4bf aed9 	bcs.w	800e74c <tcp_output+0x160>
 800e99a:	e000      	b.n	800e99e <tcp_output+0x3b2>
      break;
 800e99c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d108      	bne.n	800e9b8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e9ae:	e004      	b.n	800e9ba <tcp_output+0x3ce>
    goto output_done;
 800e9b0:	bf00      	nop
 800e9b2:	e002      	b.n	800e9ba <tcp_output+0x3ce>
    goto output_done;
 800e9b4:	bf00      	nop
 800e9b6:	e000      	b.n	800e9ba <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e9b8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	8b5b      	ldrh	r3, [r3, #26]
 800e9be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9c2:	b29a      	uxth	r2, r3
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e9c8:	2300      	movs	r3, #0
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3728      	adds	r7, #40	; 0x28
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bdb0      	pop	{r4, r5, r7, pc}
 800e9d2:	bf00      	nop

0800e9d4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b082      	sub	sp, #8
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d106      	bne.n	800e9f0 <tcp_output_segment_busy+0x1c>
 800e9e2:	4b09      	ldr	r3, [pc, #36]	; (800ea08 <tcp_output_segment_busy+0x34>)
 800e9e4:	f240 529a 	movw	r2, #1434	; 0x59a
 800e9e8:	4908      	ldr	r1, [pc, #32]	; (800ea0c <tcp_output_segment_busy+0x38>)
 800e9ea:	4809      	ldr	r0, [pc, #36]	; (800ea10 <tcp_output_segment_busy+0x3c>)
 800e9ec:	f004 f8d6 	bl	8012b9c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	7b9b      	ldrb	r3, [r3, #14]
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	d001      	beq.n	800e9fe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	e000      	b.n	800ea00 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e9fe:	2300      	movs	r3, #0
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3708      	adds	r7, #8
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}
 800ea08:	080152c0 	.word	0x080152c0
 800ea0c:	0801585c 	.word	0x0801585c
 800ea10:	08015314 	.word	0x08015314

0800ea14 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ea14:	b5b0      	push	{r4, r5, r7, lr}
 800ea16:	b08c      	sub	sp, #48	; 0x30
 800ea18:	af04      	add	r7, sp, #16
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d106      	bne.n	800ea34 <tcp_output_segment+0x20>
 800ea26:	4b64      	ldr	r3, [pc, #400]	; (800ebb8 <tcp_output_segment+0x1a4>)
 800ea28:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ea2c:	4963      	ldr	r1, [pc, #396]	; (800ebbc <tcp_output_segment+0x1a8>)
 800ea2e:	4864      	ldr	r0, [pc, #400]	; (800ebc0 <tcp_output_segment+0x1ac>)
 800ea30:	f004 f8b4 	bl	8012b9c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d106      	bne.n	800ea48 <tcp_output_segment+0x34>
 800ea3a:	4b5f      	ldr	r3, [pc, #380]	; (800ebb8 <tcp_output_segment+0x1a4>)
 800ea3c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ea40:	4960      	ldr	r1, [pc, #384]	; (800ebc4 <tcp_output_segment+0x1b0>)
 800ea42:	485f      	ldr	r0, [pc, #380]	; (800ebc0 <tcp_output_segment+0x1ac>)
 800ea44:	f004 f8aa 	bl	8012b9c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d106      	bne.n	800ea5c <tcp_output_segment+0x48>
 800ea4e:	4b5a      	ldr	r3, [pc, #360]	; (800ebb8 <tcp_output_segment+0x1a4>)
 800ea50:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ea54:	495c      	ldr	r1, [pc, #368]	; (800ebc8 <tcp_output_segment+0x1b4>)
 800ea56:	485a      	ldr	r0, [pc, #360]	; (800ebc0 <tcp_output_segment+0x1ac>)
 800ea58:	f004 f8a0 	bl	8012b9c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ea5c:	68f8      	ldr	r0, [r7, #12]
 800ea5e:	f7ff ffb9 	bl	800e9d4 <tcp_output_segment_busy>
 800ea62:	4603      	mov	r3, r0
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d001      	beq.n	800ea6c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	e0a1      	b.n	800ebb0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	68dc      	ldr	r4, [r3, #12]
 800ea74:	4610      	mov	r0, r2
 800ea76:	f7f9 fca8 	bl	80083ca <lwip_htonl>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	68dc      	ldr	r4, [r3, #12]
 800ea86:	4610      	mov	r0, r2
 800ea88:	f7f9 fc8a 	bl	80083a0 <lwip_htons>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea94:	68ba      	ldr	r2, [r7, #8]
 800ea96:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ea98:	441a      	add	r2, r3
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	68db      	ldr	r3, [r3, #12]
 800eaa2:	3314      	adds	r3, #20
 800eaa4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	7a9b      	ldrb	r3, [r3, #10]
 800eaaa:	f003 0301 	and.w	r3, r3, #1
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d015      	beq.n	800eade <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	3304      	adds	r3, #4
 800eab6:	461a      	mov	r2, r3
 800eab8:	6879      	ldr	r1, [r7, #4]
 800eaba:	f44f 7006 	mov.w	r0, #536	; 0x218
 800eabe:	f7fc fe8b 	bl	800b7d8 <tcp_eff_send_mss_netif>
 800eac2:	4603      	mov	r3, r0
 800eac4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800eac6:	8b7b      	ldrh	r3, [r7, #26]
 800eac8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800eacc:	4618      	mov	r0, r3
 800eace:	f7f9 fc7c 	bl	80083ca <lwip_htonl>
 800ead2:	4602      	mov	r2, r0
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ead8:	69fb      	ldr	r3, [r7, #28]
 800eada:	3304      	adds	r3, #4
 800eadc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	da02      	bge.n	800eaee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	2200      	movs	r2, #0
 800eaec:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d10c      	bne.n	800eb10 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800eaf6:	4b35      	ldr	r3, [pc, #212]	; (800ebcc <tcp_output_segment+0x1b8>)
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	68db      	ldr	r3, [r3, #12]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7f9 fc60 	bl	80083ca <lwip_htonl>
 800eb0a:	4602      	mov	r2, r0
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	68da      	ldr	r2, [r3, #12]
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	1ad3      	subs	r3, r2, r3
 800eb1c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	8959      	ldrh	r1, [r3, #10]
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	8b3a      	ldrh	r2, [r7, #24]
 800eb2a:	1a8a      	subs	r2, r1, r2
 800eb2c:	b292      	uxth	r2, r2
 800eb2e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	8919      	ldrh	r1, [r3, #8]
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	8b3a      	ldrh	r2, [r7, #24]
 800eb3c:	1a8a      	subs	r2, r1, r2
 800eb3e:	b292      	uxth	r2, r2
 800eb40:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	685b      	ldr	r3, [r3, #4]
 800eb46:	68fa      	ldr	r2, [r7, #12]
 800eb48:	68d2      	ldr	r2, [r2, #12]
 800eb4a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	2200      	movs	r2, #0
 800eb52:	741a      	strb	r2, [r3, #16]
 800eb54:	2200      	movs	r2, #0
 800eb56:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	68da      	ldr	r2, [r3, #12]
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	7a9b      	ldrb	r3, [r3, #10]
 800eb60:	f003 0301 	and.w	r3, r3, #1
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d001      	beq.n	800eb6c <tcp_output_segment+0x158>
 800eb68:	2318      	movs	r3, #24
 800eb6a:	e000      	b.n	800eb6e <tcp_output_segment+0x15a>
 800eb6c:	2314      	movs	r3, #20
 800eb6e:	4413      	add	r3, r2
 800eb70:	69fa      	ldr	r2, [r7, #28]
 800eb72:	429a      	cmp	r2, r3
 800eb74:	d006      	beq.n	800eb84 <tcp_output_segment+0x170>
 800eb76:	4b10      	ldr	r3, [pc, #64]	; (800ebb8 <tcp_output_segment+0x1a4>)
 800eb78:	f240 621c 	movw	r2, #1564	; 0x61c
 800eb7c:	4914      	ldr	r1, [pc, #80]	; (800ebd0 <tcp_output_segment+0x1bc>)
 800eb7e:	4810      	ldr	r0, [pc, #64]	; (800ebc0 <tcp_output_segment+0x1ac>)
 800eb80:	f004 f80c 	bl	8012b9c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	6858      	ldr	r0, [r3, #4]
 800eb88:	68b9      	ldr	r1, [r7, #8]
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	1d1c      	adds	r4, r3, #4
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	7add      	ldrb	r5, [r3, #11]
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	7a9b      	ldrb	r3, [r3, #10]
 800eb96:	687a      	ldr	r2, [r7, #4]
 800eb98:	9202      	str	r2, [sp, #8]
 800eb9a:	2206      	movs	r2, #6
 800eb9c:	9201      	str	r2, [sp, #4]
 800eb9e:	9300      	str	r3, [sp, #0]
 800eba0:	462b      	mov	r3, r5
 800eba2:	4622      	mov	r2, r4
 800eba4:	f002 fdc8 	bl	8011738 <ip4_output_if>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ebac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3720      	adds	r7, #32
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bdb0      	pop	{r4, r5, r7, pc}
 800ebb8:	080152c0 	.word	0x080152c0
 800ebbc:	08015884 	.word	0x08015884
 800ebc0:	08015314 	.word	0x08015314
 800ebc4:	080158a4 	.word	0x080158a4
 800ebc8:	080158c4 	.word	0x080158c4
 800ebcc:	2400bcf0 	.word	0x2400bcf0
 800ebd0:	080158e8 	.word	0x080158e8

0800ebd4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ebd4:	b5b0      	push	{r4, r5, r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d106      	bne.n	800ebf0 <tcp_rexmit_rto_prepare+0x1c>
 800ebe2:	4b31      	ldr	r3, [pc, #196]	; (800eca8 <tcp_rexmit_rto_prepare+0xd4>)
 800ebe4:	f240 6263 	movw	r2, #1635	; 0x663
 800ebe8:	4930      	ldr	r1, [pc, #192]	; (800ecac <tcp_rexmit_rto_prepare+0xd8>)
 800ebea:	4831      	ldr	r0, [pc, #196]	; (800ecb0 <tcp_rexmit_rto_prepare+0xdc>)
 800ebec:	f003 ffd6 	bl	8012b9c <iprintf>

  if (pcb->unacked == NULL) {
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d102      	bne.n	800ebfe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ebf8:	f06f 0305 	mvn.w	r3, #5
 800ebfc:	e050      	b.n	800eca0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec02:	60fb      	str	r3, [r7, #12]
 800ec04:	e00b      	b.n	800ec1e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ec06:	68f8      	ldr	r0, [r7, #12]
 800ec08:	f7ff fee4 	bl	800e9d4 <tcp_output_segment_busy>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d002      	beq.n	800ec18 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ec12:	f06f 0305 	mvn.w	r3, #5
 800ec16:	e043      	b.n	800eca0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	60fb      	str	r3, [r7, #12]
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d1ef      	bne.n	800ec06 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ec26:	68f8      	ldr	r0, [r7, #12]
 800ec28:	f7ff fed4 	bl	800e9d4 <tcp_output_segment_busy>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d002      	beq.n	800ec38 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ec32:	f06f 0305 	mvn.w	r3, #5
 800ec36:	e033      	b.n	800eca0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	8b5b      	ldrh	r3, [r3, #26]
 800ec52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ec56:	b29a      	uxth	r2, r3
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7f9 fbb1 	bl	80083ca <lwip_htonl>
 800ec68:	4604      	mov	r4, r0
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	891b      	ldrh	r3, [r3, #8]
 800ec6e:	461d      	mov	r5, r3
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	68db      	ldr	r3, [r3, #12]
 800ec74:	899b      	ldrh	r3, [r3, #12]
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7f9 fb91 	bl	80083a0 <lwip_htons>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	b2db      	uxtb	r3, r3
 800ec82:	f003 0303 	and.w	r3, r3, #3
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d001      	beq.n	800ec8e <tcp_rexmit_rto_prepare+0xba>
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	e000      	b.n	800ec90 <tcp_rexmit_rto_prepare+0xbc>
 800ec8e:	2300      	movs	r3, #0
 800ec90:	442b      	add	r3, r5
 800ec92:	18e2      	adds	r2, r4, r3
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ec9e:	2300      	movs	r3, #0
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3710      	adds	r7, #16
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bdb0      	pop	{r4, r5, r7, pc}
 800eca8:	080152c0 	.word	0x080152c0
 800ecac:	080158fc 	.word	0x080158fc
 800ecb0:	08015314 	.word	0x08015314

0800ecb4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d106      	bne.n	800ecd0 <tcp_rexmit_rto_commit+0x1c>
 800ecc2:	4b0d      	ldr	r3, [pc, #52]	; (800ecf8 <tcp_rexmit_rto_commit+0x44>)
 800ecc4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ecc8:	490c      	ldr	r1, [pc, #48]	; (800ecfc <tcp_rexmit_rto_commit+0x48>)
 800ecca:	480d      	ldr	r0, [pc, #52]	; (800ed00 <tcp_rexmit_rto_commit+0x4c>)
 800eccc:	f003 ff66 	bl	8012b9c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ecd6:	2bff      	cmp	r3, #255	; 0xff
 800ecd8:	d007      	beq.n	800ecea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ece0:	3301      	adds	r3, #1
 800ece2:	b2da      	uxtb	r2, r3
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f7ff fc7e 	bl	800e5ec <tcp_output>
}
 800ecf0:	bf00      	nop
 800ecf2:	3708      	adds	r7, #8
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}
 800ecf8:	080152c0 	.word	0x080152c0
 800ecfc:	08015920 	.word	0x08015920
 800ed00:	08015314 	.word	0x08015314

0800ed04 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d106      	bne.n	800ed20 <tcp_rexmit_rto+0x1c>
 800ed12:	4b0a      	ldr	r3, [pc, #40]	; (800ed3c <tcp_rexmit_rto+0x38>)
 800ed14:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ed18:	4909      	ldr	r1, [pc, #36]	; (800ed40 <tcp_rexmit_rto+0x3c>)
 800ed1a:	480a      	ldr	r0, [pc, #40]	; (800ed44 <tcp_rexmit_rto+0x40>)
 800ed1c:	f003 ff3e 	bl	8012b9c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f7ff ff57 	bl	800ebd4 <tcp_rexmit_rto_prepare>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d102      	bne.n	800ed32 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f7ff ffc1 	bl	800ecb4 <tcp_rexmit_rto_commit>
  }
}
 800ed32:	bf00      	nop
 800ed34:	3708      	adds	r7, #8
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	080152c0 	.word	0x080152c0
 800ed40:	08015944 	.word	0x08015944
 800ed44:	08015314 	.word	0x08015314

0800ed48 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ed48:	b590      	push	{r4, r7, lr}
 800ed4a:	b085      	sub	sp, #20
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d106      	bne.n	800ed64 <tcp_rexmit+0x1c>
 800ed56:	4b2f      	ldr	r3, [pc, #188]	; (800ee14 <tcp_rexmit+0xcc>)
 800ed58:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ed5c:	492e      	ldr	r1, [pc, #184]	; (800ee18 <tcp_rexmit+0xd0>)
 800ed5e:	482f      	ldr	r0, [pc, #188]	; (800ee1c <tcp_rexmit+0xd4>)
 800ed60:	f003 ff1c 	bl	8012b9c <iprintf>

  if (pcb->unacked == NULL) {
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d102      	bne.n	800ed72 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ed6c:	f06f 0305 	mvn.w	r3, #5
 800ed70:	e04c      	b.n	800ee0c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed76:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ed78:	68b8      	ldr	r0, [r7, #8]
 800ed7a:	f7ff fe2b 	bl	800e9d4 <tcp_output_segment_busy>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d002      	beq.n	800ed8a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ed84:	f06f 0305 	mvn.w	r3, #5
 800ed88:	e040      	b.n	800ee0c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	681a      	ldr	r2, [r3, #0]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	336c      	adds	r3, #108	; 0x6c
 800ed96:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ed98:	e002      	b.n	800eda0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d011      	beq.n	800edcc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	68db      	ldr	r3, [r3, #12]
 800edae:	685b      	ldr	r3, [r3, #4]
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7f9 fb0a 	bl	80083ca <lwip_htonl>
 800edb6:	4604      	mov	r4, r0
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7f9 fb03 	bl	80083ca <lwip_htonl>
 800edc4:	4603      	mov	r3, r0
 800edc6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800edc8:	2b00      	cmp	r3, #0
 800edca:	dbe6      	blt.n	800ed9a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681a      	ldr	r2, [r3, #0]
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	68ba      	ldr	r2, [r7, #8]
 800edd8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d103      	bne.n	800edea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2200      	movs	r2, #0
 800ede6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800edf0:	2bff      	cmp	r3, #255	; 0xff
 800edf2:	d007      	beq.n	800ee04 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800edfa:	3301      	adds	r3, #1
 800edfc:	b2da      	uxtb	r2, r3
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2200      	movs	r2, #0
 800ee08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ee0a:	2300      	movs	r3, #0
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3714      	adds	r7, #20
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd90      	pop	{r4, r7, pc}
 800ee14:	080152c0 	.word	0x080152c0
 800ee18:	08015960 	.word	0x08015960
 800ee1c:	08015314 	.word	0x08015314

0800ee20 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d106      	bne.n	800ee3c <tcp_rexmit_fast+0x1c>
 800ee2e:	4b2a      	ldr	r3, [pc, #168]	; (800eed8 <tcp_rexmit_fast+0xb8>)
 800ee30:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ee34:	4929      	ldr	r1, [pc, #164]	; (800eedc <tcp_rexmit_fast+0xbc>)
 800ee36:	482a      	ldr	r0, [pc, #168]	; (800eee0 <tcp_rexmit_fast+0xc0>)
 800ee38:	f003 feb0 	bl	8012b9c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d045      	beq.n	800eed0 <tcp_rexmit_fast+0xb0>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	8b5b      	ldrh	r3, [r3, #26]
 800ee48:	f003 0304 	and.w	r3, r3, #4
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d13f      	bne.n	800eed0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f7ff ff79 	bl	800ed48 <tcp_rexmit>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d139      	bne.n	800eed0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	bf28      	it	cs
 800ee6c:	4613      	movcs	r3, r2
 800ee6e:	b29b      	uxth	r3, r3
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	da00      	bge.n	800ee76 <tcp_rexmit_fast+0x56>
 800ee74:	3301      	adds	r3, #1
 800ee76:	105b      	asrs	r3, r3, #1
 800ee78:	b29a      	uxth	r2, r3
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ee86:	461a      	mov	r2, r3
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee8c:	005b      	lsls	r3, r3, #1
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d206      	bcs.n	800eea0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee96:	005b      	lsls	r3, r3, #1
 800ee98:	b29a      	uxth	r2, r3
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eeaa:	4619      	mov	r1, r3
 800eeac:	0049      	lsls	r1, r1, #1
 800eeae:	440b      	add	r3, r1
 800eeb0:	b29b      	uxth	r3, r3
 800eeb2:	4413      	add	r3, r2
 800eeb4:	b29a      	uxth	r2, r3
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	8b5b      	ldrh	r3, [r3, #26]
 800eec0:	f043 0304 	orr.w	r3, r3, #4
 800eec4:	b29a      	uxth	r2, r3
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2200      	movs	r2, #0
 800eece:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800eed0:	bf00      	nop
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	080152c0 	.word	0x080152c0
 800eedc:	08015978 	.word	0x08015978
 800eee0:	08015314 	.word	0x08015314

0800eee4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b086      	sub	sp, #24
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	60f8      	str	r0, [r7, #12]
 800eeec:	607b      	str	r3, [r7, #4]
 800eeee:	460b      	mov	r3, r1
 800eef0:	817b      	strh	r3, [r7, #10]
 800eef2:	4613      	mov	r3, r2
 800eef4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800eef6:	897a      	ldrh	r2, [r7, #10]
 800eef8:	893b      	ldrh	r3, [r7, #8]
 800eefa:	4413      	add	r3, r2
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	3314      	adds	r3, #20
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ef06:	4619      	mov	r1, r3
 800ef08:	2022      	movs	r0, #34	; 0x22
 800ef0a:	f7fa fbfd 	bl	8009708 <pbuf_alloc>
 800ef0e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d04d      	beq.n	800efb2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ef16:	897b      	ldrh	r3, [r7, #10]
 800ef18:	3313      	adds	r3, #19
 800ef1a:	697a      	ldr	r2, [r7, #20]
 800ef1c:	8952      	ldrh	r2, [r2, #10]
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	db06      	blt.n	800ef30 <tcp_output_alloc_header_common+0x4c>
 800ef22:	4b26      	ldr	r3, [pc, #152]	; (800efbc <tcp_output_alloc_header_common+0xd8>)
 800ef24:	f240 7223 	movw	r2, #1827	; 0x723
 800ef28:	4925      	ldr	r1, [pc, #148]	; (800efc0 <tcp_output_alloc_header_common+0xdc>)
 800ef2a:	4826      	ldr	r0, [pc, #152]	; (800efc4 <tcp_output_alloc_header_common+0xe0>)
 800ef2c:	f003 fe36 	bl	8012b9c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ef36:	8c3b      	ldrh	r3, [r7, #32]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7f9 fa31 	bl	80083a0 <lwip_htons>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	461a      	mov	r2, r3
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ef46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7f9 fa29 	bl	80083a0 <lwip_htons>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	461a      	mov	r2, r3
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ef5c:	68f8      	ldr	r0, [r7, #12]
 800ef5e:	f7f9 fa34 	bl	80083ca <lwip_htonl>
 800ef62:	4602      	mov	r2, r0
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ef68:	897b      	ldrh	r3, [r7, #10]
 800ef6a:	089b      	lsrs	r3, r3, #2
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	3305      	adds	r3, #5
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	031b      	lsls	r3, r3, #12
 800ef74:	b29a      	uxth	r2, r3
 800ef76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ef7a:	b29b      	uxth	r3, r3
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7f9 fa0d 	bl	80083a0 <lwip_htons>
 800ef86:	4603      	mov	r3, r0
 800ef88:	461a      	mov	r2, r3
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ef8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ef90:	4618      	mov	r0, r3
 800ef92:	f7f9 fa05 	bl	80083a0 <lwip_htons>
 800ef96:	4603      	mov	r3, r0
 800ef98:	461a      	mov	r2, r3
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	2200      	movs	r2, #0
 800efa2:	741a      	strb	r2, [r3, #16]
 800efa4:	2200      	movs	r2, #0
 800efa6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	2200      	movs	r2, #0
 800efac:	749a      	strb	r2, [r3, #18]
 800efae:	2200      	movs	r2, #0
 800efb0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800efb2:	697b      	ldr	r3, [r7, #20]
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3718      	adds	r7, #24
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}
 800efbc:	080152c0 	.word	0x080152c0
 800efc0:	08015998 	.word	0x08015998
 800efc4:	08015314 	.word	0x08015314

0800efc8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800efc8:	b5b0      	push	{r4, r5, r7, lr}
 800efca:	b08a      	sub	sp, #40	; 0x28
 800efcc:	af04      	add	r7, sp, #16
 800efce:	60f8      	str	r0, [r7, #12]
 800efd0:	607b      	str	r3, [r7, #4]
 800efd2:	460b      	mov	r3, r1
 800efd4:	817b      	strh	r3, [r7, #10]
 800efd6:	4613      	mov	r3, r2
 800efd8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d106      	bne.n	800efee <tcp_output_alloc_header+0x26>
 800efe0:	4b15      	ldr	r3, [pc, #84]	; (800f038 <tcp_output_alloc_header+0x70>)
 800efe2:	f240 7242 	movw	r2, #1858	; 0x742
 800efe6:	4915      	ldr	r1, [pc, #84]	; (800f03c <tcp_output_alloc_header+0x74>)
 800efe8:	4815      	ldr	r0, [pc, #84]	; (800f040 <tcp_output_alloc_header+0x78>)
 800efea:	f003 fdd7 	bl	8012b9c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	8adb      	ldrh	r3, [r3, #22]
 800eff6:	68fa      	ldr	r2, [r7, #12]
 800eff8:	8b12      	ldrh	r2, [r2, #24]
 800effa:	68f9      	ldr	r1, [r7, #12]
 800effc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800effe:	893d      	ldrh	r5, [r7, #8]
 800f000:	897c      	ldrh	r4, [r7, #10]
 800f002:	9103      	str	r1, [sp, #12]
 800f004:	2110      	movs	r1, #16
 800f006:	9102      	str	r1, [sp, #8]
 800f008:	9201      	str	r2, [sp, #4]
 800f00a:	9300      	str	r3, [sp, #0]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	462a      	mov	r2, r5
 800f010:	4621      	mov	r1, r4
 800f012:	f7ff ff67 	bl	800eee4 <tcp_output_alloc_header_common>
 800f016:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d006      	beq.n	800f02c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f022:	68fa      	ldr	r2, [r7, #12]
 800f024:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f026:	441a      	add	r2, r3
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f02c:	697b      	ldr	r3, [r7, #20]
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3718      	adds	r7, #24
 800f032:	46bd      	mov	sp, r7
 800f034:	bdb0      	pop	{r4, r5, r7, pc}
 800f036:	bf00      	nop
 800f038:	080152c0 	.word	0x080152c0
 800f03c:	080159c8 	.word	0x080159c8
 800f040:	08015314 	.word	0x08015314

0800f044 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b088      	sub	sp, #32
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	4611      	mov	r1, r2
 800f050:	461a      	mov	r2, r3
 800f052:	460b      	mov	r3, r1
 800f054:	71fb      	strb	r3, [r7, #7]
 800f056:	4613      	mov	r3, r2
 800f058:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f05a:	2300      	movs	r3, #0
 800f05c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d106      	bne.n	800f072 <tcp_output_fill_options+0x2e>
 800f064:	4b12      	ldr	r3, [pc, #72]	; (800f0b0 <tcp_output_fill_options+0x6c>)
 800f066:	f240 7256 	movw	r2, #1878	; 0x756
 800f06a:	4912      	ldr	r1, [pc, #72]	; (800f0b4 <tcp_output_fill_options+0x70>)
 800f06c:	4812      	ldr	r0, [pc, #72]	; (800f0b8 <tcp_output_fill_options+0x74>)
 800f06e:	f003 fd95 	bl	8012b9c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	3314      	adds	r3, #20
 800f07c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f07e:	8bfb      	ldrh	r3, [r7, #30]
 800f080:	009b      	lsls	r3, r3, #2
 800f082:	461a      	mov	r2, r3
 800f084:	79fb      	ldrb	r3, [r7, #7]
 800f086:	009b      	lsls	r3, r3, #2
 800f088:	f003 0304 	and.w	r3, r3, #4
 800f08c:	4413      	add	r3, r2
 800f08e:	3314      	adds	r3, #20
 800f090:	69ba      	ldr	r2, [r7, #24]
 800f092:	4413      	add	r3, r2
 800f094:	697a      	ldr	r2, [r7, #20]
 800f096:	429a      	cmp	r2, r3
 800f098:	d006      	beq.n	800f0a8 <tcp_output_fill_options+0x64>
 800f09a:	4b05      	ldr	r3, [pc, #20]	; (800f0b0 <tcp_output_fill_options+0x6c>)
 800f09c:	f240 7275 	movw	r2, #1909	; 0x775
 800f0a0:	4906      	ldr	r1, [pc, #24]	; (800f0bc <tcp_output_fill_options+0x78>)
 800f0a2:	4805      	ldr	r0, [pc, #20]	; (800f0b8 <tcp_output_fill_options+0x74>)
 800f0a4:	f003 fd7a 	bl	8012b9c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f0a8:	bf00      	nop
 800f0aa:	3720      	adds	r7, #32
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}
 800f0b0:	080152c0 	.word	0x080152c0
 800f0b4:	080159f0 	.word	0x080159f0
 800f0b8:	08015314 	.word	0x08015314
 800f0bc:	080158e8 	.word	0x080158e8

0800f0c0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b08a      	sub	sp, #40	; 0x28
 800f0c4:	af04      	add	r7, sp, #16
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	607a      	str	r2, [r7, #4]
 800f0cc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d106      	bne.n	800f0e2 <tcp_output_control_segment+0x22>
 800f0d4:	4b1c      	ldr	r3, [pc, #112]	; (800f148 <tcp_output_control_segment+0x88>)
 800f0d6:	f240 7287 	movw	r2, #1927	; 0x787
 800f0da:	491c      	ldr	r1, [pc, #112]	; (800f14c <tcp_output_control_segment+0x8c>)
 800f0dc:	481c      	ldr	r0, [pc, #112]	; (800f150 <tcp_output_control_segment+0x90>)
 800f0de:	f003 fd5d 	bl	8012b9c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f0e2:	683a      	ldr	r2, [r7, #0]
 800f0e4:	6879      	ldr	r1, [r7, #4]
 800f0e6:	68f8      	ldr	r0, [r7, #12]
 800f0e8:	f7fe ff40 	bl	800df6c <tcp_route>
 800f0ec:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d102      	bne.n	800f0fa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f0f4:	23fc      	movs	r3, #252	; 0xfc
 800f0f6:	75fb      	strb	r3, [r7, #23]
 800f0f8:	e01c      	b.n	800f134 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d006      	beq.n	800f10e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	7adb      	ldrb	r3, [r3, #11]
 800f104:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	7a9b      	ldrb	r3, [r3, #10]
 800f10a:	757b      	strb	r3, [r7, #21]
 800f10c:	e003      	b.n	800f116 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f10e:	23ff      	movs	r3, #255	; 0xff
 800f110:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f112:	2300      	movs	r3, #0
 800f114:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f116:	7dba      	ldrb	r2, [r7, #22]
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	9302      	str	r3, [sp, #8]
 800f11c:	2306      	movs	r3, #6
 800f11e:	9301      	str	r3, [sp, #4]
 800f120:	7d7b      	ldrb	r3, [r7, #21]
 800f122:	9300      	str	r3, [sp, #0]
 800f124:	4613      	mov	r3, r2
 800f126:	683a      	ldr	r2, [r7, #0]
 800f128:	6879      	ldr	r1, [r7, #4]
 800f12a:	68b8      	ldr	r0, [r7, #8]
 800f12c:	f002 fb04 	bl	8011738 <ip4_output_if>
 800f130:	4603      	mov	r3, r0
 800f132:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f134:	68b8      	ldr	r0, [r7, #8]
 800f136:	f7fa fdc9 	bl	8009ccc <pbuf_free>
  return err;
 800f13a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3718      	adds	r7, #24
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}
 800f146:	bf00      	nop
 800f148:	080152c0 	.word	0x080152c0
 800f14c:	08015a18 	.word	0x08015a18
 800f150:	08015314 	.word	0x08015314

0800f154 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f154:	b590      	push	{r4, r7, lr}
 800f156:	b08b      	sub	sp, #44	; 0x2c
 800f158:	af04      	add	r7, sp, #16
 800f15a:	60f8      	str	r0, [r7, #12]
 800f15c:	60b9      	str	r1, [r7, #8]
 800f15e:	607a      	str	r2, [r7, #4]
 800f160:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d106      	bne.n	800f176 <tcp_rst+0x22>
 800f168:	4b1f      	ldr	r3, [pc, #124]	; (800f1e8 <tcp_rst+0x94>)
 800f16a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f16e:	491f      	ldr	r1, [pc, #124]	; (800f1ec <tcp_rst+0x98>)
 800f170:	481f      	ldr	r0, [pc, #124]	; (800f1f0 <tcp_rst+0x9c>)
 800f172:	f003 fd13 	bl	8012b9c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d106      	bne.n	800f18a <tcp_rst+0x36>
 800f17c:	4b1a      	ldr	r3, [pc, #104]	; (800f1e8 <tcp_rst+0x94>)
 800f17e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f182:	491c      	ldr	r1, [pc, #112]	; (800f1f4 <tcp_rst+0xa0>)
 800f184:	481a      	ldr	r0, [pc, #104]	; (800f1f0 <tcp_rst+0x9c>)
 800f186:	f003 fd09 	bl	8012b9c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f18a:	2300      	movs	r3, #0
 800f18c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f18e:	f246 0308 	movw	r3, #24584	; 0x6008
 800f192:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f194:	7dfb      	ldrb	r3, [r7, #23]
 800f196:	b29c      	uxth	r4, r3
 800f198:	68b8      	ldr	r0, [r7, #8]
 800f19a:	f7f9 f916 	bl	80083ca <lwip_htonl>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	8abb      	ldrh	r3, [r7, #20]
 800f1a2:	9303      	str	r3, [sp, #12]
 800f1a4:	2314      	movs	r3, #20
 800f1a6:	9302      	str	r3, [sp, #8]
 800f1a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f1aa:	9301      	str	r3, [sp, #4]
 800f1ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f1ae:	9300      	str	r3, [sp, #0]
 800f1b0:	4613      	mov	r3, r2
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	4621      	mov	r1, r4
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f7ff fe94 	bl	800eee4 <tcp_output_alloc_header_common>
 800f1bc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d00c      	beq.n	800f1de <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f1c4:	7dfb      	ldrb	r3, [r7, #23]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	6939      	ldr	r1, [r7, #16]
 800f1ca:	68f8      	ldr	r0, [r7, #12]
 800f1cc:	f7ff ff3a 	bl	800f044 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d2:	683a      	ldr	r2, [r7, #0]
 800f1d4:	6939      	ldr	r1, [r7, #16]
 800f1d6:	68f8      	ldr	r0, [r7, #12]
 800f1d8:	f7ff ff72 	bl	800f0c0 <tcp_output_control_segment>
 800f1dc:	e000      	b.n	800f1e0 <tcp_rst+0x8c>
    return;
 800f1de:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f1e0:	371c      	adds	r7, #28
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd90      	pop	{r4, r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	080152c0 	.word	0x080152c0
 800f1ec:	08015a44 	.word	0x08015a44
 800f1f0:	08015314 	.word	0x08015314
 800f1f4:	08015a60 	.word	0x08015a60

0800f1f8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f1f8:	b590      	push	{r4, r7, lr}
 800f1fa:	b087      	sub	sp, #28
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f200:	2300      	movs	r3, #0
 800f202:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f204:	2300      	movs	r3, #0
 800f206:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d106      	bne.n	800f21c <tcp_send_empty_ack+0x24>
 800f20e:	4b28      	ldr	r3, [pc, #160]	; (800f2b0 <tcp_send_empty_ack+0xb8>)
 800f210:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f214:	4927      	ldr	r1, [pc, #156]	; (800f2b4 <tcp_send_empty_ack+0xbc>)
 800f216:	4828      	ldr	r0, [pc, #160]	; (800f2b8 <tcp_send_empty_ack+0xc0>)
 800f218:	f003 fcc0 	bl	8012b9c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f21c:	7dfb      	ldrb	r3, [r7, #23]
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	b2db      	uxtb	r3, r3
 800f222:	f003 0304 	and.w	r3, r3, #4
 800f226:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f228:	7d7b      	ldrb	r3, [r7, #21]
 800f22a:	b29c      	uxth	r4, r3
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f230:	4618      	mov	r0, r3
 800f232:	f7f9 f8ca 	bl	80083ca <lwip_htonl>
 800f236:	4603      	mov	r3, r0
 800f238:	2200      	movs	r2, #0
 800f23a:	4621      	mov	r1, r4
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f7ff fec3 	bl	800efc8 <tcp_output_alloc_header>
 800f242:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d109      	bne.n	800f25e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	8b5b      	ldrh	r3, [r3, #26]
 800f24e:	f043 0303 	orr.w	r3, r3, #3
 800f252:	b29a      	uxth	r2, r3
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f258:	f06f 0301 	mvn.w	r3, #1
 800f25c:	e023      	b.n	800f2a6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f25e:	7dbb      	ldrb	r3, [r7, #22]
 800f260:	7dfa      	ldrb	r2, [r7, #23]
 800f262:	6939      	ldr	r1, [r7, #16]
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7ff feed 	bl	800f044 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	3304      	adds	r3, #4
 800f270:	6939      	ldr	r1, [r7, #16]
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f7ff ff24 	bl	800f0c0 <tcp_output_control_segment>
 800f278:	4603      	mov	r3, r0
 800f27a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f27c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d007      	beq.n	800f294 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	8b5b      	ldrh	r3, [r3, #26]
 800f288:	f043 0303 	orr.w	r3, r3, #3
 800f28c:	b29a      	uxth	r2, r3
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	835a      	strh	r2, [r3, #26]
 800f292:	e006      	b.n	800f2a2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	8b5b      	ldrh	r3, [r3, #26]
 800f298:	f023 0303 	bic.w	r3, r3, #3
 800f29c:	b29a      	uxth	r2, r3
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f2a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	371c      	adds	r7, #28
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd90      	pop	{r4, r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	080152c0 	.word	0x080152c0
 800f2b4:	08015a7c 	.word	0x08015a7c
 800f2b8:	08015314 	.word	0x08015314

0800f2bc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f2bc:	b590      	push	{r4, r7, lr}
 800f2be:	b087      	sub	sp, #28
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d106      	bne.n	800f2dc <tcp_keepalive+0x20>
 800f2ce:	4b18      	ldr	r3, [pc, #96]	; (800f330 <tcp_keepalive+0x74>)
 800f2d0:	f640 0224 	movw	r2, #2084	; 0x824
 800f2d4:	4917      	ldr	r1, [pc, #92]	; (800f334 <tcp_keepalive+0x78>)
 800f2d6:	4818      	ldr	r0, [pc, #96]	; (800f338 <tcp_keepalive+0x7c>)
 800f2d8:	f003 fc60 	bl	8012b9c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f2dc:	7dfb      	ldrb	r3, [r7, #23]
 800f2de:	b29c      	uxth	r4, r3
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2e4:	3b01      	subs	r3, #1
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7f9 f86f 	bl	80083ca <lwip_htonl>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	4621      	mov	r1, r4
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f7ff fe68 	bl	800efc8 <tcp_output_alloc_header>
 800f2f8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d102      	bne.n	800f306 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f304:	e010      	b.n	800f328 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f306:	7dfb      	ldrb	r3, [r7, #23]
 800f308:	2200      	movs	r2, #0
 800f30a:	6939      	ldr	r1, [r7, #16]
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f7ff fe99 	bl	800f044 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f312:	687a      	ldr	r2, [r7, #4]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	3304      	adds	r3, #4
 800f318:	6939      	ldr	r1, [r7, #16]
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f7ff fed0 	bl	800f0c0 <tcp_output_control_segment>
 800f320:	4603      	mov	r3, r0
 800f322:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f324:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f328:	4618      	mov	r0, r3
 800f32a:	371c      	adds	r7, #28
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd90      	pop	{r4, r7, pc}
 800f330:	080152c0 	.word	0x080152c0
 800f334:	08015a9c 	.word	0x08015a9c
 800f338:	08015314 	.word	0x08015314

0800f33c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f33c:	b590      	push	{r4, r7, lr}
 800f33e:	b08b      	sub	sp, #44	; 0x2c
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f344:	2300      	movs	r3, #0
 800f346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d106      	bne.n	800f35e <tcp_zero_window_probe+0x22>
 800f350:	4b4c      	ldr	r3, [pc, #304]	; (800f484 <tcp_zero_window_probe+0x148>)
 800f352:	f640 024f 	movw	r2, #2127	; 0x84f
 800f356:	494c      	ldr	r1, [pc, #304]	; (800f488 <tcp_zero_window_probe+0x14c>)
 800f358:	484c      	ldr	r0, [pc, #304]	; (800f48c <tcp_zero_window_probe+0x150>)
 800f35a:	f003 fc1f 	bl	8012b9c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f362:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f364:	6a3b      	ldr	r3, [r7, #32]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d101      	bne.n	800f36e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f36a:	2300      	movs	r3, #0
 800f36c:	e086      	b.n	800f47c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f374:	2bff      	cmp	r3, #255	; 0xff
 800f376:	d007      	beq.n	800f388 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f37e:	3301      	adds	r3, #1
 800f380:	b2da      	uxtb	r2, r3
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f388:	6a3b      	ldr	r3, [r7, #32]
 800f38a:	68db      	ldr	r3, [r3, #12]
 800f38c:	899b      	ldrh	r3, [r3, #12]
 800f38e:	b29b      	uxth	r3, r3
 800f390:	4618      	mov	r0, r3
 800f392:	f7f9 f805 	bl	80083a0 <lwip_htons>
 800f396:	4603      	mov	r3, r0
 800f398:	b2db      	uxtb	r3, r3
 800f39a:	f003 0301 	and.w	r3, r3, #1
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d005      	beq.n	800f3ae <tcp_zero_window_probe+0x72>
 800f3a2:	6a3b      	ldr	r3, [r7, #32]
 800f3a4:	891b      	ldrh	r3, [r3, #8]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d101      	bne.n	800f3ae <tcp_zero_window_probe+0x72>
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	e000      	b.n	800f3b0 <tcp_zero_window_probe+0x74>
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f3b2:	7ffb      	ldrb	r3, [r7, #31]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	bf0c      	ite	eq
 800f3b8:	2301      	moveq	r3, #1
 800f3ba:	2300      	movne	r3, #0
 800f3bc:	b2db      	uxtb	r3, r3
 800f3be:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f3c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3c4:	b299      	uxth	r1, r3
 800f3c6:	6a3b      	ldr	r3, [r7, #32]
 800f3c8:	68db      	ldr	r3, [r3, #12]
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	8bba      	ldrh	r2, [r7, #28]
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f7ff fdfa 	bl	800efc8 <tcp_output_alloc_header>
 800f3d4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f3d6:	69bb      	ldr	r3, [r7, #24]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d102      	bne.n	800f3e2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f3dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f3e0:	e04c      	b.n	800f47c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f3e2:	69bb      	ldr	r3, [r7, #24]
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f3e8:	7ffb      	ldrb	r3, [r7, #31]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d011      	beq.n	800f412 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	899b      	ldrh	r3, [r3, #12]
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	b21b      	sxth	r3, r3
 800f3f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f3fa:	b21c      	sxth	r4, r3
 800f3fc:	2011      	movs	r0, #17
 800f3fe:	f7f8 ffcf 	bl	80083a0 <lwip_htons>
 800f402:	4603      	mov	r3, r0
 800f404:	b21b      	sxth	r3, r3
 800f406:	4323      	orrs	r3, r4
 800f408:	b21b      	sxth	r3, r3
 800f40a:	b29a      	uxth	r2, r3
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	819a      	strh	r2, [r3, #12]
 800f410:	e010      	b.n	800f434 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f412:	69bb      	ldr	r3, [r7, #24]
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	3314      	adds	r3, #20
 800f418:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f41a:	6a3b      	ldr	r3, [r7, #32]
 800f41c:	6858      	ldr	r0, [r3, #4]
 800f41e:	6a3b      	ldr	r3, [r7, #32]
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	891a      	ldrh	r2, [r3, #8]
 800f424:	6a3b      	ldr	r3, [r7, #32]
 800f426:	891b      	ldrh	r3, [r3, #8]
 800f428:	1ad3      	subs	r3, r2, r3
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	2201      	movs	r2, #1
 800f42e:	6939      	ldr	r1, [r7, #16]
 800f430:	f7fa fe52 	bl	800a0d8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f434:	6a3b      	ldr	r3, [r7, #32]
 800f436:	68db      	ldr	r3, [r3, #12]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7f8 ffc5 	bl	80083ca <lwip_htonl>
 800f440:	4603      	mov	r3, r0
 800f442:	3301      	adds	r3, #1
 800f444:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	1ad3      	subs	r3, r2, r3
 800f44e:	2b00      	cmp	r3, #0
 800f450:	da02      	bge.n	800f458 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	68fa      	ldr	r2, [r7, #12]
 800f456:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f45c:	2200      	movs	r2, #0
 800f45e:	69b9      	ldr	r1, [r7, #24]
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f7ff fdef 	bl	800f044 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f466:	687a      	ldr	r2, [r7, #4]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	3304      	adds	r3, #4
 800f46c:	69b9      	ldr	r1, [r7, #24]
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f7ff fe26 	bl	800f0c0 <tcp_output_control_segment>
 800f474:	4603      	mov	r3, r0
 800f476:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f478:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	372c      	adds	r7, #44	; 0x2c
 800f480:	46bd      	mov	sp, r7
 800f482:	bd90      	pop	{r4, r7, pc}
 800f484:	080152c0 	.word	0x080152c0
 800f488:	08015ab8 	.word	0x08015ab8
 800f48c:	08015314 	.word	0x08015314

0800f490 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f498:	f7fa ff0c 	bl	800a2b4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f49c:	4b0a      	ldr	r3, [pc, #40]	; (800f4c8 <tcpip_tcp_timer+0x38>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d103      	bne.n	800f4ac <tcpip_tcp_timer+0x1c>
 800f4a4:	4b09      	ldr	r3, [pc, #36]	; (800f4cc <tcpip_tcp_timer+0x3c>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d005      	beq.n	800f4b8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	4908      	ldr	r1, [pc, #32]	; (800f4d0 <tcpip_tcp_timer+0x40>)
 800f4b0:	20fa      	movs	r0, #250	; 0xfa
 800f4b2:	f000 f8f3 	bl	800f69c <sys_timeout>
 800f4b6:	e003      	b.n	800f4c0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f4b8:	4b06      	ldr	r3, [pc, #24]	; (800f4d4 <tcpip_tcp_timer+0x44>)
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	601a      	str	r2, [r3, #0]
  }
}
 800f4be:	bf00      	nop
 800f4c0:	bf00      	nop
 800f4c2:	3708      	adds	r7, #8
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}
 800f4c8:	2400bcfc 	.word	0x2400bcfc
 800f4cc:	2400bd00 	.word	0x2400bd00
 800f4d0:	0800f491 	.word	0x0800f491
 800f4d4:	2400bd48 	.word	0x2400bd48

0800f4d8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f4dc:	4b0a      	ldr	r3, [pc, #40]	; (800f508 <tcp_timer_needed+0x30>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d10f      	bne.n	800f504 <tcp_timer_needed+0x2c>
 800f4e4:	4b09      	ldr	r3, [pc, #36]	; (800f50c <tcp_timer_needed+0x34>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d103      	bne.n	800f4f4 <tcp_timer_needed+0x1c>
 800f4ec:	4b08      	ldr	r3, [pc, #32]	; (800f510 <tcp_timer_needed+0x38>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d007      	beq.n	800f504 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f4f4:	4b04      	ldr	r3, [pc, #16]	; (800f508 <tcp_timer_needed+0x30>)
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	4905      	ldr	r1, [pc, #20]	; (800f514 <tcp_timer_needed+0x3c>)
 800f4fe:	20fa      	movs	r0, #250	; 0xfa
 800f500:	f000 f8cc 	bl	800f69c <sys_timeout>
  }
}
 800f504:	bf00      	nop
 800f506:	bd80      	pop	{r7, pc}
 800f508:	2400bd48 	.word	0x2400bd48
 800f50c:	2400bcfc 	.word	0x2400bcfc
 800f510:	2400bd00 	.word	0x2400bd00
 800f514:	0800f491 	.word	0x0800f491

0800f518 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b086      	sub	sp, #24
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f524:	200a      	movs	r0, #10
 800f526:	f7f9 fcb9 	bl	8008e9c <memp_malloc>
 800f52a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d109      	bne.n	800f546 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d151      	bne.n	800f5dc <sys_timeout_abs+0xc4>
 800f538:	4b2a      	ldr	r3, [pc, #168]	; (800f5e4 <sys_timeout_abs+0xcc>)
 800f53a:	22be      	movs	r2, #190	; 0xbe
 800f53c:	492a      	ldr	r1, [pc, #168]	; (800f5e8 <sys_timeout_abs+0xd0>)
 800f53e:	482b      	ldr	r0, [pc, #172]	; (800f5ec <sys_timeout_abs+0xd4>)
 800f540:	f003 fb2c 	bl	8012b9c <iprintf>
    return;
 800f544:	e04a      	b.n	800f5dc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	2200      	movs	r2, #0
 800f54a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	68ba      	ldr	r2, [r7, #8]
 800f550:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	68fa      	ldr	r2, [r7, #12]
 800f55c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f55e:	4b24      	ldr	r3, [pc, #144]	; (800f5f0 <sys_timeout_abs+0xd8>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d103      	bne.n	800f56e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f566:	4a22      	ldr	r2, [pc, #136]	; (800f5f0 <sys_timeout_abs+0xd8>)
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	6013      	str	r3, [r2, #0]
    return;
 800f56c:	e037      	b.n	800f5de <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f56e:	693b      	ldr	r3, [r7, #16]
 800f570:	685a      	ldr	r2, [r3, #4]
 800f572:	4b1f      	ldr	r3, [pc, #124]	; (800f5f0 <sys_timeout_abs+0xd8>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	1ad3      	subs	r3, r2, r3
 800f57a:	0fdb      	lsrs	r3, r3, #31
 800f57c:	f003 0301 	and.w	r3, r3, #1
 800f580:	b2db      	uxtb	r3, r3
 800f582:	2b00      	cmp	r3, #0
 800f584:	d007      	beq.n	800f596 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f586:	4b1a      	ldr	r3, [pc, #104]	; (800f5f0 <sys_timeout_abs+0xd8>)
 800f588:	681a      	ldr	r2, [r3, #0]
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f58e:	4a18      	ldr	r2, [pc, #96]	; (800f5f0 <sys_timeout_abs+0xd8>)
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	6013      	str	r3, [r2, #0]
 800f594:	e023      	b.n	800f5de <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f596:	4b16      	ldr	r3, [pc, #88]	; (800f5f0 <sys_timeout_abs+0xd8>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	617b      	str	r3, [r7, #20]
 800f59c:	e01a      	b.n	800f5d4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d00b      	beq.n	800f5be <sys_timeout_abs+0xa6>
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	685a      	ldr	r2, [r3, #4]
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	1ad3      	subs	r3, r2, r3
 800f5b2:	0fdb      	lsrs	r3, r3, #31
 800f5b4:	f003 0301 	and.w	r3, r3, #1
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d007      	beq.n	800f5ce <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	681a      	ldr	r2, [r3, #0]
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	693a      	ldr	r2, [r7, #16]
 800f5ca:	601a      	str	r2, [r3, #0]
        break;
 800f5cc:	e007      	b.n	800f5de <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	617b      	str	r3, [r7, #20]
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d1e1      	bne.n	800f59e <sys_timeout_abs+0x86>
 800f5da:	e000      	b.n	800f5de <sys_timeout_abs+0xc6>
    return;
 800f5dc:	bf00      	nop
      }
    }
  }
}
 800f5de:	3718      	adds	r7, #24
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	08015adc 	.word	0x08015adc
 800f5e8:	08015b10 	.word	0x08015b10
 800f5ec:	08015b50 	.word	0x08015b50
 800f5f0:	2400bd40 	.word	0x2400bd40

0800f5f4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b086      	sub	sp, #24
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	4798      	blx	r3

  now = sys_now();
 800f606:	f7f5 fbcf 	bl	8004da8 <sys_now>
 800f60a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	681a      	ldr	r2, [r3, #0]
 800f610:	4b0f      	ldr	r3, [pc, #60]	; (800f650 <lwip_cyclic_timer+0x5c>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4413      	add	r3, r2
 800f616:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f618:	68fa      	ldr	r2, [r7, #12]
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	1ad3      	subs	r3, r2, r3
 800f61e:	0fdb      	lsrs	r3, r3, #31
 800f620:	f003 0301 	and.w	r3, r3, #1
 800f624:	b2db      	uxtb	r3, r3
 800f626:	2b00      	cmp	r3, #0
 800f628:	d009      	beq.n	800f63e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	681a      	ldr	r2, [r3, #0]
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	4413      	add	r3, r2
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	4907      	ldr	r1, [pc, #28]	; (800f654 <lwip_cyclic_timer+0x60>)
 800f636:	4618      	mov	r0, r3
 800f638:	f7ff ff6e 	bl	800f518 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f63c:	e004      	b.n	800f648 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f63e:	687a      	ldr	r2, [r7, #4]
 800f640:	4904      	ldr	r1, [pc, #16]	; (800f654 <lwip_cyclic_timer+0x60>)
 800f642:	68f8      	ldr	r0, [r7, #12]
 800f644:	f7ff ff68 	bl	800f518 <sys_timeout_abs>
}
 800f648:	bf00      	nop
 800f64a:	3718      	adds	r7, #24
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}
 800f650:	2400bd44 	.word	0x2400bd44
 800f654:	0800f5f5 	.word	0x0800f5f5

0800f658 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b082      	sub	sp, #8
 800f65c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f65e:	2301      	movs	r3, #1
 800f660:	607b      	str	r3, [r7, #4]
 800f662:	e00e      	b.n	800f682 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f664:	4a0b      	ldr	r2, [pc, #44]	; (800f694 <sys_timeouts_init+0x3c>)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	00db      	lsls	r3, r3, #3
 800f670:	4a08      	ldr	r2, [pc, #32]	; (800f694 <sys_timeouts_init+0x3c>)
 800f672:	4413      	add	r3, r2
 800f674:	461a      	mov	r2, r3
 800f676:	4908      	ldr	r1, [pc, #32]	; (800f698 <sys_timeouts_init+0x40>)
 800f678:	f000 f810 	bl	800f69c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	3301      	adds	r3, #1
 800f680:	607b      	str	r3, [r7, #4]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2b02      	cmp	r3, #2
 800f686:	d9ed      	bls.n	800f664 <sys_timeouts_init+0xc>
  }
}
 800f688:	bf00      	nop
 800f68a:	bf00      	nop
 800f68c:	3708      	adds	r7, #8
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}
 800f692:	bf00      	nop
 800f694:	08016700 	.word	0x08016700
 800f698:	0800f5f5 	.word	0x0800f5f5

0800f69c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b086      	sub	sp, #24
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	60b9      	str	r1, [r7, #8]
 800f6a6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6ae:	d306      	bcc.n	800f6be <sys_timeout+0x22>
 800f6b0:	4b0a      	ldr	r3, [pc, #40]	; (800f6dc <sys_timeout+0x40>)
 800f6b2:	f240 1229 	movw	r2, #297	; 0x129
 800f6b6:	490a      	ldr	r1, [pc, #40]	; (800f6e0 <sys_timeout+0x44>)
 800f6b8:	480a      	ldr	r0, [pc, #40]	; (800f6e4 <sys_timeout+0x48>)
 800f6ba:	f003 fa6f 	bl	8012b9c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f6be:	f7f5 fb73 	bl	8004da8 <sys_now>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	4413      	add	r3, r2
 800f6c8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f6ca:	687a      	ldr	r2, [r7, #4]
 800f6cc:	68b9      	ldr	r1, [r7, #8]
 800f6ce:	6978      	ldr	r0, [r7, #20]
 800f6d0:	f7ff ff22 	bl	800f518 <sys_timeout_abs>
#endif
}
 800f6d4:	bf00      	nop
 800f6d6:	3718      	adds	r7, #24
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}
 800f6dc:	08015adc 	.word	0x08015adc
 800f6e0:	08015b78 	.word	0x08015b78
 800f6e4:	08015b50 	.word	0x08015b50

0800f6e8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b084      	sub	sp, #16
 800f6ec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f6ee:	f7f5 fb5b 	bl	8004da8 <sys_now>
 800f6f2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800f6f4:	4b17      	ldr	r3, [pc, #92]	; (800f754 <sys_check_timeouts+0x6c>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d022      	beq.n	800f746 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	68fa      	ldr	r2, [r7, #12]
 800f706:	1ad3      	subs	r3, r2, r3
 800f708:	0fdb      	lsrs	r3, r3, #31
 800f70a:	f003 0301 	and.w	r3, r3, #1
 800f70e:	b2db      	uxtb	r3, r3
 800f710:	2b00      	cmp	r3, #0
 800f712:	d11a      	bne.n	800f74a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	4a0e      	ldr	r2, [pc, #56]	; (800f754 <sys_check_timeouts+0x6c>)
 800f71a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	689b      	ldr	r3, [r3, #8]
 800f720:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	68db      	ldr	r3, [r3, #12]
 800f726:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	685b      	ldr	r3, [r3, #4]
 800f72c:	4a0a      	ldr	r2, [pc, #40]	; (800f758 <sys_check_timeouts+0x70>)
 800f72e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f730:	68b9      	ldr	r1, [r7, #8]
 800f732:	200a      	movs	r0, #10
 800f734:	f7f9 fc28 	bl	8008f88 <memp_free>
    if (handler != NULL) {
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d0da      	beq.n	800f6f4 <sys_check_timeouts+0xc>
      handler(arg);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6838      	ldr	r0, [r7, #0]
 800f742:	4798      	blx	r3
  do {
 800f744:	e7d6      	b.n	800f6f4 <sys_check_timeouts+0xc>
      return;
 800f746:	bf00      	nop
 800f748:	e000      	b.n	800f74c <sys_check_timeouts+0x64>
      return;
 800f74a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f74c:	3710      	adds	r7, #16
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
 800f752:	bf00      	nop
 800f754:	2400bd40 	.word	0x2400bd40
 800f758:	2400bd44 	.word	0x2400bd44

0800f75c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800f762:	4b16      	ldr	r3, [pc, #88]	; (800f7bc <sys_timeouts_sleeptime+0x60>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d102      	bne.n	800f770 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800f76a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f76e:	e020      	b.n	800f7b2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800f770:	f7f5 fb1a 	bl	8004da8 <sys_now>
 800f774:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800f776:	4b11      	ldr	r3, [pc, #68]	; (800f7bc <sys_timeouts_sleeptime+0x60>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	685a      	ldr	r2, [r3, #4]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	1ad3      	subs	r3, r2, r3
 800f780:	0fdb      	lsrs	r3, r3, #31
 800f782:	f003 0301 	and.w	r3, r3, #1
 800f786:	b2db      	uxtb	r3, r3
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d001      	beq.n	800f790 <sys_timeouts_sleeptime+0x34>
    return 0;
 800f78c:	2300      	movs	r3, #0
 800f78e:	e010      	b.n	800f7b2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800f790:	4b0a      	ldr	r3, [pc, #40]	; (800f7bc <sys_timeouts_sleeptime+0x60>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	685a      	ldr	r2, [r3, #4]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	1ad3      	subs	r3, r2, r3
 800f79a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	da06      	bge.n	800f7b0 <sys_timeouts_sleeptime+0x54>
 800f7a2:	4b07      	ldr	r3, [pc, #28]	; (800f7c0 <sys_timeouts_sleeptime+0x64>)
 800f7a4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f7a8:	4906      	ldr	r1, [pc, #24]	; (800f7c4 <sys_timeouts_sleeptime+0x68>)
 800f7aa:	4807      	ldr	r0, [pc, #28]	; (800f7c8 <sys_timeouts_sleeptime+0x6c>)
 800f7ac:	f003 f9f6 	bl	8012b9c <iprintf>
    return ret;
 800f7b0:	683b      	ldr	r3, [r7, #0]
  }
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3708      	adds	r7, #8
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}
 800f7ba:	bf00      	nop
 800f7bc:	2400bd40 	.word	0x2400bd40
 800f7c0:	08015adc 	.word	0x08015adc
 800f7c4:	08015bb0 	.word	0x08015bb0
 800f7c8:	08015b50 	.word	0x08015b50

0800f7cc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f7d0:	f003 f8f6 	bl	80129c0 <rand>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f7e2:	b29a      	uxth	r2, r3
 800f7e4:	4b01      	ldr	r3, [pc, #4]	; (800f7ec <udp_init+0x20>)
 800f7e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f7e8:	bf00      	nop
 800f7ea:	bd80      	pop	{r7, pc}
 800f7ec:	24000030 	.word	0x24000030

0800f7f0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b083      	sub	sp, #12
 800f7f4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f7fa:	4b17      	ldr	r3, [pc, #92]	; (800f858 <udp_new_port+0x68>)
 800f7fc:	881b      	ldrh	r3, [r3, #0]
 800f7fe:	1c5a      	adds	r2, r3, #1
 800f800:	b291      	uxth	r1, r2
 800f802:	4a15      	ldr	r2, [pc, #84]	; (800f858 <udp_new_port+0x68>)
 800f804:	8011      	strh	r1, [r2, #0]
 800f806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d103      	bne.n	800f816 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f80e:	4b12      	ldr	r3, [pc, #72]	; (800f858 <udp_new_port+0x68>)
 800f810:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f814:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f816:	4b11      	ldr	r3, [pc, #68]	; (800f85c <udp_new_port+0x6c>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	603b      	str	r3, [r7, #0]
 800f81c:	e011      	b.n	800f842 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	8a5a      	ldrh	r2, [r3, #18]
 800f822:	4b0d      	ldr	r3, [pc, #52]	; (800f858 <udp_new_port+0x68>)
 800f824:	881b      	ldrh	r3, [r3, #0]
 800f826:	429a      	cmp	r2, r3
 800f828:	d108      	bne.n	800f83c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f82a:	88fb      	ldrh	r3, [r7, #6]
 800f82c:	3301      	adds	r3, #1
 800f82e:	80fb      	strh	r3, [r7, #6]
 800f830:	88fb      	ldrh	r3, [r7, #6]
 800f832:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f836:	d3e0      	bcc.n	800f7fa <udp_new_port+0xa>
        return 0;
 800f838:	2300      	movs	r3, #0
 800f83a:	e007      	b.n	800f84c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	68db      	ldr	r3, [r3, #12]
 800f840:	603b      	str	r3, [r7, #0]
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d1ea      	bne.n	800f81e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f848:	4b03      	ldr	r3, [pc, #12]	; (800f858 <udp_new_port+0x68>)
 800f84a:	881b      	ldrh	r3, [r3, #0]
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	370c      	adds	r7, #12
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr
 800f858:	24000030 	.word	0x24000030
 800f85c:	2400bd4c 	.word	0x2400bd4c

0800f860 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b084      	sub	sp, #16
 800f864:	af00      	add	r7, sp, #0
 800f866:	60f8      	str	r0, [r7, #12]
 800f868:	60b9      	str	r1, [r7, #8]
 800f86a:	4613      	mov	r3, r2
 800f86c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d105      	bne.n	800f880 <udp_input_local_match+0x20>
 800f874:	4b27      	ldr	r3, [pc, #156]	; (800f914 <udp_input_local_match+0xb4>)
 800f876:	2287      	movs	r2, #135	; 0x87
 800f878:	4927      	ldr	r1, [pc, #156]	; (800f918 <udp_input_local_match+0xb8>)
 800f87a:	4828      	ldr	r0, [pc, #160]	; (800f91c <udp_input_local_match+0xbc>)
 800f87c:	f003 f98e 	bl	8012b9c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d105      	bne.n	800f892 <udp_input_local_match+0x32>
 800f886:	4b23      	ldr	r3, [pc, #140]	; (800f914 <udp_input_local_match+0xb4>)
 800f888:	2288      	movs	r2, #136	; 0x88
 800f88a:	4925      	ldr	r1, [pc, #148]	; (800f920 <udp_input_local_match+0xc0>)
 800f88c:	4823      	ldr	r0, [pc, #140]	; (800f91c <udp_input_local_match+0xbc>)
 800f88e:	f003 f985 	bl	8012b9c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	7a1b      	ldrb	r3, [r3, #8]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d00b      	beq.n	800f8b2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	7a1a      	ldrb	r2, [r3, #8]
 800f89e:	4b21      	ldr	r3, [pc, #132]	; (800f924 <udp_input_local_match+0xc4>)
 800f8a0:	685b      	ldr	r3, [r3, #4]
 800f8a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8a6:	3301      	adds	r3, #1
 800f8a8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d001      	beq.n	800f8b2 <udp_input_local_match+0x52>
    return 0;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	e02b      	b.n	800f90a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f8b2:	79fb      	ldrb	r3, [r7, #7]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d018      	beq.n	800f8ea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d013      	beq.n	800f8e6 <udp_input_local_match+0x86>
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d00f      	beq.n	800f8e6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f8c6:	4b17      	ldr	r3, [pc, #92]	; (800f924 <udp_input_local_match+0xc4>)
 800f8c8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f8ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f8ce:	d00a      	beq.n	800f8e6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	4b13      	ldr	r3, [pc, #76]	; (800f924 <udp_input_local_match+0xc4>)
 800f8d6:	695b      	ldr	r3, [r3, #20]
 800f8d8:	405a      	eors	r2, r3
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	3308      	adds	r3, #8
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d110      	bne.n	800f908 <udp_input_local_match+0xa8>
          return 1;
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	e00f      	b.n	800f90a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d009      	beq.n	800f904 <udp_input_local_match+0xa4>
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d005      	beq.n	800f904 <udp_input_local_match+0xa4>
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	4b09      	ldr	r3, [pc, #36]	; (800f924 <udp_input_local_match+0xc4>)
 800f8fe:	695b      	ldr	r3, [r3, #20]
 800f900:	429a      	cmp	r2, r3
 800f902:	d101      	bne.n	800f908 <udp_input_local_match+0xa8>
        return 1;
 800f904:	2301      	movs	r3, #1
 800f906:	e000      	b.n	800f90a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f908:	2300      	movs	r3, #0
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3710      	adds	r7, #16
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	08015bc4 	.word	0x08015bc4
 800f918:	08015bf4 	.word	0x08015bf4
 800f91c:	08015c18 	.word	0x08015c18
 800f920:	08015c40 	.word	0x08015c40
 800f924:	24008bf0 	.word	0x24008bf0

0800f928 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f928:	b590      	push	{r4, r7, lr}
 800f92a:	b08d      	sub	sp, #52	; 0x34
 800f92c:	af02      	add	r7, sp, #8
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f932:	2300      	movs	r3, #0
 800f934:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d105      	bne.n	800f948 <udp_input+0x20>
 800f93c:	4b7e      	ldr	r3, [pc, #504]	; (800fb38 <udp_input+0x210>)
 800f93e:	22cf      	movs	r2, #207	; 0xcf
 800f940:	497e      	ldr	r1, [pc, #504]	; (800fb3c <udp_input+0x214>)
 800f942:	487f      	ldr	r0, [pc, #508]	; (800fb40 <udp_input+0x218>)
 800f944:	f003 f92a 	bl	8012b9c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d105      	bne.n	800f95a <udp_input+0x32>
 800f94e:	4b7a      	ldr	r3, [pc, #488]	; (800fb38 <udp_input+0x210>)
 800f950:	22d0      	movs	r2, #208	; 0xd0
 800f952:	497c      	ldr	r1, [pc, #496]	; (800fb44 <udp_input+0x21c>)
 800f954:	487a      	ldr	r0, [pc, #488]	; (800fb40 <udp_input+0x218>)
 800f956:	f003 f921 	bl	8012b9c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	895b      	ldrh	r3, [r3, #10]
 800f95e:	2b07      	cmp	r3, #7
 800f960:	d803      	bhi.n	800f96a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f7fa f9b2 	bl	8009ccc <pbuf_free>
    goto end;
 800f968:	e0e1      	b.n	800fb2e <udp_input+0x206>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f970:	4b75      	ldr	r3, [pc, #468]	; (800fb48 <udp_input+0x220>)
 800f972:	695b      	ldr	r3, [r3, #20]
 800f974:	4a74      	ldr	r2, [pc, #464]	; (800fb48 <udp_input+0x220>)
 800f976:	6812      	ldr	r2, [r2, #0]
 800f978:	4611      	mov	r1, r2
 800f97a:	4618      	mov	r0, r3
 800f97c:	f001 ffb4 	bl	80118e8 <ip4_addr_isbroadcast_u32>
 800f980:	4603      	mov	r3, r0
 800f982:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	881b      	ldrh	r3, [r3, #0]
 800f988:	b29b      	uxth	r3, r3
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7f8 fd08 	bl	80083a0 <lwip_htons>
 800f990:	4603      	mov	r3, r0
 800f992:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	885b      	ldrh	r3, [r3, #2]
 800f998:	b29b      	uxth	r3, r3
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7f8 fd00 	bl	80083a0 <lwip_htons>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 800f9a4:	6978      	ldr	r0, [r7, #20]
 800f9a6:	f000 fbff 	bl	80101a8 <udp_debug_print>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9b6:	4b65      	ldr	r3, [pc, #404]	; (800fb4c <udp_input+0x224>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	627b      	str	r3, [r7, #36]	; 0x24
 800f9bc:	e054      	b.n	800fa68 <udp_input+0x140>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c0:	8a5b      	ldrh	r3, [r3, #18]
 800f9c2:	89fa      	ldrh	r2, [r7, #14]
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d14a      	bne.n	800fa5e <udp_input+0x136>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f9c8:	7cfb      	ldrb	r3, [r7, #19]
 800f9ca:	461a      	mov	r2, r3
 800f9cc:	6839      	ldr	r1, [r7, #0]
 800f9ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f9d0:	f7ff ff46 	bl	800f860 <udp_input_local_match>
 800f9d4:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d041      	beq.n	800fa5e <udp_input+0x136>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9dc:	7c1b      	ldrb	r3, [r3, #16]
 800f9de:	f003 0304 	and.w	r3, r3, #4
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d11d      	bne.n	800fa22 <udp_input+0xfa>
        if (uncon_pcb == NULL) {
 800f9e6:	69fb      	ldr	r3, [r7, #28]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d102      	bne.n	800f9f2 <udp_input+0xca>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ee:	61fb      	str	r3, [r7, #28]
 800f9f0:	e017      	b.n	800fa22 <udp_input+0xfa>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f9f2:	7cfb      	ldrb	r3, [r7, #19]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d014      	beq.n	800fa22 <udp_input+0xfa>
 800f9f8:	4b53      	ldr	r3, [pc, #332]	; (800fb48 <udp_input+0x220>)
 800f9fa:	695b      	ldr	r3, [r3, #20]
 800f9fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa00:	d10f      	bne.n	800fa22 <udp_input+0xfa>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800fa02:	69fb      	ldr	r3, [r7, #28]
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	3304      	adds	r3, #4
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d008      	beq.n	800fa22 <udp_input+0xfa>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800fa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa12:	681a      	ldr	r2, [r3, #0]
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	3304      	adds	r3, #4
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d101      	bne.n	800fa22 <udp_input+0xfa>
              /* better match */
              uncon_pcb = pcb;
 800fa1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa20:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800fa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa24:	8a9b      	ldrh	r3, [r3, #20]
 800fa26:	8a3a      	ldrh	r2, [r7, #16]
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	d118      	bne.n	800fa5e <udp_input+0x136>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d005      	beq.n	800fa40 <udp_input+0x118>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800fa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa36:	685a      	ldr	r2, [r3, #4]
 800fa38:	4b43      	ldr	r3, [pc, #268]	; (800fb48 <udp_input+0x220>)
 800fa3a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d10e      	bne.n	800fa5e <udp_input+0x136>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800fa40:	6a3b      	ldr	r3, [r7, #32]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d014      	beq.n	800fa70 <udp_input+0x148>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800fa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa48:	68da      	ldr	r2, [r3, #12]
 800fa4a:	6a3b      	ldr	r3, [r7, #32]
 800fa4c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800fa4e:	4b3f      	ldr	r3, [pc, #252]	; (800fb4c <udp_input+0x224>)
 800fa50:	681a      	ldr	r2, [r3, #0]
 800fa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa54:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800fa56:	4a3d      	ldr	r2, [pc, #244]	; (800fb4c <udp_input+0x224>)
 800fa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800fa5c:	e008      	b.n	800fa70 <udp_input+0x148>
      }
    }

    prev = pcb;
 800fa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa60:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa64:	68db      	ldr	r3, [r3, #12]
 800fa66:	627b      	str	r3, [r7, #36]	; 0x24
 800fa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d1a7      	bne.n	800f9be <udp_input+0x96>
 800fa6e:	e000      	b.n	800fa72 <udp_input+0x14a>
        break;
 800fa70:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800fa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d101      	bne.n	800fa7c <udp_input+0x154>
    pcb = uncon_pcb;
 800fa78:	69fb      	ldr	r3, [r7, #28]
 800fa7a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d002      	beq.n	800fa88 <udp_input+0x160>
    for_us = 1;
 800fa82:	2301      	movs	r3, #1
 800fa84:	76fb      	strb	r3, [r7, #27]
 800fa86:	e00a      	b.n	800fa9e <udp_input+0x176>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	3304      	adds	r3, #4
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	4b2e      	ldr	r3, [pc, #184]	; (800fb48 <udp_input+0x220>)
 800fa90:	695b      	ldr	r3, [r3, #20]
 800fa92:	429a      	cmp	r2, r3
 800fa94:	bf0c      	ite	eq
 800fa96:	2301      	moveq	r3, #1
 800fa98:	2300      	movne	r3, #0
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800fa9e:	7efb      	ldrb	r3, [r7, #27]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d041      	beq.n	800fb28 <udp_input+0x200>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800faa4:	2108      	movs	r1, #8
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f7fa f88a 	bl	8009bc0 <pbuf_remove_header>
 800faac:	4603      	mov	r3, r0
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d00a      	beq.n	800fac8 <udp_input+0x1a0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800fab2:	4b21      	ldr	r3, [pc, #132]	; (800fb38 <udp_input+0x210>)
 800fab4:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800fab8:	4925      	ldr	r1, [pc, #148]	; (800fb50 <udp_input+0x228>)
 800faba:	4821      	ldr	r0, [pc, #132]	; (800fb40 <udp_input+0x218>)
 800fabc:	f003 f86e 	bl	8012b9c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f7fa f903 	bl	8009ccc <pbuf_free>
      goto end;
 800fac6:	e032      	b.n	800fb2e <udp_input+0x206>
    }

    if (pcb != NULL) {
 800fac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faca:	2b00      	cmp	r3, #0
 800facc:	d012      	beq.n	800faf4 <udp_input+0x1cc>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800face:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad0:	699b      	ldr	r3, [r3, #24]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d00a      	beq.n	800faec <udp_input+0x1c4>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800fad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad8:	699c      	ldr	r4, [r3, #24]
 800fada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fadc:	69d8      	ldr	r0, [r3, #28]
 800fade:	8a3b      	ldrh	r3, [r7, #16]
 800fae0:	9300      	str	r3, [sp, #0]
 800fae2:	4b1c      	ldr	r3, [pc, #112]	; (800fb54 <udp_input+0x22c>)
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fae8:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800faea:	e021      	b.n	800fb30 <udp_input+0x208>
        pbuf_free(p);
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f7fa f8ed 	bl	8009ccc <pbuf_free>
        goto end;
 800faf2:	e01c      	b.n	800fb2e <udp_input+0x206>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800faf4:	7cfb      	ldrb	r3, [r7, #19]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d112      	bne.n	800fb20 <udp_input+0x1f8>
 800fafa:	4b13      	ldr	r3, [pc, #76]	; (800fb48 <udp_input+0x220>)
 800fafc:	695b      	ldr	r3, [r3, #20]
 800fafe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb02:	2be0      	cmp	r3, #224	; 0xe0
 800fb04:	d00c      	beq.n	800fb20 <udp_input+0x1f8>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fb06:	4b10      	ldr	r3, [pc, #64]	; (800fb48 <udp_input+0x220>)
 800fb08:	899b      	ldrh	r3, [r3, #12]
 800fb0a:	3308      	adds	r3, #8
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	b21b      	sxth	r3, r3
 800fb10:	4619      	mov	r1, r3
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f7fa f8c7 	bl	8009ca6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fb18:	2103      	movs	r1, #3
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f001 fbba 	bl	8011294 <icmp_dest_unreach>
      pbuf_free(p);
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f7fa f8d3 	bl	8009ccc <pbuf_free>
  return;
 800fb26:	e003      	b.n	800fb30 <udp_input+0x208>
    pbuf_free(p);
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f7fa f8cf 	bl	8009ccc <pbuf_free>
  return;
 800fb2e:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800fb30:	372c      	adds	r7, #44	; 0x2c
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd90      	pop	{r4, r7, pc}
 800fb36:	bf00      	nop
 800fb38:	08015bc4 	.word	0x08015bc4
 800fb3c:	08015c68 	.word	0x08015c68
 800fb40:	08015c18 	.word	0x08015c18
 800fb44:	08015c80 	.word	0x08015c80
 800fb48:	24008bf0 	.word	0x24008bf0
 800fb4c:	2400bd4c 	.word	0x2400bd4c
 800fb50:	08015c9c 	.word	0x08015c9c
 800fb54:	24008c00 	.word	0x24008c00

0800fb58 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d109      	bne.n	800fb7c <udp_send+0x24>
 800fb68:	4b11      	ldr	r3, [pc, #68]	; (800fbb0 <udp_send+0x58>)
 800fb6a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800fb6e:	4911      	ldr	r1, [pc, #68]	; (800fbb4 <udp_send+0x5c>)
 800fb70:	4811      	ldr	r0, [pc, #68]	; (800fbb8 <udp_send+0x60>)
 800fb72:	f003 f813 	bl	8012b9c <iprintf>
 800fb76:	f06f 030f 	mvn.w	r3, #15
 800fb7a:	e015      	b.n	800fba8 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d109      	bne.n	800fb96 <udp_send+0x3e>
 800fb82:	4b0b      	ldr	r3, [pc, #44]	; (800fbb0 <udp_send+0x58>)
 800fb84:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800fb88:	490c      	ldr	r1, [pc, #48]	; (800fbbc <udp_send+0x64>)
 800fb8a:	480b      	ldr	r0, [pc, #44]	; (800fbb8 <udp_send+0x60>)
 800fb8c:	f003 f806 	bl	8012b9c <iprintf>
 800fb90:	f06f 030f 	mvn.w	r3, #15
 800fb94:	e008      	b.n	800fba8 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	1d1a      	adds	r2, r3, #4
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	8a9b      	ldrh	r3, [r3, #20]
 800fb9e:	6839      	ldr	r1, [r7, #0]
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f000 f80d 	bl	800fbc0 <udp_sendto>
 800fba6:	4603      	mov	r3, r0
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3708      	adds	r7, #8
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}
 800fbb0:	08015bc4 	.word	0x08015bc4
 800fbb4:	08015cb8 	.word	0x08015cb8
 800fbb8:	08015c18 	.word	0x08015c18
 800fbbc:	08015cd0 	.word	0x08015cd0

0800fbc0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b088      	sub	sp, #32
 800fbc4:	af02      	add	r7, sp, #8
 800fbc6:	60f8      	str	r0, [r7, #12]
 800fbc8:	60b9      	str	r1, [r7, #8]
 800fbca:	607a      	str	r2, [r7, #4]
 800fbcc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d109      	bne.n	800fbe8 <udp_sendto+0x28>
 800fbd4:	4b23      	ldr	r3, [pc, #140]	; (800fc64 <udp_sendto+0xa4>)
 800fbd6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fbda:	4923      	ldr	r1, [pc, #140]	; (800fc68 <udp_sendto+0xa8>)
 800fbdc:	4823      	ldr	r0, [pc, #140]	; (800fc6c <udp_sendto+0xac>)
 800fbde:	f002 ffdd 	bl	8012b9c <iprintf>
 800fbe2:	f06f 030f 	mvn.w	r3, #15
 800fbe6:	e038      	b.n	800fc5a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d109      	bne.n	800fc02 <udp_sendto+0x42>
 800fbee:	4b1d      	ldr	r3, [pc, #116]	; (800fc64 <udp_sendto+0xa4>)
 800fbf0:	f240 2219 	movw	r2, #537	; 0x219
 800fbf4:	491e      	ldr	r1, [pc, #120]	; (800fc70 <udp_sendto+0xb0>)
 800fbf6:	481d      	ldr	r0, [pc, #116]	; (800fc6c <udp_sendto+0xac>)
 800fbf8:	f002 ffd0 	bl	8012b9c <iprintf>
 800fbfc:	f06f 030f 	mvn.w	r3, #15
 800fc00:	e02b      	b.n	800fc5a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d109      	bne.n	800fc1c <udp_sendto+0x5c>
 800fc08:	4b16      	ldr	r3, [pc, #88]	; (800fc64 <udp_sendto+0xa4>)
 800fc0a:	f240 221a 	movw	r2, #538	; 0x21a
 800fc0e:	4919      	ldr	r1, [pc, #100]	; (800fc74 <udp_sendto+0xb4>)
 800fc10:	4816      	ldr	r0, [pc, #88]	; (800fc6c <udp_sendto+0xac>)
 800fc12:	f002 ffc3 	bl	8012b9c <iprintf>
 800fc16:	f06f 030f 	mvn.w	r3, #15
 800fc1a:	e01e      	b.n	800fc5a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	7a1b      	ldrb	r3, [r3, #8]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d006      	beq.n	800fc32 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	7a1b      	ldrb	r3, [r3, #8]
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7f9 fcc3 	bl	80095b4 <netif_get_by_index>
 800fc2e:	6178      	str	r0, [r7, #20]
 800fc30:	e003      	b.n	800fc3a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f001 fbc2 	bl	80113bc <ip4_route>
 800fc38:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d102      	bne.n	800fc46 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800fc40:	f06f 0303 	mvn.w	r3, #3
 800fc44:	e009      	b.n	800fc5a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800fc46:	887a      	ldrh	r2, [r7, #2]
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	9300      	str	r3, [sp, #0]
 800fc4c:	4613      	mov	r3, r2
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	68b9      	ldr	r1, [r7, #8]
 800fc52:	68f8      	ldr	r0, [r7, #12]
 800fc54:	f000 f810 	bl	800fc78 <udp_sendto_if>
 800fc58:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3718      	adds	r7, #24
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	08015bc4 	.word	0x08015bc4
 800fc68:	08015ce8 	.word	0x08015ce8
 800fc6c:	08015c18 	.word	0x08015c18
 800fc70:	08015d00 	.word	0x08015d00
 800fc74:	08015d1c 	.word	0x08015d1c

0800fc78 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b088      	sub	sp, #32
 800fc7c:	af02      	add	r7, sp, #8
 800fc7e:	60f8      	str	r0, [r7, #12]
 800fc80:	60b9      	str	r1, [r7, #8]
 800fc82:	607a      	str	r2, [r7, #4]
 800fc84:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d109      	bne.n	800fca0 <udp_sendto_if+0x28>
 800fc8c:	4b2e      	ldr	r3, [pc, #184]	; (800fd48 <udp_sendto_if+0xd0>)
 800fc8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fc92:	492e      	ldr	r1, [pc, #184]	; (800fd4c <udp_sendto_if+0xd4>)
 800fc94:	482e      	ldr	r0, [pc, #184]	; (800fd50 <udp_sendto_if+0xd8>)
 800fc96:	f002 ff81 	bl	8012b9c <iprintf>
 800fc9a:	f06f 030f 	mvn.w	r3, #15
 800fc9e:	e04f      	b.n	800fd40 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d109      	bne.n	800fcba <udp_sendto_if+0x42>
 800fca6:	4b28      	ldr	r3, [pc, #160]	; (800fd48 <udp_sendto_if+0xd0>)
 800fca8:	f240 2281 	movw	r2, #641	; 0x281
 800fcac:	4929      	ldr	r1, [pc, #164]	; (800fd54 <udp_sendto_if+0xdc>)
 800fcae:	4828      	ldr	r0, [pc, #160]	; (800fd50 <udp_sendto_if+0xd8>)
 800fcb0:	f002 ff74 	bl	8012b9c <iprintf>
 800fcb4:	f06f 030f 	mvn.w	r3, #15
 800fcb8:	e042      	b.n	800fd40 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d109      	bne.n	800fcd4 <udp_sendto_if+0x5c>
 800fcc0:	4b21      	ldr	r3, [pc, #132]	; (800fd48 <udp_sendto_if+0xd0>)
 800fcc2:	f240 2282 	movw	r2, #642	; 0x282
 800fcc6:	4924      	ldr	r1, [pc, #144]	; (800fd58 <udp_sendto_if+0xe0>)
 800fcc8:	4821      	ldr	r0, [pc, #132]	; (800fd50 <udp_sendto_if+0xd8>)
 800fcca:	f002 ff67 	bl	8012b9c <iprintf>
 800fcce:	f06f 030f 	mvn.w	r3, #15
 800fcd2:	e035      	b.n	800fd40 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800fcd4:	6a3b      	ldr	r3, [r7, #32]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d109      	bne.n	800fcee <udp_sendto_if+0x76>
 800fcda:	4b1b      	ldr	r3, [pc, #108]	; (800fd48 <udp_sendto_if+0xd0>)
 800fcdc:	f240 2283 	movw	r2, #643	; 0x283
 800fce0:	491e      	ldr	r1, [pc, #120]	; (800fd5c <udp_sendto_if+0xe4>)
 800fce2:	481b      	ldr	r0, [pc, #108]	; (800fd50 <udp_sendto_if+0xd8>)
 800fce4:	f002 ff5a 	bl	8012b9c <iprintf>
 800fce8:	f06f 030f 	mvn.w	r3, #15
 800fcec:	e028      	b.n	800fd40 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d009      	beq.n	800fd08 <udp_sendto_if+0x90>
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d005      	beq.n	800fd08 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fd04:	2be0      	cmp	r3, #224	; 0xe0
 800fd06:	d103      	bne.n	800fd10 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800fd08:	6a3b      	ldr	r3, [r7, #32]
 800fd0a:	3304      	adds	r3, #4
 800fd0c:	617b      	str	r3, [r7, #20]
 800fd0e:	e00b      	b.n	800fd28 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681a      	ldr	r2, [r3, #0]
 800fd14:	6a3b      	ldr	r3, [r7, #32]
 800fd16:	3304      	adds	r3, #4
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d002      	beq.n	800fd24 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800fd1e:	f06f 0303 	mvn.w	r3, #3
 800fd22:	e00d      	b.n	800fd40 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800fd28:	887a      	ldrh	r2, [r7, #2]
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	9301      	str	r3, [sp, #4]
 800fd2e:	6a3b      	ldr	r3, [r7, #32]
 800fd30:	9300      	str	r3, [sp, #0]
 800fd32:	4613      	mov	r3, r2
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	68b9      	ldr	r1, [r7, #8]
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f000 f811 	bl	800fd60 <udp_sendto_if_src>
 800fd3e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3718      	adds	r7, #24
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	08015bc4 	.word	0x08015bc4
 800fd4c:	08015d38 	.word	0x08015d38
 800fd50:	08015c18 	.word	0x08015c18
 800fd54:	08015d54 	.word	0x08015d54
 800fd58:	08015d70 	.word	0x08015d70
 800fd5c:	08015d90 	.word	0x08015d90

0800fd60 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b08c      	sub	sp, #48	; 0x30
 800fd64:	af04      	add	r7, sp, #16
 800fd66:	60f8      	str	r0, [r7, #12]
 800fd68:	60b9      	str	r1, [r7, #8]
 800fd6a:	607a      	str	r2, [r7, #4]
 800fd6c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d109      	bne.n	800fd88 <udp_sendto_if_src+0x28>
 800fd74:	4b65      	ldr	r3, [pc, #404]	; (800ff0c <udp_sendto_if_src+0x1ac>)
 800fd76:	f240 22d1 	movw	r2, #721	; 0x2d1
 800fd7a:	4965      	ldr	r1, [pc, #404]	; (800ff10 <udp_sendto_if_src+0x1b0>)
 800fd7c:	4865      	ldr	r0, [pc, #404]	; (800ff14 <udp_sendto_if_src+0x1b4>)
 800fd7e:	f002 ff0d 	bl	8012b9c <iprintf>
 800fd82:	f06f 030f 	mvn.w	r3, #15
 800fd86:	e0bc      	b.n	800ff02 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d109      	bne.n	800fda2 <udp_sendto_if_src+0x42>
 800fd8e:	4b5f      	ldr	r3, [pc, #380]	; (800ff0c <udp_sendto_if_src+0x1ac>)
 800fd90:	f240 22d2 	movw	r2, #722	; 0x2d2
 800fd94:	4960      	ldr	r1, [pc, #384]	; (800ff18 <udp_sendto_if_src+0x1b8>)
 800fd96:	485f      	ldr	r0, [pc, #380]	; (800ff14 <udp_sendto_if_src+0x1b4>)
 800fd98:	f002 ff00 	bl	8012b9c <iprintf>
 800fd9c:	f06f 030f 	mvn.w	r3, #15
 800fda0:	e0af      	b.n	800ff02 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d109      	bne.n	800fdbc <udp_sendto_if_src+0x5c>
 800fda8:	4b58      	ldr	r3, [pc, #352]	; (800ff0c <udp_sendto_if_src+0x1ac>)
 800fdaa:	f240 22d3 	movw	r2, #723	; 0x2d3
 800fdae:	495b      	ldr	r1, [pc, #364]	; (800ff1c <udp_sendto_if_src+0x1bc>)
 800fdb0:	4858      	ldr	r0, [pc, #352]	; (800ff14 <udp_sendto_if_src+0x1b4>)
 800fdb2:	f002 fef3 	bl	8012b9c <iprintf>
 800fdb6:	f06f 030f 	mvn.w	r3, #15
 800fdba:	e0a2      	b.n	800ff02 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800fdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d109      	bne.n	800fdd6 <udp_sendto_if_src+0x76>
 800fdc2:	4b52      	ldr	r3, [pc, #328]	; (800ff0c <udp_sendto_if_src+0x1ac>)
 800fdc4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800fdc8:	4955      	ldr	r1, [pc, #340]	; (800ff20 <udp_sendto_if_src+0x1c0>)
 800fdca:	4852      	ldr	r0, [pc, #328]	; (800ff14 <udp_sendto_if_src+0x1b4>)
 800fdcc:	f002 fee6 	bl	8012b9c <iprintf>
 800fdd0:	f06f 030f 	mvn.w	r3, #15
 800fdd4:	e095      	b.n	800ff02 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800fdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d109      	bne.n	800fdf0 <udp_sendto_if_src+0x90>
 800fddc:	4b4b      	ldr	r3, [pc, #300]	; (800ff0c <udp_sendto_if_src+0x1ac>)
 800fdde:	f240 22d5 	movw	r2, #725	; 0x2d5
 800fde2:	4950      	ldr	r1, [pc, #320]	; (800ff24 <udp_sendto_if_src+0x1c4>)
 800fde4:	484b      	ldr	r0, [pc, #300]	; (800ff14 <udp_sendto_if_src+0x1b4>)
 800fde6:	f002 fed9 	bl	8012b9c <iprintf>
 800fdea:	f06f 030f 	mvn.w	r3, #15
 800fdee:	e088      	b.n	800ff02 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	8a5b      	ldrh	r3, [r3, #18]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d10f      	bne.n	800fe18 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800fdf8:	68f9      	ldr	r1, [r7, #12]
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	8a5b      	ldrh	r3, [r3, #18]
 800fdfe:	461a      	mov	r2, r3
 800fe00:	68f8      	ldr	r0, [r7, #12]
 800fe02:	f000 f893 	bl	800ff2c <udp_bind>
 800fe06:	4603      	mov	r3, r0
 800fe08:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800fe0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d002      	beq.n	800fe18 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800fe12:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fe16:	e074      	b.n	800ff02 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	891b      	ldrh	r3, [r3, #8]
 800fe1c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800fe20:	4293      	cmp	r3, r2
 800fe22:	d902      	bls.n	800fe2a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800fe24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe28:	e06b      	b.n	800ff02 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800fe2a:	2108      	movs	r1, #8
 800fe2c:	68b8      	ldr	r0, [r7, #8]
 800fe2e:	f7f9 feb7 	bl	8009ba0 <pbuf_add_header>
 800fe32:	4603      	mov	r3, r0
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d015      	beq.n	800fe64 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800fe38:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fe3c:	2108      	movs	r1, #8
 800fe3e:	2022      	movs	r0, #34	; 0x22
 800fe40:	f7f9 fc62 	bl	8009708 <pbuf_alloc>
 800fe44:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800fe46:	69fb      	ldr	r3, [r7, #28]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d102      	bne.n	800fe52 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800fe4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe50:	e057      	b.n	800ff02 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	891b      	ldrh	r3, [r3, #8]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d006      	beq.n	800fe68 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800fe5a:	68b9      	ldr	r1, [r7, #8]
 800fe5c:	69f8      	ldr	r0, [r7, #28]
 800fe5e:	f7fa f859 	bl	8009f14 <pbuf_chain>
 800fe62:	e001      	b.n	800fe68 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800fe68:	69fb      	ldr	r3, [r7, #28]
 800fe6a:	895b      	ldrh	r3, [r3, #10]
 800fe6c:	2b07      	cmp	r3, #7
 800fe6e:	d806      	bhi.n	800fe7e <udp_sendto_if_src+0x11e>
 800fe70:	4b26      	ldr	r3, [pc, #152]	; (800ff0c <udp_sendto_if_src+0x1ac>)
 800fe72:	f240 320d 	movw	r2, #781	; 0x30d
 800fe76:	492c      	ldr	r1, [pc, #176]	; (800ff28 <udp_sendto_if_src+0x1c8>)
 800fe78:	4826      	ldr	r0, [pc, #152]	; (800ff14 <udp_sendto_if_src+0x1b4>)
 800fe7a:	f002 fe8f 	bl	8012b9c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800fe7e:	69fb      	ldr	r3, [r7, #28]
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	8a5b      	ldrh	r3, [r3, #18]
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f7f8 fa89 	bl	80083a0 <lwip_htons>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	461a      	mov	r2, r3
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800fe96:	887b      	ldrh	r3, [r7, #2]
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f7f8 fa81 	bl	80083a0 <lwip_htons>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	461a      	mov	r2, r3
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	2200      	movs	r2, #0
 800feaa:	719a      	strb	r2, [r3, #6]
 800feac:	2200      	movs	r2, #0
 800feae:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800feb0:	69fb      	ldr	r3, [r7, #28]
 800feb2:	891b      	ldrh	r3, [r3, #8]
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7f8 fa73 	bl	80083a0 <lwip_htons>
 800feba:	4603      	mov	r3, r0
 800febc:	461a      	mov	r2, r3
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800fec2:	2311      	movs	r3, #17
 800fec4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	7adb      	ldrb	r3, [r3, #11]
 800feca:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	7a9b      	ldrb	r3, [r3, #10]
 800fed0:	7cb9      	ldrb	r1, [r7, #18]
 800fed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fed4:	9202      	str	r2, [sp, #8]
 800fed6:	7cfa      	ldrb	r2, [r7, #19]
 800fed8:	9201      	str	r2, [sp, #4]
 800feda:	9300      	str	r3, [sp, #0]
 800fedc:	460b      	mov	r3, r1
 800fede:	687a      	ldr	r2, [r7, #4]
 800fee0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fee2:	69f8      	ldr	r0, [r7, #28]
 800fee4:	f001 fc52 	bl	801178c <ip4_output_if_src>
 800fee8:	4603      	mov	r3, r0
 800feea:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800feec:	69fa      	ldr	r2, [r7, #28]
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d004      	beq.n	800fefe <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800fef4:	69f8      	ldr	r0, [r7, #28]
 800fef6:	f7f9 fee9 	bl	8009ccc <pbuf_free>
    q = NULL;
 800fefa:	2300      	movs	r3, #0
 800fefc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800fefe:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	3720      	adds	r7, #32
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	08015bc4 	.word	0x08015bc4
 800ff10:	08015db0 	.word	0x08015db0
 800ff14:	08015c18 	.word	0x08015c18
 800ff18:	08015dd0 	.word	0x08015dd0
 800ff1c:	08015df0 	.word	0x08015df0
 800ff20:	08015e14 	.word	0x08015e14
 800ff24:	08015e38 	.word	0x08015e38
 800ff28:	08015e5c 	.word	0x08015e5c

0800ff2c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b086      	sub	sp, #24
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	60f8      	str	r0, [r7, #12]
 800ff34:	60b9      	str	r1, [r7, #8]
 800ff36:	4613      	mov	r3, r2
 800ff38:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d101      	bne.n	800ff44 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800ff40:	4b39      	ldr	r3, [pc, #228]	; (8010028 <udp_bind+0xfc>)
 800ff42:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d109      	bne.n	800ff5e <udp_bind+0x32>
 800ff4a:	4b38      	ldr	r3, [pc, #224]	; (801002c <udp_bind+0x100>)
 800ff4c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800ff50:	4937      	ldr	r1, [pc, #220]	; (8010030 <udp_bind+0x104>)
 800ff52:	4838      	ldr	r0, [pc, #224]	; (8010034 <udp_bind+0x108>)
 800ff54:	f002 fe22 	bl	8012b9c <iprintf>
 800ff58:	f06f 030f 	mvn.w	r3, #15
 800ff5c:	e060      	b.n	8010020 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ff62:	4b35      	ldr	r3, [pc, #212]	; (8010038 <udp_bind+0x10c>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	617b      	str	r3, [r7, #20]
 800ff68:	e009      	b.n	800ff7e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ff6a:	68fa      	ldr	r2, [r7, #12]
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	d102      	bne.n	800ff78 <udp_bind+0x4c>
      rebind = 1;
 800ff72:	2301      	movs	r3, #1
 800ff74:	74fb      	strb	r3, [r7, #19]
      break;
 800ff76:	e005      	b.n	800ff84 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	68db      	ldr	r3, [r3, #12]
 800ff7c:	617b      	str	r3, [r7, #20]
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d1f2      	bne.n	800ff6a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800ff84:	88fb      	ldrh	r3, [r7, #6]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d109      	bne.n	800ff9e <udp_bind+0x72>
    port = udp_new_port();
 800ff8a:	f7ff fc31 	bl	800f7f0 <udp_new_port>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ff92:	88fb      	ldrh	r3, [r7, #6]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d12c      	bne.n	800fff2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800ff98:	f06f 0307 	mvn.w	r3, #7
 800ff9c:	e040      	b.n	8010020 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ff9e:	4b26      	ldr	r3, [pc, #152]	; (8010038 <udp_bind+0x10c>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	617b      	str	r3, [r7, #20]
 800ffa4:	e022      	b.n	800ffec <udp_bind+0xc0>
      if (pcb != ipcb) {
 800ffa6:	68fa      	ldr	r2, [r7, #12]
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d01b      	beq.n	800ffe6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	8a5b      	ldrh	r3, [r3, #18]
 800ffb2:	88fa      	ldrh	r2, [r7, #6]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d116      	bne.n	800ffe6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	d00d      	beq.n	800ffe0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d00a      	beq.n	800ffe0 <udp_bind+0xb4>
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d006      	beq.n	800ffe0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ffd2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d003      	beq.n	800ffe0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d102      	bne.n	800ffe6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ffe0:	f06f 0307 	mvn.w	r3, #7
 800ffe4:	e01c      	b.n	8010020 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	68db      	ldr	r3, [r3, #12]
 800ffea:	617b      	str	r3, [r7, #20]
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d1d9      	bne.n	800ffa6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d002      	beq.n	800fffe <udp_bind+0xd2>
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	e000      	b.n	8010000 <udp_bind+0xd4>
 800fffe:	2300      	movs	r3, #0
 8010000:	68fa      	ldr	r2, [r7, #12]
 8010002:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	88fa      	ldrh	r2, [r7, #6]
 8010008:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801000a:	7cfb      	ldrb	r3, [r7, #19]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d106      	bne.n	801001e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010010:	4b09      	ldr	r3, [pc, #36]	; (8010038 <udp_bind+0x10c>)
 8010012:	681a      	ldr	r2, [r3, #0]
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010018:	4a07      	ldr	r2, [pc, #28]	; (8010038 <udp_bind+0x10c>)
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801001e:	2300      	movs	r3, #0
}
 8010020:	4618      	mov	r0, r3
 8010022:	3718      	adds	r7, #24
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}
 8010028:	08016718 	.word	0x08016718
 801002c:	08015bc4 	.word	0x08015bc4
 8010030:	08015e8c 	.word	0x08015e8c
 8010034:	08015c18 	.word	0x08015c18
 8010038:	2400bd4c 	.word	0x2400bd4c

0801003c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b086      	sub	sp, #24
 8010040:	af00      	add	r7, sp, #0
 8010042:	60f8      	str	r0, [r7, #12]
 8010044:	60b9      	str	r1, [r7, #8]
 8010046:	4613      	mov	r3, r2
 8010048:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d109      	bne.n	8010064 <udp_connect+0x28>
 8010050:	4b2c      	ldr	r3, [pc, #176]	; (8010104 <udp_connect+0xc8>)
 8010052:	f240 4235 	movw	r2, #1077	; 0x435
 8010056:	492c      	ldr	r1, [pc, #176]	; (8010108 <udp_connect+0xcc>)
 8010058:	482c      	ldr	r0, [pc, #176]	; (801010c <udp_connect+0xd0>)
 801005a:	f002 fd9f 	bl	8012b9c <iprintf>
 801005e:	f06f 030f 	mvn.w	r3, #15
 8010062:	e04b      	b.n	80100fc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d109      	bne.n	801007e <udp_connect+0x42>
 801006a:	4b26      	ldr	r3, [pc, #152]	; (8010104 <udp_connect+0xc8>)
 801006c:	f240 4236 	movw	r2, #1078	; 0x436
 8010070:	4927      	ldr	r1, [pc, #156]	; (8010110 <udp_connect+0xd4>)
 8010072:	4826      	ldr	r0, [pc, #152]	; (801010c <udp_connect+0xd0>)
 8010074:	f002 fd92 	bl	8012b9c <iprintf>
 8010078:	f06f 030f 	mvn.w	r3, #15
 801007c:	e03e      	b.n	80100fc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	8a5b      	ldrh	r3, [r3, #18]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d10f      	bne.n	80100a6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010086:	68f9      	ldr	r1, [r7, #12]
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	8a5b      	ldrh	r3, [r3, #18]
 801008c:	461a      	mov	r2, r3
 801008e:	68f8      	ldr	r0, [r7, #12]
 8010090:	f7ff ff4c 	bl	800ff2c <udp_bind>
 8010094:	4603      	mov	r3, r0
 8010096:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010098:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d002      	beq.n	80100a6 <udp_connect+0x6a>
      return err;
 80100a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80100a4:	e02a      	b.n	80100fc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d002      	beq.n	80100b2 <udp_connect+0x76>
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	e000      	b.n	80100b4 <udp_connect+0x78>
 80100b2:	2300      	movs	r3, #0
 80100b4:	68fa      	ldr	r2, [r7, #12]
 80100b6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	88fa      	ldrh	r2, [r7, #6]
 80100bc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	7c1b      	ldrb	r3, [r3, #16]
 80100c2:	f043 0304 	orr.w	r3, r3, #4
 80100c6:	b2da      	uxtb	r2, r3
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80100cc:	4b11      	ldr	r3, [pc, #68]	; (8010114 <udp_connect+0xd8>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	617b      	str	r3, [r7, #20]
 80100d2:	e008      	b.n	80100e6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80100d4:	68fa      	ldr	r2, [r7, #12]
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	429a      	cmp	r2, r3
 80100da:	d101      	bne.n	80100e0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80100dc:	2300      	movs	r3, #0
 80100de:	e00d      	b.n	80100fc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	68db      	ldr	r3, [r3, #12]
 80100e4:	617b      	str	r3, [r7, #20]
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d1f3      	bne.n	80100d4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80100ec:	4b09      	ldr	r3, [pc, #36]	; (8010114 <udp_connect+0xd8>)
 80100ee:	681a      	ldr	r2, [r3, #0]
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80100f4:	4a07      	ldr	r2, [pc, #28]	; (8010114 <udp_connect+0xd8>)
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80100fa:	2300      	movs	r3, #0
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3718      	adds	r7, #24
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	08015bc4 	.word	0x08015bc4
 8010108:	08015ea4 	.word	0x08015ea4
 801010c:	08015c18 	.word	0x08015c18
 8010110:	08015ec0 	.word	0x08015ec0
 8010114:	2400bd4c 	.word	0x2400bd4c

08010118 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801011e:	2000      	movs	r0, #0
 8010120:	f7f8 febc 	bl	8008e9c <memp_malloc>
 8010124:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d007      	beq.n	801013c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801012c:	2220      	movs	r2, #32
 801012e:	2100      	movs	r1, #0
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f002 fd98 	bl	8012c66 <memset>
    pcb->ttl = UDP_TTL;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	22ff      	movs	r2, #255	; 0xff
 801013a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801013c:	687b      	ldr	r3, [r7, #4]
}
 801013e:	4618      	mov	r0, r3
 8010140:	3708      	adds	r7, #8
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}
	...

08010148 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010148:	b480      	push	{r7}
 801014a:	b085      	sub	sp, #20
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
 8010150:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d01e      	beq.n	8010196 <udp_netif_ip_addr_changed+0x4e>
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d01a      	beq.n	8010196 <udp_netif_ip_addr_changed+0x4e>
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d017      	beq.n	8010196 <udp_netif_ip_addr_changed+0x4e>
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d013      	beq.n	8010196 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801016e:	4b0d      	ldr	r3, [pc, #52]	; (80101a4 <udp_netif_ip_addr_changed+0x5c>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	60fb      	str	r3, [r7, #12]
 8010174:	e00c      	b.n	8010190 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681a      	ldr	r2, [r3, #0]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	429a      	cmp	r2, r3
 8010180:	d103      	bne.n	801018a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	681a      	ldr	r2, [r3, #0]
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	60fb      	str	r3, [r7, #12]
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d1ef      	bne.n	8010176 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010196:	bf00      	nop
 8010198:	3714      	adds	r7, #20
 801019a:	46bd      	mov	sp, r7
 801019c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a0:	4770      	bx	lr
 80101a2:	bf00      	nop
 80101a4:	2400bd4c 	.word	0x2400bd4c

080101a8 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 80101a8:	b480      	push	{r7}
 80101aa:	b083      	sub	sp, #12
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
}
 80101b0:	bf00      	nop
 80101b2:	370c      	adds	r7, #12
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr

080101bc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b082      	sub	sp, #8
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80101c4:	4915      	ldr	r1, [pc, #84]	; (801021c <etharp_free_entry+0x60>)
 80101c6:	687a      	ldr	r2, [r7, #4]
 80101c8:	4613      	mov	r3, r2
 80101ca:	005b      	lsls	r3, r3, #1
 80101cc:	4413      	add	r3, r2
 80101ce:	00db      	lsls	r3, r3, #3
 80101d0:	440b      	add	r3, r1
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d013      	beq.n	8010200 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80101d8:	4910      	ldr	r1, [pc, #64]	; (801021c <etharp_free_entry+0x60>)
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	4613      	mov	r3, r2
 80101de:	005b      	lsls	r3, r3, #1
 80101e0:	4413      	add	r3, r2
 80101e2:	00db      	lsls	r3, r3, #3
 80101e4:	440b      	add	r3, r1
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7f9 fd6f 	bl	8009ccc <pbuf_free>
    arp_table[i].q = NULL;
 80101ee:	490b      	ldr	r1, [pc, #44]	; (801021c <etharp_free_entry+0x60>)
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	4613      	mov	r3, r2
 80101f4:	005b      	lsls	r3, r3, #1
 80101f6:	4413      	add	r3, r2
 80101f8:	00db      	lsls	r3, r3, #3
 80101fa:	440b      	add	r3, r1
 80101fc:	2200      	movs	r2, #0
 80101fe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010200:	4906      	ldr	r1, [pc, #24]	; (801021c <etharp_free_entry+0x60>)
 8010202:	687a      	ldr	r2, [r7, #4]
 8010204:	4613      	mov	r3, r2
 8010206:	005b      	lsls	r3, r3, #1
 8010208:	4413      	add	r3, r2
 801020a:	00db      	lsls	r3, r3, #3
 801020c:	440b      	add	r3, r1
 801020e:	3314      	adds	r3, #20
 8010210:	2200      	movs	r2, #0
 8010212:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010214:	bf00      	nop
 8010216:	3708      	adds	r7, #8
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	2400bd50 	.word	0x2400bd50

08010220 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010226:	2300      	movs	r3, #0
 8010228:	607b      	str	r3, [r7, #4]
 801022a:	e096      	b.n	801035a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801022c:	494f      	ldr	r1, [pc, #316]	; (801036c <etharp_tmr+0x14c>)
 801022e:	687a      	ldr	r2, [r7, #4]
 8010230:	4613      	mov	r3, r2
 8010232:	005b      	lsls	r3, r3, #1
 8010234:	4413      	add	r3, r2
 8010236:	00db      	lsls	r3, r3, #3
 8010238:	440b      	add	r3, r1
 801023a:	3314      	adds	r3, #20
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010240:	78fb      	ldrb	r3, [r7, #3]
 8010242:	2b00      	cmp	r3, #0
 8010244:	f000 8086 	beq.w	8010354 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010248:	4948      	ldr	r1, [pc, #288]	; (801036c <etharp_tmr+0x14c>)
 801024a:	687a      	ldr	r2, [r7, #4]
 801024c:	4613      	mov	r3, r2
 801024e:	005b      	lsls	r3, r3, #1
 8010250:	4413      	add	r3, r2
 8010252:	00db      	lsls	r3, r3, #3
 8010254:	440b      	add	r3, r1
 8010256:	3312      	adds	r3, #18
 8010258:	881b      	ldrh	r3, [r3, #0]
 801025a:	3301      	adds	r3, #1
 801025c:	b298      	uxth	r0, r3
 801025e:	4943      	ldr	r1, [pc, #268]	; (801036c <etharp_tmr+0x14c>)
 8010260:	687a      	ldr	r2, [r7, #4]
 8010262:	4613      	mov	r3, r2
 8010264:	005b      	lsls	r3, r3, #1
 8010266:	4413      	add	r3, r2
 8010268:	00db      	lsls	r3, r3, #3
 801026a:	440b      	add	r3, r1
 801026c:	3312      	adds	r3, #18
 801026e:	4602      	mov	r2, r0
 8010270:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010272:	493e      	ldr	r1, [pc, #248]	; (801036c <etharp_tmr+0x14c>)
 8010274:	687a      	ldr	r2, [r7, #4]
 8010276:	4613      	mov	r3, r2
 8010278:	005b      	lsls	r3, r3, #1
 801027a:	4413      	add	r3, r2
 801027c:	00db      	lsls	r3, r3, #3
 801027e:	440b      	add	r3, r1
 8010280:	3312      	adds	r3, #18
 8010282:	881b      	ldrh	r3, [r3, #0]
 8010284:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010288:	d215      	bcs.n	80102b6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801028a:	4938      	ldr	r1, [pc, #224]	; (801036c <etharp_tmr+0x14c>)
 801028c:	687a      	ldr	r2, [r7, #4]
 801028e:	4613      	mov	r3, r2
 8010290:	005b      	lsls	r3, r3, #1
 8010292:	4413      	add	r3, r2
 8010294:	00db      	lsls	r3, r3, #3
 8010296:	440b      	add	r3, r1
 8010298:	3314      	adds	r3, #20
 801029a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801029c:	2b01      	cmp	r3, #1
 801029e:	d10e      	bne.n	80102be <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80102a0:	4932      	ldr	r1, [pc, #200]	; (801036c <etharp_tmr+0x14c>)
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	4613      	mov	r3, r2
 80102a6:	005b      	lsls	r3, r3, #1
 80102a8:	4413      	add	r3, r2
 80102aa:	00db      	lsls	r3, r3, #3
 80102ac:	440b      	add	r3, r1
 80102ae:	3312      	adds	r3, #18
 80102b0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80102b2:	2b04      	cmp	r3, #4
 80102b4:	d903      	bls.n	80102be <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f7ff ff80 	bl	80101bc <etharp_free_entry>
 80102bc:	e04a      	b.n	8010354 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80102be:	492b      	ldr	r1, [pc, #172]	; (801036c <etharp_tmr+0x14c>)
 80102c0:	687a      	ldr	r2, [r7, #4]
 80102c2:	4613      	mov	r3, r2
 80102c4:	005b      	lsls	r3, r3, #1
 80102c6:	4413      	add	r3, r2
 80102c8:	00db      	lsls	r3, r3, #3
 80102ca:	440b      	add	r3, r1
 80102cc:	3314      	adds	r3, #20
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	2b03      	cmp	r3, #3
 80102d2:	d10a      	bne.n	80102ea <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80102d4:	4925      	ldr	r1, [pc, #148]	; (801036c <etharp_tmr+0x14c>)
 80102d6:	687a      	ldr	r2, [r7, #4]
 80102d8:	4613      	mov	r3, r2
 80102da:	005b      	lsls	r3, r3, #1
 80102dc:	4413      	add	r3, r2
 80102de:	00db      	lsls	r3, r3, #3
 80102e0:	440b      	add	r3, r1
 80102e2:	3314      	adds	r3, #20
 80102e4:	2204      	movs	r2, #4
 80102e6:	701a      	strb	r2, [r3, #0]
 80102e8:	e034      	b.n	8010354 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80102ea:	4920      	ldr	r1, [pc, #128]	; (801036c <etharp_tmr+0x14c>)
 80102ec:	687a      	ldr	r2, [r7, #4]
 80102ee:	4613      	mov	r3, r2
 80102f0:	005b      	lsls	r3, r3, #1
 80102f2:	4413      	add	r3, r2
 80102f4:	00db      	lsls	r3, r3, #3
 80102f6:	440b      	add	r3, r1
 80102f8:	3314      	adds	r3, #20
 80102fa:	781b      	ldrb	r3, [r3, #0]
 80102fc:	2b04      	cmp	r3, #4
 80102fe:	d10a      	bne.n	8010316 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010300:	491a      	ldr	r1, [pc, #104]	; (801036c <etharp_tmr+0x14c>)
 8010302:	687a      	ldr	r2, [r7, #4]
 8010304:	4613      	mov	r3, r2
 8010306:	005b      	lsls	r3, r3, #1
 8010308:	4413      	add	r3, r2
 801030a:	00db      	lsls	r3, r3, #3
 801030c:	440b      	add	r3, r1
 801030e:	3314      	adds	r3, #20
 8010310:	2202      	movs	r2, #2
 8010312:	701a      	strb	r2, [r3, #0]
 8010314:	e01e      	b.n	8010354 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010316:	4915      	ldr	r1, [pc, #84]	; (801036c <etharp_tmr+0x14c>)
 8010318:	687a      	ldr	r2, [r7, #4]
 801031a:	4613      	mov	r3, r2
 801031c:	005b      	lsls	r3, r3, #1
 801031e:	4413      	add	r3, r2
 8010320:	00db      	lsls	r3, r3, #3
 8010322:	440b      	add	r3, r1
 8010324:	3314      	adds	r3, #20
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	2b01      	cmp	r3, #1
 801032a:	d113      	bne.n	8010354 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801032c:	490f      	ldr	r1, [pc, #60]	; (801036c <etharp_tmr+0x14c>)
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	4613      	mov	r3, r2
 8010332:	005b      	lsls	r3, r3, #1
 8010334:	4413      	add	r3, r2
 8010336:	00db      	lsls	r3, r3, #3
 8010338:	440b      	add	r3, r1
 801033a:	3308      	adds	r3, #8
 801033c:	6818      	ldr	r0, [r3, #0]
 801033e:	687a      	ldr	r2, [r7, #4]
 8010340:	4613      	mov	r3, r2
 8010342:	005b      	lsls	r3, r3, #1
 8010344:	4413      	add	r3, r2
 8010346:	00db      	lsls	r3, r3, #3
 8010348:	4a08      	ldr	r2, [pc, #32]	; (801036c <etharp_tmr+0x14c>)
 801034a:	4413      	add	r3, r2
 801034c:	3304      	adds	r3, #4
 801034e:	4619      	mov	r1, r3
 8010350:	f000 fe6e 	bl	8011030 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	3301      	adds	r3, #1
 8010358:	607b      	str	r3, [r7, #4]
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2b09      	cmp	r3, #9
 801035e:	f77f af65 	ble.w	801022c <etharp_tmr+0xc>
      }
    }
  }
}
 8010362:	bf00      	nop
 8010364:	bf00      	nop
 8010366:	3708      	adds	r7, #8
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}
 801036c:	2400bd50 	.word	0x2400bd50

08010370 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b08a      	sub	sp, #40	; 0x28
 8010374:	af00      	add	r7, sp, #0
 8010376:	60f8      	str	r0, [r7, #12]
 8010378:	460b      	mov	r3, r1
 801037a:	607a      	str	r2, [r7, #4]
 801037c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801037e:	230a      	movs	r3, #10
 8010380:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010382:	230a      	movs	r3, #10
 8010384:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010386:	230a      	movs	r3, #10
 8010388:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801038a:	2300      	movs	r3, #0
 801038c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801038e:	230a      	movs	r3, #10
 8010390:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010392:	2300      	movs	r3, #0
 8010394:	83bb      	strh	r3, [r7, #28]
 8010396:	2300      	movs	r3, #0
 8010398:	837b      	strh	r3, [r7, #26]
 801039a:	2300      	movs	r3, #0
 801039c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801039e:	2300      	movs	r3, #0
 80103a0:	843b      	strh	r3, [r7, #32]
 80103a2:	e0ae      	b.n	8010502 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80103a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80103a8:	49a6      	ldr	r1, [pc, #664]	; (8010644 <etharp_find_entry+0x2d4>)
 80103aa:	4613      	mov	r3, r2
 80103ac:	005b      	lsls	r3, r3, #1
 80103ae:	4413      	add	r3, r2
 80103b0:	00db      	lsls	r3, r3, #3
 80103b2:	440b      	add	r3, r1
 80103b4:	3314      	adds	r3, #20
 80103b6:	781b      	ldrb	r3, [r3, #0]
 80103b8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80103ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80103be:	2b0a      	cmp	r3, #10
 80103c0:	d105      	bne.n	80103ce <etharp_find_entry+0x5e>
 80103c2:	7dfb      	ldrb	r3, [r7, #23]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d102      	bne.n	80103ce <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80103c8:	8c3b      	ldrh	r3, [r7, #32]
 80103ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80103cc:	e095      	b.n	80104fa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80103ce:	7dfb      	ldrb	r3, [r7, #23]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	f000 8092 	beq.w	80104fa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80103d6:	7dfb      	ldrb	r3, [r7, #23]
 80103d8:	2b01      	cmp	r3, #1
 80103da:	d009      	beq.n	80103f0 <etharp_find_entry+0x80>
 80103dc:	7dfb      	ldrb	r3, [r7, #23]
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d806      	bhi.n	80103f0 <etharp_find_entry+0x80>
 80103e2:	4b99      	ldr	r3, [pc, #612]	; (8010648 <etharp_find_entry+0x2d8>)
 80103e4:	f240 1223 	movw	r2, #291	; 0x123
 80103e8:	4998      	ldr	r1, [pc, #608]	; (801064c <etharp_find_entry+0x2dc>)
 80103ea:	4899      	ldr	r0, [pc, #612]	; (8010650 <etharp_find_entry+0x2e0>)
 80103ec:	f002 fbd6 	bl	8012b9c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d020      	beq.n	8010438 <etharp_find_entry+0xc8>
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	6819      	ldr	r1, [r3, #0]
 80103fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80103fe:	4891      	ldr	r0, [pc, #580]	; (8010644 <etharp_find_entry+0x2d4>)
 8010400:	4613      	mov	r3, r2
 8010402:	005b      	lsls	r3, r3, #1
 8010404:	4413      	add	r3, r2
 8010406:	00db      	lsls	r3, r3, #3
 8010408:	4403      	add	r3, r0
 801040a:	3304      	adds	r3, #4
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	4299      	cmp	r1, r3
 8010410:	d112      	bne.n	8010438 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d00c      	beq.n	8010432 <etharp_find_entry+0xc2>
 8010418:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801041c:	4989      	ldr	r1, [pc, #548]	; (8010644 <etharp_find_entry+0x2d4>)
 801041e:	4613      	mov	r3, r2
 8010420:	005b      	lsls	r3, r3, #1
 8010422:	4413      	add	r3, r2
 8010424:	00db      	lsls	r3, r3, #3
 8010426:	440b      	add	r3, r1
 8010428:	3308      	adds	r3, #8
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	687a      	ldr	r2, [r7, #4]
 801042e:	429a      	cmp	r2, r3
 8010430:	d102      	bne.n	8010438 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010432:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010436:	e100      	b.n	801063a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010438:	7dfb      	ldrb	r3, [r7, #23]
 801043a:	2b01      	cmp	r3, #1
 801043c:	d140      	bne.n	80104c0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801043e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010442:	4980      	ldr	r1, [pc, #512]	; (8010644 <etharp_find_entry+0x2d4>)
 8010444:	4613      	mov	r3, r2
 8010446:	005b      	lsls	r3, r3, #1
 8010448:	4413      	add	r3, r2
 801044a:	00db      	lsls	r3, r3, #3
 801044c:	440b      	add	r3, r1
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d01a      	beq.n	801048a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010454:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010458:	497a      	ldr	r1, [pc, #488]	; (8010644 <etharp_find_entry+0x2d4>)
 801045a:	4613      	mov	r3, r2
 801045c:	005b      	lsls	r3, r3, #1
 801045e:	4413      	add	r3, r2
 8010460:	00db      	lsls	r3, r3, #3
 8010462:	440b      	add	r3, r1
 8010464:	3312      	adds	r3, #18
 8010466:	881b      	ldrh	r3, [r3, #0]
 8010468:	8bba      	ldrh	r2, [r7, #28]
 801046a:	429a      	cmp	r2, r3
 801046c:	d845      	bhi.n	80104fa <etharp_find_entry+0x18a>
            old_queue = i;
 801046e:	8c3b      	ldrh	r3, [r7, #32]
 8010470:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010472:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010476:	4973      	ldr	r1, [pc, #460]	; (8010644 <etharp_find_entry+0x2d4>)
 8010478:	4613      	mov	r3, r2
 801047a:	005b      	lsls	r3, r3, #1
 801047c:	4413      	add	r3, r2
 801047e:	00db      	lsls	r3, r3, #3
 8010480:	440b      	add	r3, r1
 8010482:	3312      	adds	r3, #18
 8010484:	881b      	ldrh	r3, [r3, #0]
 8010486:	83bb      	strh	r3, [r7, #28]
 8010488:	e037      	b.n	80104fa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801048a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801048e:	496d      	ldr	r1, [pc, #436]	; (8010644 <etharp_find_entry+0x2d4>)
 8010490:	4613      	mov	r3, r2
 8010492:	005b      	lsls	r3, r3, #1
 8010494:	4413      	add	r3, r2
 8010496:	00db      	lsls	r3, r3, #3
 8010498:	440b      	add	r3, r1
 801049a:	3312      	adds	r3, #18
 801049c:	881b      	ldrh	r3, [r3, #0]
 801049e:	8b7a      	ldrh	r2, [r7, #26]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d82a      	bhi.n	80104fa <etharp_find_entry+0x18a>
            old_pending = i;
 80104a4:	8c3b      	ldrh	r3, [r7, #32]
 80104a6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80104a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104ac:	4965      	ldr	r1, [pc, #404]	; (8010644 <etharp_find_entry+0x2d4>)
 80104ae:	4613      	mov	r3, r2
 80104b0:	005b      	lsls	r3, r3, #1
 80104b2:	4413      	add	r3, r2
 80104b4:	00db      	lsls	r3, r3, #3
 80104b6:	440b      	add	r3, r1
 80104b8:	3312      	adds	r3, #18
 80104ba:	881b      	ldrh	r3, [r3, #0]
 80104bc:	837b      	strh	r3, [r7, #26]
 80104be:	e01c      	b.n	80104fa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80104c0:	7dfb      	ldrb	r3, [r7, #23]
 80104c2:	2b01      	cmp	r3, #1
 80104c4:	d919      	bls.n	80104fa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80104c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104ca:	495e      	ldr	r1, [pc, #376]	; (8010644 <etharp_find_entry+0x2d4>)
 80104cc:	4613      	mov	r3, r2
 80104ce:	005b      	lsls	r3, r3, #1
 80104d0:	4413      	add	r3, r2
 80104d2:	00db      	lsls	r3, r3, #3
 80104d4:	440b      	add	r3, r1
 80104d6:	3312      	adds	r3, #18
 80104d8:	881b      	ldrh	r3, [r3, #0]
 80104da:	8b3a      	ldrh	r2, [r7, #24]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d80c      	bhi.n	80104fa <etharp_find_entry+0x18a>
            old_stable = i;
 80104e0:	8c3b      	ldrh	r3, [r7, #32]
 80104e2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80104e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104e8:	4956      	ldr	r1, [pc, #344]	; (8010644 <etharp_find_entry+0x2d4>)
 80104ea:	4613      	mov	r3, r2
 80104ec:	005b      	lsls	r3, r3, #1
 80104ee:	4413      	add	r3, r2
 80104f0:	00db      	lsls	r3, r3, #3
 80104f2:	440b      	add	r3, r1
 80104f4:	3312      	adds	r3, #18
 80104f6:	881b      	ldrh	r3, [r3, #0]
 80104f8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80104fa:	8c3b      	ldrh	r3, [r7, #32]
 80104fc:	3301      	adds	r3, #1
 80104fe:	b29b      	uxth	r3, r3
 8010500:	843b      	strh	r3, [r7, #32]
 8010502:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010506:	2b09      	cmp	r3, #9
 8010508:	f77f af4c 	ble.w	80103a4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801050c:	7afb      	ldrb	r3, [r7, #11]
 801050e:	f003 0302 	and.w	r3, r3, #2
 8010512:	2b00      	cmp	r3, #0
 8010514:	d108      	bne.n	8010528 <etharp_find_entry+0x1b8>
 8010516:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801051a:	2b0a      	cmp	r3, #10
 801051c:	d107      	bne.n	801052e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801051e:	7afb      	ldrb	r3, [r7, #11]
 8010520:	f003 0301 	and.w	r3, r3, #1
 8010524:	2b00      	cmp	r3, #0
 8010526:	d102      	bne.n	801052e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801052c:	e085      	b.n	801063a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801052e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010532:	2b09      	cmp	r3, #9
 8010534:	dc02      	bgt.n	801053c <etharp_find_entry+0x1cc>
    i = empty;
 8010536:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010538:	843b      	strh	r3, [r7, #32]
 801053a:	e039      	b.n	80105b0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801053c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010540:	2b09      	cmp	r3, #9
 8010542:	dc14      	bgt.n	801056e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010544:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010546:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010548:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801054c:	493d      	ldr	r1, [pc, #244]	; (8010644 <etharp_find_entry+0x2d4>)
 801054e:	4613      	mov	r3, r2
 8010550:	005b      	lsls	r3, r3, #1
 8010552:	4413      	add	r3, r2
 8010554:	00db      	lsls	r3, r3, #3
 8010556:	440b      	add	r3, r1
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d018      	beq.n	8010590 <etharp_find_entry+0x220>
 801055e:	4b3a      	ldr	r3, [pc, #232]	; (8010648 <etharp_find_entry+0x2d8>)
 8010560:	f240 126d 	movw	r2, #365	; 0x16d
 8010564:	493b      	ldr	r1, [pc, #236]	; (8010654 <etharp_find_entry+0x2e4>)
 8010566:	483a      	ldr	r0, [pc, #232]	; (8010650 <etharp_find_entry+0x2e0>)
 8010568:	f002 fb18 	bl	8012b9c <iprintf>
 801056c:	e010      	b.n	8010590 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801056e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010572:	2b09      	cmp	r3, #9
 8010574:	dc02      	bgt.n	801057c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010576:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010578:	843b      	strh	r3, [r7, #32]
 801057a:	e009      	b.n	8010590 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801057c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010580:	2b09      	cmp	r3, #9
 8010582:	dc02      	bgt.n	801058a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010584:	8bfb      	ldrh	r3, [r7, #30]
 8010586:	843b      	strh	r3, [r7, #32]
 8010588:	e002      	b.n	8010590 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801058a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801058e:	e054      	b.n	801063a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010590:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010594:	2b09      	cmp	r3, #9
 8010596:	dd06      	ble.n	80105a6 <etharp_find_entry+0x236>
 8010598:	4b2b      	ldr	r3, [pc, #172]	; (8010648 <etharp_find_entry+0x2d8>)
 801059a:	f240 127f 	movw	r2, #383	; 0x17f
 801059e:	492e      	ldr	r1, [pc, #184]	; (8010658 <etharp_find_entry+0x2e8>)
 80105a0:	482b      	ldr	r0, [pc, #172]	; (8010650 <etharp_find_entry+0x2e0>)
 80105a2:	f002 fafb 	bl	8012b9c <iprintf>
    etharp_free_entry(i);
 80105a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7ff fe06 	bl	80101bc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80105b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80105b4:	2b09      	cmp	r3, #9
 80105b6:	dd06      	ble.n	80105c6 <etharp_find_entry+0x256>
 80105b8:	4b23      	ldr	r3, [pc, #140]	; (8010648 <etharp_find_entry+0x2d8>)
 80105ba:	f240 1283 	movw	r2, #387	; 0x183
 80105be:	4926      	ldr	r1, [pc, #152]	; (8010658 <etharp_find_entry+0x2e8>)
 80105c0:	4823      	ldr	r0, [pc, #140]	; (8010650 <etharp_find_entry+0x2e0>)
 80105c2:	f002 faeb 	bl	8012b9c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80105c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105ca:	491e      	ldr	r1, [pc, #120]	; (8010644 <etharp_find_entry+0x2d4>)
 80105cc:	4613      	mov	r3, r2
 80105ce:	005b      	lsls	r3, r3, #1
 80105d0:	4413      	add	r3, r2
 80105d2:	00db      	lsls	r3, r3, #3
 80105d4:	440b      	add	r3, r1
 80105d6:	3314      	adds	r3, #20
 80105d8:	781b      	ldrb	r3, [r3, #0]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d006      	beq.n	80105ec <etharp_find_entry+0x27c>
 80105de:	4b1a      	ldr	r3, [pc, #104]	; (8010648 <etharp_find_entry+0x2d8>)
 80105e0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80105e4:	491d      	ldr	r1, [pc, #116]	; (801065c <etharp_find_entry+0x2ec>)
 80105e6:	481a      	ldr	r0, [pc, #104]	; (8010650 <etharp_find_entry+0x2e0>)
 80105e8:	f002 fad8 	bl	8012b9c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d00b      	beq.n	801060a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80105f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	6819      	ldr	r1, [r3, #0]
 80105fa:	4812      	ldr	r0, [pc, #72]	; (8010644 <etharp_find_entry+0x2d4>)
 80105fc:	4613      	mov	r3, r2
 80105fe:	005b      	lsls	r3, r3, #1
 8010600:	4413      	add	r3, r2
 8010602:	00db      	lsls	r3, r3, #3
 8010604:	4403      	add	r3, r0
 8010606:	3304      	adds	r3, #4
 8010608:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801060a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801060e:	490d      	ldr	r1, [pc, #52]	; (8010644 <etharp_find_entry+0x2d4>)
 8010610:	4613      	mov	r3, r2
 8010612:	005b      	lsls	r3, r3, #1
 8010614:	4413      	add	r3, r2
 8010616:	00db      	lsls	r3, r3, #3
 8010618:	440b      	add	r3, r1
 801061a:	3312      	adds	r3, #18
 801061c:	2200      	movs	r2, #0
 801061e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010620:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010624:	4907      	ldr	r1, [pc, #28]	; (8010644 <etharp_find_entry+0x2d4>)
 8010626:	4613      	mov	r3, r2
 8010628:	005b      	lsls	r3, r3, #1
 801062a:	4413      	add	r3, r2
 801062c:	00db      	lsls	r3, r3, #3
 801062e:	440b      	add	r3, r1
 8010630:	3308      	adds	r3, #8
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010636:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801063a:	4618      	mov	r0, r3
 801063c:	3728      	adds	r7, #40	; 0x28
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}
 8010642:	bf00      	nop
 8010644:	2400bd50 	.word	0x2400bd50
 8010648:	08015f28 	.word	0x08015f28
 801064c:	08015f60 	.word	0x08015f60
 8010650:	08015fa0 	.word	0x08015fa0
 8010654:	08015fc8 	.word	0x08015fc8
 8010658:	08015fe0 	.word	0x08015fe0
 801065c:	08015ff4 	.word	0x08015ff4

08010660 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b088      	sub	sp, #32
 8010664:	af02      	add	r7, sp, #8
 8010666:	60f8      	str	r0, [r7, #12]
 8010668:	60b9      	str	r1, [r7, #8]
 801066a:	607a      	str	r2, [r7, #4]
 801066c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010674:	2b06      	cmp	r3, #6
 8010676:	d006      	beq.n	8010686 <etharp_update_arp_entry+0x26>
 8010678:	4b48      	ldr	r3, [pc, #288]	; (801079c <etharp_update_arp_entry+0x13c>)
 801067a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801067e:	4948      	ldr	r1, [pc, #288]	; (80107a0 <etharp_update_arp_entry+0x140>)
 8010680:	4848      	ldr	r0, [pc, #288]	; (80107a4 <etharp_update_arp_entry+0x144>)
 8010682:	f002 fa8b 	bl	8012b9c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d012      	beq.n	80106b2 <etharp_update_arp_entry+0x52>
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d00e      	beq.n	80106b2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	68f9      	ldr	r1, [r7, #12]
 801069a:	4618      	mov	r0, r3
 801069c:	f001 f924 	bl	80118e8 <ip4_addr_isbroadcast_u32>
 80106a0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d105      	bne.n	80106b2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80106ae:	2be0      	cmp	r3, #224	; 0xe0
 80106b0:	d102      	bne.n	80106b8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80106b2:	f06f 030f 	mvn.w	r3, #15
 80106b6:	e06c      	b.n	8010792 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80106b8:	78fb      	ldrb	r3, [r7, #3]
 80106ba:	68fa      	ldr	r2, [r7, #12]
 80106bc:	4619      	mov	r1, r3
 80106be:	68b8      	ldr	r0, [r7, #8]
 80106c0:	f7ff fe56 	bl	8010370 <etharp_find_entry>
 80106c4:	4603      	mov	r3, r0
 80106c6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80106c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	da02      	bge.n	80106d6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80106d0:	8afb      	ldrh	r3, [r7, #22]
 80106d2:	b25b      	sxtb	r3, r3
 80106d4:	e05d      	b.n	8010792 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80106d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80106da:	4933      	ldr	r1, [pc, #204]	; (80107a8 <etharp_update_arp_entry+0x148>)
 80106dc:	4613      	mov	r3, r2
 80106de:	005b      	lsls	r3, r3, #1
 80106e0:	4413      	add	r3, r2
 80106e2:	00db      	lsls	r3, r3, #3
 80106e4:	440b      	add	r3, r1
 80106e6:	3314      	adds	r3, #20
 80106e8:	2202      	movs	r2, #2
 80106ea:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80106ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80106f0:	492d      	ldr	r1, [pc, #180]	; (80107a8 <etharp_update_arp_entry+0x148>)
 80106f2:	4613      	mov	r3, r2
 80106f4:	005b      	lsls	r3, r3, #1
 80106f6:	4413      	add	r3, r2
 80106f8:	00db      	lsls	r3, r3, #3
 80106fa:	440b      	add	r3, r1
 80106fc:	3308      	adds	r3, #8
 80106fe:	68fa      	ldr	r2, [r7, #12]
 8010700:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010702:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010706:	4613      	mov	r3, r2
 8010708:	005b      	lsls	r3, r3, #1
 801070a:	4413      	add	r3, r2
 801070c:	00db      	lsls	r3, r3, #3
 801070e:	3308      	adds	r3, #8
 8010710:	4a25      	ldr	r2, [pc, #148]	; (80107a8 <etharp_update_arp_entry+0x148>)
 8010712:	4413      	add	r3, r2
 8010714:	3304      	adds	r3, #4
 8010716:	2206      	movs	r2, #6
 8010718:	6879      	ldr	r1, [r7, #4]
 801071a:	4618      	mov	r0, r3
 801071c:	f002 fb6e 	bl	8012dfc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010720:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010724:	4920      	ldr	r1, [pc, #128]	; (80107a8 <etharp_update_arp_entry+0x148>)
 8010726:	4613      	mov	r3, r2
 8010728:	005b      	lsls	r3, r3, #1
 801072a:	4413      	add	r3, r2
 801072c:	00db      	lsls	r3, r3, #3
 801072e:	440b      	add	r3, r1
 8010730:	3312      	adds	r3, #18
 8010732:	2200      	movs	r2, #0
 8010734:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010736:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801073a:	491b      	ldr	r1, [pc, #108]	; (80107a8 <etharp_update_arp_entry+0x148>)
 801073c:	4613      	mov	r3, r2
 801073e:	005b      	lsls	r3, r3, #1
 8010740:	4413      	add	r3, r2
 8010742:	00db      	lsls	r3, r3, #3
 8010744:	440b      	add	r3, r1
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d021      	beq.n	8010790 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801074c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010750:	4915      	ldr	r1, [pc, #84]	; (80107a8 <etharp_update_arp_entry+0x148>)
 8010752:	4613      	mov	r3, r2
 8010754:	005b      	lsls	r3, r3, #1
 8010756:	4413      	add	r3, r2
 8010758:	00db      	lsls	r3, r3, #3
 801075a:	440b      	add	r3, r1
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010760:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010764:	4910      	ldr	r1, [pc, #64]	; (80107a8 <etharp_update_arp_entry+0x148>)
 8010766:	4613      	mov	r3, r2
 8010768:	005b      	lsls	r3, r3, #1
 801076a:	4413      	add	r3, r2
 801076c:	00db      	lsls	r3, r3, #3
 801076e:	440b      	add	r3, r1
 8010770:	2200      	movs	r2, #0
 8010772:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801077a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801077e:	9300      	str	r3, [sp, #0]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	6939      	ldr	r1, [r7, #16]
 8010784:	68f8      	ldr	r0, [r7, #12]
 8010786:	f001 ffbd 	bl	8012704 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801078a:	6938      	ldr	r0, [r7, #16]
 801078c:	f7f9 fa9e 	bl	8009ccc <pbuf_free>
  }
  return ERR_OK;
 8010790:	2300      	movs	r3, #0
}
 8010792:	4618      	mov	r0, r3
 8010794:	3718      	adds	r7, #24
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	08015f28 	.word	0x08015f28
 80107a0:	08016020 	.word	0x08016020
 80107a4:	08015fa0 	.word	0x08015fa0
 80107a8:	2400bd50 	.word	0x2400bd50

080107ac <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b084      	sub	sp, #16
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80107b4:	2300      	movs	r3, #0
 80107b6:	60fb      	str	r3, [r7, #12]
 80107b8:	e01e      	b.n	80107f8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80107ba:	4913      	ldr	r1, [pc, #76]	; (8010808 <etharp_cleanup_netif+0x5c>)
 80107bc:	68fa      	ldr	r2, [r7, #12]
 80107be:	4613      	mov	r3, r2
 80107c0:	005b      	lsls	r3, r3, #1
 80107c2:	4413      	add	r3, r2
 80107c4:	00db      	lsls	r3, r3, #3
 80107c6:	440b      	add	r3, r1
 80107c8:	3314      	adds	r3, #20
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80107ce:	7afb      	ldrb	r3, [r7, #11]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d00e      	beq.n	80107f2 <etharp_cleanup_netif+0x46>
 80107d4:	490c      	ldr	r1, [pc, #48]	; (8010808 <etharp_cleanup_netif+0x5c>)
 80107d6:	68fa      	ldr	r2, [r7, #12]
 80107d8:	4613      	mov	r3, r2
 80107da:	005b      	lsls	r3, r3, #1
 80107dc:	4413      	add	r3, r2
 80107de:	00db      	lsls	r3, r3, #3
 80107e0:	440b      	add	r3, r1
 80107e2:	3308      	adds	r3, #8
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	687a      	ldr	r2, [r7, #4]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d102      	bne.n	80107f2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80107ec:	68f8      	ldr	r0, [r7, #12]
 80107ee:	f7ff fce5 	bl	80101bc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	3301      	adds	r3, #1
 80107f6:	60fb      	str	r3, [r7, #12]
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2b09      	cmp	r3, #9
 80107fc:	dddd      	ble.n	80107ba <etharp_cleanup_netif+0xe>
    }
  }
}
 80107fe:	bf00      	nop
 8010800:	bf00      	nop
 8010802:	3710      	adds	r7, #16
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}
 8010808:	2400bd50 	.word	0x2400bd50

0801080c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801080c:	b5b0      	push	{r4, r5, r7, lr}
 801080e:	b08a      	sub	sp, #40	; 0x28
 8010810:	af04      	add	r7, sp, #16
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d107      	bne.n	801082c <etharp_input+0x20>
 801081c:	4b3d      	ldr	r3, [pc, #244]	; (8010914 <etharp_input+0x108>)
 801081e:	f240 228a 	movw	r2, #650	; 0x28a
 8010822:	493d      	ldr	r1, [pc, #244]	; (8010918 <etharp_input+0x10c>)
 8010824:	483d      	ldr	r0, [pc, #244]	; (801091c <etharp_input+0x110>)
 8010826:	f002 f9b9 	bl	8012b9c <iprintf>
 801082a:	e06f      	b.n	801090c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	685b      	ldr	r3, [r3, #4]
 8010830:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010832:	693b      	ldr	r3, [r7, #16]
 8010834:	881b      	ldrh	r3, [r3, #0]
 8010836:	b29b      	uxth	r3, r3
 8010838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801083c:	d10c      	bne.n	8010858 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010842:	2b06      	cmp	r3, #6
 8010844:	d108      	bne.n	8010858 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801084a:	2b04      	cmp	r3, #4
 801084c:	d104      	bne.n	8010858 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	885b      	ldrh	r3, [r3, #2]
 8010852:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010854:	2b08      	cmp	r3, #8
 8010856:	d003      	beq.n	8010860 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f7f9 fa37 	bl	8009ccc <pbuf_free>
    return;
 801085e:	e055      	b.n	801090c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	330e      	adds	r3, #14
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	3318      	adds	r3, #24
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	3304      	adds	r3, #4
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d102      	bne.n	8010880 <etharp_input+0x74>
    for_us = 0;
 801087a:	2300      	movs	r3, #0
 801087c:	75fb      	strb	r3, [r7, #23]
 801087e:	e009      	b.n	8010894 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010880:	68ba      	ldr	r2, [r7, #8]
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	3304      	adds	r3, #4
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	429a      	cmp	r2, r3
 801088a:	bf0c      	ite	eq
 801088c:	2301      	moveq	r3, #1
 801088e:	2300      	movne	r3, #0
 8010890:	b2db      	uxtb	r3, r3
 8010892:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	f103 0208 	add.w	r2, r3, #8
 801089a:	7dfb      	ldrb	r3, [r7, #23]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d001      	beq.n	80108a4 <etharp_input+0x98>
 80108a0:	2301      	movs	r3, #1
 80108a2:	e000      	b.n	80108a6 <etharp_input+0x9a>
 80108a4:	2302      	movs	r3, #2
 80108a6:	f107 010c 	add.w	r1, r7, #12
 80108aa:	6838      	ldr	r0, [r7, #0]
 80108ac:	f7ff fed8 	bl	8010660 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80108b0:	693b      	ldr	r3, [r7, #16]
 80108b2:	88db      	ldrh	r3, [r3, #6]
 80108b4:	b29b      	uxth	r3, r3
 80108b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108ba:	d003      	beq.n	80108c4 <etharp_input+0xb8>
 80108bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108c0:	d01e      	beq.n	8010900 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80108c2:	e020      	b.n	8010906 <etharp_input+0xfa>
      if (for_us) {
 80108c4:	7dfb      	ldrb	r3, [r7, #23]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d01c      	beq.n	8010904 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80108d0:	693b      	ldr	r3, [r7, #16]
 80108d2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80108e0:	693a      	ldr	r2, [r7, #16]
 80108e2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80108e4:	2102      	movs	r1, #2
 80108e6:	9103      	str	r1, [sp, #12]
 80108e8:	f107 010c 	add.w	r1, r7, #12
 80108ec:	9102      	str	r1, [sp, #8]
 80108ee:	9201      	str	r2, [sp, #4]
 80108f0:	9300      	str	r3, [sp, #0]
 80108f2:	462b      	mov	r3, r5
 80108f4:	4622      	mov	r2, r4
 80108f6:	4601      	mov	r1, r0
 80108f8:	6838      	ldr	r0, [r7, #0]
 80108fa:	f000 faeb 	bl	8010ed4 <etharp_raw>
      break;
 80108fe:	e001      	b.n	8010904 <etharp_input+0xf8>
      break;
 8010900:	bf00      	nop
 8010902:	e000      	b.n	8010906 <etharp_input+0xfa>
      break;
 8010904:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f7f9 f9e0 	bl	8009ccc <pbuf_free>
}
 801090c:	3718      	adds	r7, #24
 801090e:	46bd      	mov	sp, r7
 8010910:	bdb0      	pop	{r4, r5, r7, pc}
 8010912:	bf00      	nop
 8010914:	08015f28 	.word	0x08015f28
 8010918:	08016078 	.word	0x08016078
 801091c:	08015fa0 	.word	0x08015fa0

08010920 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b086      	sub	sp, #24
 8010924:	af02      	add	r7, sp, #8
 8010926:	60f8      	str	r0, [r7, #12]
 8010928:	60b9      	str	r1, [r7, #8]
 801092a:	4613      	mov	r3, r2
 801092c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801092e:	79fa      	ldrb	r2, [r7, #7]
 8010930:	4944      	ldr	r1, [pc, #272]	; (8010a44 <etharp_output_to_arp_index+0x124>)
 8010932:	4613      	mov	r3, r2
 8010934:	005b      	lsls	r3, r3, #1
 8010936:	4413      	add	r3, r2
 8010938:	00db      	lsls	r3, r3, #3
 801093a:	440b      	add	r3, r1
 801093c:	3314      	adds	r3, #20
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	2b01      	cmp	r3, #1
 8010942:	d806      	bhi.n	8010952 <etharp_output_to_arp_index+0x32>
 8010944:	4b40      	ldr	r3, [pc, #256]	; (8010a48 <etharp_output_to_arp_index+0x128>)
 8010946:	f240 22ee 	movw	r2, #750	; 0x2ee
 801094a:	4940      	ldr	r1, [pc, #256]	; (8010a4c <etharp_output_to_arp_index+0x12c>)
 801094c:	4840      	ldr	r0, [pc, #256]	; (8010a50 <etharp_output_to_arp_index+0x130>)
 801094e:	f002 f925 	bl	8012b9c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010952:	79fa      	ldrb	r2, [r7, #7]
 8010954:	493b      	ldr	r1, [pc, #236]	; (8010a44 <etharp_output_to_arp_index+0x124>)
 8010956:	4613      	mov	r3, r2
 8010958:	005b      	lsls	r3, r3, #1
 801095a:	4413      	add	r3, r2
 801095c:	00db      	lsls	r3, r3, #3
 801095e:	440b      	add	r3, r1
 8010960:	3314      	adds	r3, #20
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	2b02      	cmp	r3, #2
 8010966:	d153      	bne.n	8010a10 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010968:	79fa      	ldrb	r2, [r7, #7]
 801096a:	4936      	ldr	r1, [pc, #216]	; (8010a44 <etharp_output_to_arp_index+0x124>)
 801096c:	4613      	mov	r3, r2
 801096e:	005b      	lsls	r3, r3, #1
 8010970:	4413      	add	r3, r2
 8010972:	00db      	lsls	r3, r3, #3
 8010974:	440b      	add	r3, r1
 8010976:	3312      	adds	r3, #18
 8010978:	881b      	ldrh	r3, [r3, #0]
 801097a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801097e:	d919      	bls.n	80109b4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010980:	79fa      	ldrb	r2, [r7, #7]
 8010982:	4613      	mov	r3, r2
 8010984:	005b      	lsls	r3, r3, #1
 8010986:	4413      	add	r3, r2
 8010988:	00db      	lsls	r3, r3, #3
 801098a:	4a2e      	ldr	r2, [pc, #184]	; (8010a44 <etharp_output_to_arp_index+0x124>)
 801098c:	4413      	add	r3, r2
 801098e:	3304      	adds	r3, #4
 8010990:	4619      	mov	r1, r3
 8010992:	68f8      	ldr	r0, [r7, #12]
 8010994:	f000 fb4c 	bl	8011030 <etharp_request>
 8010998:	4603      	mov	r3, r0
 801099a:	2b00      	cmp	r3, #0
 801099c:	d138      	bne.n	8010a10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801099e:	79fa      	ldrb	r2, [r7, #7]
 80109a0:	4928      	ldr	r1, [pc, #160]	; (8010a44 <etharp_output_to_arp_index+0x124>)
 80109a2:	4613      	mov	r3, r2
 80109a4:	005b      	lsls	r3, r3, #1
 80109a6:	4413      	add	r3, r2
 80109a8:	00db      	lsls	r3, r3, #3
 80109aa:	440b      	add	r3, r1
 80109ac:	3314      	adds	r3, #20
 80109ae:	2203      	movs	r2, #3
 80109b0:	701a      	strb	r2, [r3, #0]
 80109b2:	e02d      	b.n	8010a10 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80109b4:	79fa      	ldrb	r2, [r7, #7]
 80109b6:	4923      	ldr	r1, [pc, #140]	; (8010a44 <etharp_output_to_arp_index+0x124>)
 80109b8:	4613      	mov	r3, r2
 80109ba:	005b      	lsls	r3, r3, #1
 80109bc:	4413      	add	r3, r2
 80109be:	00db      	lsls	r3, r3, #3
 80109c0:	440b      	add	r3, r1
 80109c2:	3312      	adds	r3, #18
 80109c4:	881b      	ldrh	r3, [r3, #0]
 80109c6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80109ca:	d321      	bcc.n	8010a10 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80109cc:	79fa      	ldrb	r2, [r7, #7]
 80109ce:	4613      	mov	r3, r2
 80109d0:	005b      	lsls	r3, r3, #1
 80109d2:	4413      	add	r3, r2
 80109d4:	00db      	lsls	r3, r3, #3
 80109d6:	4a1b      	ldr	r2, [pc, #108]	; (8010a44 <etharp_output_to_arp_index+0x124>)
 80109d8:	4413      	add	r3, r2
 80109da:	1d19      	adds	r1, r3, #4
 80109dc:	79fa      	ldrb	r2, [r7, #7]
 80109de:	4613      	mov	r3, r2
 80109e0:	005b      	lsls	r3, r3, #1
 80109e2:	4413      	add	r3, r2
 80109e4:	00db      	lsls	r3, r3, #3
 80109e6:	3308      	adds	r3, #8
 80109e8:	4a16      	ldr	r2, [pc, #88]	; (8010a44 <etharp_output_to_arp_index+0x124>)
 80109ea:	4413      	add	r3, r2
 80109ec:	3304      	adds	r3, #4
 80109ee:	461a      	mov	r2, r3
 80109f0:	68f8      	ldr	r0, [r7, #12]
 80109f2:	f000 fafb 	bl	8010fec <etharp_request_dst>
 80109f6:	4603      	mov	r3, r0
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d109      	bne.n	8010a10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80109fc:	79fa      	ldrb	r2, [r7, #7]
 80109fe:	4911      	ldr	r1, [pc, #68]	; (8010a44 <etharp_output_to_arp_index+0x124>)
 8010a00:	4613      	mov	r3, r2
 8010a02:	005b      	lsls	r3, r3, #1
 8010a04:	4413      	add	r3, r2
 8010a06:	00db      	lsls	r3, r3, #3
 8010a08:	440b      	add	r3, r1
 8010a0a:	3314      	adds	r3, #20
 8010a0c:	2203      	movs	r2, #3
 8010a0e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8010a16:	79fa      	ldrb	r2, [r7, #7]
 8010a18:	4613      	mov	r3, r2
 8010a1a:	005b      	lsls	r3, r3, #1
 8010a1c:	4413      	add	r3, r2
 8010a1e:	00db      	lsls	r3, r3, #3
 8010a20:	3308      	adds	r3, #8
 8010a22:	4a08      	ldr	r2, [pc, #32]	; (8010a44 <etharp_output_to_arp_index+0x124>)
 8010a24:	4413      	add	r3, r2
 8010a26:	3304      	adds	r3, #4
 8010a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010a2c:	9200      	str	r2, [sp, #0]
 8010a2e:	460a      	mov	r2, r1
 8010a30:	68b9      	ldr	r1, [r7, #8]
 8010a32:	68f8      	ldr	r0, [r7, #12]
 8010a34:	f001 fe66 	bl	8012704 <ethernet_output>
 8010a38:	4603      	mov	r3, r0
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3710      	adds	r7, #16
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	2400bd50 	.word	0x2400bd50
 8010a48:	08015f28 	.word	0x08015f28
 8010a4c:	08016098 	.word	0x08016098
 8010a50:	08015fa0 	.word	0x08015fa0

08010a54 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b08a      	sub	sp, #40	; 0x28
 8010a58:	af02      	add	r7, sp, #8
 8010a5a:	60f8      	str	r0, [r7, #12]
 8010a5c:	60b9      	str	r1, [r7, #8]
 8010a5e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d106      	bne.n	8010a78 <etharp_output+0x24>
 8010a6a:	4b73      	ldr	r3, [pc, #460]	; (8010c38 <etharp_output+0x1e4>)
 8010a6c:	f240 321e 	movw	r2, #798	; 0x31e
 8010a70:	4972      	ldr	r1, [pc, #456]	; (8010c3c <etharp_output+0x1e8>)
 8010a72:	4873      	ldr	r0, [pc, #460]	; (8010c40 <etharp_output+0x1ec>)
 8010a74:	f002 f892 	bl	8012b9c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010a78:	68bb      	ldr	r3, [r7, #8]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d106      	bne.n	8010a8c <etharp_output+0x38>
 8010a7e:	4b6e      	ldr	r3, [pc, #440]	; (8010c38 <etharp_output+0x1e4>)
 8010a80:	f240 321f 	movw	r2, #799	; 0x31f
 8010a84:	496f      	ldr	r1, [pc, #444]	; (8010c44 <etharp_output+0x1f0>)
 8010a86:	486e      	ldr	r0, [pc, #440]	; (8010c40 <etharp_output+0x1ec>)
 8010a88:	f002 f888 	bl	8012b9c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d106      	bne.n	8010aa0 <etharp_output+0x4c>
 8010a92:	4b69      	ldr	r3, [pc, #420]	; (8010c38 <etharp_output+0x1e4>)
 8010a94:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010a98:	496b      	ldr	r1, [pc, #428]	; (8010c48 <etharp_output+0x1f4>)
 8010a9a:	4869      	ldr	r0, [pc, #420]	; (8010c40 <etharp_output+0x1ec>)
 8010a9c:	f002 f87e 	bl	8012b9c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	68f9      	ldr	r1, [r7, #12]
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f000 ff1e 	bl	80118e8 <ip4_addr_isbroadcast_u32>
 8010aac:	4603      	mov	r3, r0
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d002      	beq.n	8010ab8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010ab2:	4b66      	ldr	r3, [pc, #408]	; (8010c4c <etharp_output+0x1f8>)
 8010ab4:	61fb      	str	r3, [r7, #28]
 8010ab6:	e0af      	b.n	8010c18 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ac0:	2be0      	cmp	r3, #224	; 0xe0
 8010ac2:	d118      	bne.n	8010af6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010acc:	235e      	movs	r3, #94	; 0x5e
 8010ace:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	3301      	adds	r3, #1
 8010ad4:	781b      	ldrb	r3, [r3, #0]
 8010ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ada:	b2db      	uxtb	r3, r3
 8010adc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	3302      	adds	r3, #2
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	3303      	adds	r3, #3
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010aee:	f107 0310 	add.w	r3, r7, #16
 8010af2:	61fb      	str	r3, [r7, #28]
 8010af4:	e090      	b.n	8010c18 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681a      	ldr	r2, [r3, #0]
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	3304      	adds	r3, #4
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	405a      	eors	r2, r3
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	3308      	adds	r3, #8
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	4013      	ands	r3, r2
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d012      	beq.n	8010b34 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010b14:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	d00b      	beq.n	8010b34 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	330c      	adds	r3, #12
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d003      	beq.n	8010b2e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	330c      	adds	r3, #12
 8010b2a:	61bb      	str	r3, [r7, #24]
 8010b2c:	e002      	b.n	8010b34 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010b2e:	f06f 0303 	mvn.w	r3, #3
 8010b32:	e07d      	b.n	8010c30 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010b34:	4b46      	ldr	r3, [pc, #280]	; (8010c50 <etharp_output+0x1fc>)
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	4619      	mov	r1, r3
 8010b3a:	4a46      	ldr	r2, [pc, #280]	; (8010c54 <etharp_output+0x200>)
 8010b3c:	460b      	mov	r3, r1
 8010b3e:	005b      	lsls	r3, r3, #1
 8010b40:	440b      	add	r3, r1
 8010b42:	00db      	lsls	r3, r3, #3
 8010b44:	4413      	add	r3, r2
 8010b46:	3314      	adds	r3, #20
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	2b01      	cmp	r3, #1
 8010b4c:	d925      	bls.n	8010b9a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010b4e:	4b40      	ldr	r3, [pc, #256]	; (8010c50 <etharp_output+0x1fc>)
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	4619      	mov	r1, r3
 8010b54:	4a3f      	ldr	r2, [pc, #252]	; (8010c54 <etharp_output+0x200>)
 8010b56:	460b      	mov	r3, r1
 8010b58:	005b      	lsls	r3, r3, #1
 8010b5a:	440b      	add	r3, r1
 8010b5c:	00db      	lsls	r3, r3, #3
 8010b5e:	4413      	add	r3, r2
 8010b60:	3308      	adds	r3, #8
 8010b62:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d117      	bne.n	8010b9a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010b6a:	69bb      	ldr	r3, [r7, #24]
 8010b6c:	681a      	ldr	r2, [r3, #0]
 8010b6e:	4b38      	ldr	r3, [pc, #224]	; (8010c50 <etharp_output+0x1fc>)
 8010b70:	781b      	ldrb	r3, [r3, #0]
 8010b72:	4618      	mov	r0, r3
 8010b74:	4937      	ldr	r1, [pc, #220]	; (8010c54 <etharp_output+0x200>)
 8010b76:	4603      	mov	r3, r0
 8010b78:	005b      	lsls	r3, r3, #1
 8010b7a:	4403      	add	r3, r0
 8010b7c:	00db      	lsls	r3, r3, #3
 8010b7e:	440b      	add	r3, r1
 8010b80:	3304      	adds	r3, #4
 8010b82:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d108      	bne.n	8010b9a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010b88:	4b31      	ldr	r3, [pc, #196]	; (8010c50 <etharp_output+0x1fc>)
 8010b8a:	781b      	ldrb	r3, [r3, #0]
 8010b8c:	461a      	mov	r2, r3
 8010b8e:	68b9      	ldr	r1, [r7, #8]
 8010b90:	68f8      	ldr	r0, [r7, #12]
 8010b92:	f7ff fec5 	bl	8010920 <etharp_output_to_arp_index>
 8010b96:	4603      	mov	r3, r0
 8010b98:	e04a      	b.n	8010c30 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	75fb      	strb	r3, [r7, #23]
 8010b9e:	e031      	b.n	8010c04 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010ba0:	7dfa      	ldrb	r2, [r7, #23]
 8010ba2:	492c      	ldr	r1, [pc, #176]	; (8010c54 <etharp_output+0x200>)
 8010ba4:	4613      	mov	r3, r2
 8010ba6:	005b      	lsls	r3, r3, #1
 8010ba8:	4413      	add	r3, r2
 8010baa:	00db      	lsls	r3, r3, #3
 8010bac:	440b      	add	r3, r1
 8010bae:	3314      	adds	r3, #20
 8010bb0:	781b      	ldrb	r3, [r3, #0]
 8010bb2:	2b01      	cmp	r3, #1
 8010bb4:	d923      	bls.n	8010bfe <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010bb6:	7dfa      	ldrb	r2, [r7, #23]
 8010bb8:	4926      	ldr	r1, [pc, #152]	; (8010c54 <etharp_output+0x200>)
 8010bba:	4613      	mov	r3, r2
 8010bbc:	005b      	lsls	r3, r3, #1
 8010bbe:	4413      	add	r3, r2
 8010bc0:	00db      	lsls	r3, r3, #3
 8010bc2:	440b      	add	r3, r1
 8010bc4:	3308      	adds	r3, #8
 8010bc6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010bc8:	68fa      	ldr	r2, [r7, #12]
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d117      	bne.n	8010bfe <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010bce:	69bb      	ldr	r3, [r7, #24]
 8010bd0:	6819      	ldr	r1, [r3, #0]
 8010bd2:	7dfa      	ldrb	r2, [r7, #23]
 8010bd4:	481f      	ldr	r0, [pc, #124]	; (8010c54 <etharp_output+0x200>)
 8010bd6:	4613      	mov	r3, r2
 8010bd8:	005b      	lsls	r3, r3, #1
 8010bda:	4413      	add	r3, r2
 8010bdc:	00db      	lsls	r3, r3, #3
 8010bde:	4403      	add	r3, r0
 8010be0:	3304      	adds	r3, #4
 8010be2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010be4:	4299      	cmp	r1, r3
 8010be6:	d10a      	bne.n	8010bfe <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010be8:	4a19      	ldr	r2, [pc, #100]	; (8010c50 <etharp_output+0x1fc>)
 8010bea:	7dfb      	ldrb	r3, [r7, #23]
 8010bec:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010bee:	7dfb      	ldrb	r3, [r7, #23]
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	68b9      	ldr	r1, [r7, #8]
 8010bf4:	68f8      	ldr	r0, [r7, #12]
 8010bf6:	f7ff fe93 	bl	8010920 <etharp_output_to_arp_index>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	e018      	b.n	8010c30 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010bfe:	7dfb      	ldrb	r3, [r7, #23]
 8010c00:	3301      	adds	r3, #1
 8010c02:	75fb      	strb	r3, [r7, #23]
 8010c04:	7dfb      	ldrb	r3, [r7, #23]
 8010c06:	2b09      	cmp	r3, #9
 8010c08:	d9ca      	bls.n	8010ba0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010c0a:	68ba      	ldr	r2, [r7, #8]
 8010c0c:	69b9      	ldr	r1, [r7, #24]
 8010c0e:	68f8      	ldr	r0, [r7, #12]
 8010c10:	f000 f822 	bl	8010c58 <etharp_query>
 8010c14:	4603      	mov	r3, r0
 8010c16:	e00b      	b.n	8010c30 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010c1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010c22:	9300      	str	r3, [sp, #0]
 8010c24:	69fb      	ldr	r3, [r7, #28]
 8010c26:	68b9      	ldr	r1, [r7, #8]
 8010c28:	68f8      	ldr	r0, [r7, #12]
 8010c2a:	f001 fd6b 	bl	8012704 <ethernet_output>
 8010c2e:	4603      	mov	r3, r0
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3720      	adds	r7, #32
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}
 8010c38:	08015f28 	.word	0x08015f28
 8010c3c:	08016078 	.word	0x08016078
 8010c40:	08015fa0 	.word	0x08015fa0
 8010c44:	080160c8 	.word	0x080160c8
 8010c48:	08016068 	.word	0x08016068
 8010c4c:	0801671c 	.word	0x0801671c
 8010c50:	2400be40 	.word	0x2400be40
 8010c54:	2400bd50 	.word	0x2400bd50

08010c58 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b08c      	sub	sp, #48	; 0x30
 8010c5c:	af02      	add	r7, sp, #8
 8010c5e:	60f8      	str	r0, [r7, #12]
 8010c60:	60b9      	str	r1, [r7, #8]
 8010c62:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	3326      	adds	r3, #38	; 0x26
 8010c68:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010c6a:	23ff      	movs	r3, #255	; 0xff
 8010c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010c70:	2300      	movs	r3, #0
 8010c72:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	68f9      	ldr	r1, [r7, #12]
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f000 fe34 	bl	80118e8 <ip4_addr_isbroadcast_u32>
 8010c80:	4603      	mov	r3, r0
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d10c      	bne.n	8010ca0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010c8e:	2be0      	cmp	r3, #224	; 0xe0
 8010c90:	d006      	beq.n	8010ca0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d003      	beq.n	8010ca0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d102      	bne.n	8010ca6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010ca0:	f06f 030f 	mvn.w	r3, #15
 8010ca4:	e101      	b.n	8010eaa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010ca6:	68fa      	ldr	r2, [r7, #12]
 8010ca8:	2101      	movs	r1, #1
 8010caa:	68b8      	ldr	r0, [r7, #8]
 8010cac:	f7ff fb60 	bl	8010370 <etharp_find_entry>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010cb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	da02      	bge.n	8010cc2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010cbc:	8a7b      	ldrh	r3, [r7, #18]
 8010cbe:	b25b      	sxtb	r3, r3
 8010cc0:	e0f3      	b.n	8010eaa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010cc2:	8a7b      	ldrh	r3, [r7, #18]
 8010cc4:	2b7e      	cmp	r3, #126	; 0x7e
 8010cc6:	d906      	bls.n	8010cd6 <etharp_query+0x7e>
 8010cc8:	4b7a      	ldr	r3, [pc, #488]	; (8010eb4 <etharp_query+0x25c>)
 8010cca:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010cce:	497a      	ldr	r1, [pc, #488]	; (8010eb8 <etharp_query+0x260>)
 8010cd0:	487a      	ldr	r0, [pc, #488]	; (8010ebc <etharp_query+0x264>)
 8010cd2:	f001 ff63 	bl	8012b9c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010cd6:	8a7b      	ldrh	r3, [r7, #18]
 8010cd8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010cda:	7c7a      	ldrb	r2, [r7, #17]
 8010cdc:	4978      	ldr	r1, [pc, #480]	; (8010ec0 <etharp_query+0x268>)
 8010cde:	4613      	mov	r3, r2
 8010ce0:	005b      	lsls	r3, r3, #1
 8010ce2:	4413      	add	r3, r2
 8010ce4:	00db      	lsls	r3, r3, #3
 8010ce6:	440b      	add	r3, r1
 8010ce8:	3314      	adds	r3, #20
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d115      	bne.n	8010d1c <etharp_query+0xc4>
    is_new_entry = 1;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010cf4:	7c7a      	ldrb	r2, [r7, #17]
 8010cf6:	4972      	ldr	r1, [pc, #456]	; (8010ec0 <etharp_query+0x268>)
 8010cf8:	4613      	mov	r3, r2
 8010cfa:	005b      	lsls	r3, r3, #1
 8010cfc:	4413      	add	r3, r2
 8010cfe:	00db      	lsls	r3, r3, #3
 8010d00:	440b      	add	r3, r1
 8010d02:	3314      	adds	r3, #20
 8010d04:	2201      	movs	r2, #1
 8010d06:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010d08:	7c7a      	ldrb	r2, [r7, #17]
 8010d0a:	496d      	ldr	r1, [pc, #436]	; (8010ec0 <etharp_query+0x268>)
 8010d0c:	4613      	mov	r3, r2
 8010d0e:	005b      	lsls	r3, r3, #1
 8010d10:	4413      	add	r3, r2
 8010d12:	00db      	lsls	r3, r3, #3
 8010d14:	440b      	add	r3, r1
 8010d16:	3308      	adds	r3, #8
 8010d18:	68fa      	ldr	r2, [r7, #12]
 8010d1a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010d1c:	7c7a      	ldrb	r2, [r7, #17]
 8010d1e:	4968      	ldr	r1, [pc, #416]	; (8010ec0 <etharp_query+0x268>)
 8010d20:	4613      	mov	r3, r2
 8010d22:	005b      	lsls	r3, r3, #1
 8010d24:	4413      	add	r3, r2
 8010d26:	00db      	lsls	r3, r3, #3
 8010d28:	440b      	add	r3, r1
 8010d2a:	3314      	adds	r3, #20
 8010d2c:	781b      	ldrb	r3, [r3, #0]
 8010d2e:	2b01      	cmp	r3, #1
 8010d30:	d011      	beq.n	8010d56 <etharp_query+0xfe>
 8010d32:	7c7a      	ldrb	r2, [r7, #17]
 8010d34:	4962      	ldr	r1, [pc, #392]	; (8010ec0 <etharp_query+0x268>)
 8010d36:	4613      	mov	r3, r2
 8010d38:	005b      	lsls	r3, r3, #1
 8010d3a:	4413      	add	r3, r2
 8010d3c:	00db      	lsls	r3, r3, #3
 8010d3e:	440b      	add	r3, r1
 8010d40:	3314      	adds	r3, #20
 8010d42:	781b      	ldrb	r3, [r3, #0]
 8010d44:	2b01      	cmp	r3, #1
 8010d46:	d806      	bhi.n	8010d56 <etharp_query+0xfe>
 8010d48:	4b5a      	ldr	r3, [pc, #360]	; (8010eb4 <etharp_query+0x25c>)
 8010d4a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010d4e:	495d      	ldr	r1, [pc, #372]	; (8010ec4 <etharp_query+0x26c>)
 8010d50:	485a      	ldr	r0, [pc, #360]	; (8010ebc <etharp_query+0x264>)
 8010d52:	f001 ff23 	bl	8012b9c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010d56:	6a3b      	ldr	r3, [r7, #32]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d102      	bne.n	8010d62 <etharp_query+0x10a>
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d10c      	bne.n	8010d7c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010d62:	68b9      	ldr	r1, [r7, #8]
 8010d64:	68f8      	ldr	r0, [r7, #12]
 8010d66:	f000 f963 	bl	8011030 <etharp_request>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d102      	bne.n	8010d7c <etharp_query+0x124>
      return result;
 8010d76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010d7a:	e096      	b.n	8010eaa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d106      	bne.n	8010d90 <etharp_query+0x138>
 8010d82:	4b4c      	ldr	r3, [pc, #304]	; (8010eb4 <etharp_query+0x25c>)
 8010d84:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010d88:	494f      	ldr	r1, [pc, #316]	; (8010ec8 <etharp_query+0x270>)
 8010d8a:	484c      	ldr	r0, [pc, #304]	; (8010ebc <etharp_query+0x264>)
 8010d8c:	f001 ff06 	bl	8012b9c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010d90:	7c7a      	ldrb	r2, [r7, #17]
 8010d92:	494b      	ldr	r1, [pc, #300]	; (8010ec0 <etharp_query+0x268>)
 8010d94:	4613      	mov	r3, r2
 8010d96:	005b      	lsls	r3, r3, #1
 8010d98:	4413      	add	r3, r2
 8010d9a:	00db      	lsls	r3, r3, #3
 8010d9c:	440b      	add	r3, r1
 8010d9e:	3314      	adds	r3, #20
 8010da0:	781b      	ldrb	r3, [r3, #0]
 8010da2:	2b01      	cmp	r3, #1
 8010da4:	d917      	bls.n	8010dd6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010da6:	4a49      	ldr	r2, [pc, #292]	; (8010ecc <etharp_query+0x274>)
 8010da8:	7c7b      	ldrb	r3, [r7, #17]
 8010daa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010dac:	7c7a      	ldrb	r2, [r7, #17]
 8010dae:	4613      	mov	r3, r2
 8010db0:	005b      	lsls	r3, r3, #1
 8010db2:	4413      	add	r3, r2
 8010db4:	00db      	lsls	r3, r3, #3
 8010db6:	3308      	adds	r3, #8
 8010db8:	4a41      	ldr	r2, [pc, #260]	; (8010ec0 <etharp_query+0x268>)
 8010dba:	4413      	add	r3, r2
 8010dbc:	3304      	adds	r3, #4
 8010dbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010dc2:	9200      	str	r2, [sp, #0]
 8010dc4:	697a      	ldr	r2, [r7, #20]
 8010dc6:	6879      	ldr	r1, [r7, #4]
 8010dc8:	68f8      	ldr	r0, [r7, #12]
 8010dca:	f001 fc9b 	bl	8012704 <ethernet_output>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010dd4:	e067      	b.n	8010ea6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010dd6:	7c7a      	ldrb	r2, [r7, #17]
 8010dd8:	4939      	ldr	r1, [pc, #228]	; (8010ec0 <etharp_query+0x268>)
 8010dda:	4613      	mov	r3, r2
 8010ddc:	005b      	lsls	r3, r3, #1
 8010dde:	4413      	add	r3, r2
 8010de0:	00db      	lsls	r3, r3, #3
 8010de2:	440b      	add	r3, r1
 8010de4:	3314      	adds	r3, #20
 8010de6:	781b      	ldrb	r3, [r3, #0]
 8010de8:	2b01      	cmp	r3, #1
 8010dea:	d15c      	bne.n	8010ea6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010dec:	2300      	movs	r3, #0
 8010dee:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010df4:	e01c      	b.n	8010e30 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010df6:	69fb      	ldr	r3, [r7, #28]
 8010df8:	895a      	ldrh	r2, [r3, #10]
 8010dfa:	69fb      	ldr	r3, [r7, #28]
 8010dfc:	891b      	ldrh	r3, [r3, #8]
 8010dfe:	429a      	cmp	r2, r3
 8010e00:	d10a      	bne.n	8010e18 <etharp_query+0x1c0>
 8010e02:	69fb      	ldr	r3, [r7, #28]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d006      	beq.n	8010e18 <etharp_query+0x1c0>
 8010e0a:	4b2a      	ldr	r3, [pc, #168]	; (8010eb4 <etharp_query+0x25c>)
 8010e0c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010e10:	492f      	ldr	r1, [pc, #188]	; (8010ed0 <etharp_query+0x278>)
 8010e12:	482a      	ldr	r0, [pc, #168]	; (8010ebc <etharp_query+0x264>)
 8010e14:	f001 fec2 	bl	8012b9c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010e18:	69fb      	ldr	r3, [r7, #28]
 8010e1a:	7b1b      	ldrb	r3, [r3, #12]
 8010e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d002      	beq.n	8010e2a <etharp_query+0x1d2>
        copy_needed = 1;
 8010e24:	2301      	movs	r3, #1
 8010e26:	61bb      	str	r3, [r7, #24]
        break;
 8010e28:	e005      	b.n	8010e36 <etharp_query+0x1de>
      }
      p = p->next;
 8010e2a:	69fb      	ldr	r3, [r7, #28]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010e30:	69fb      	ldr	r3, [r7, #28]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d1df      	bne.n	8010df6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010e36:	69bb      	ldr	r3, [r7, #24]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d007      	beq.n	8010e4c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010e3c:	687a      	ldr	r2, [r7, #4]
 8010e3e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010e42:	200e      	movs	r0, #14
 8010e44:	f7f9 f9ba 	bl	800a1bc <pbuf_clone>
 8010e48:	61f8      	str	r0, [r7, #28]
 8010e4a:	e004      	b.n	8010e56 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010e50:	69f8      	ldr	r0, [r7, #28]
 8010e52:	f7f8 ffe1 	bl	8009e18 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010e56:	69fb      	ldr	r3, [r7, #28]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d021      	beq.n	8010ea0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010e5c:	7c7a      	ldrb	r2, [r7, #17]
 8010e5e:	4918      	ldr	r1, [pc, #96]	; (8010ec0 <etharp_query+0x268>)
 8010e60:	4613      	mov	r3, r2
 8010e62:	005b      	lsls	r3, r3, #1
 8010e64:	4413      	add	r3, r2
 8010e66:	00db      	lsls	r3, r3, #3
 8010e68:	440b      	add	r3, r1
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d00a      	beq.n	8010e86 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010e70:	7c7a      	ldrb	r2, [r7, #17]
 8010e72:	4913      	ldr	r1, [pc, #76]	; (8010ec0 <etharp_query+0x268>)
 8010e74:	4613      	mov	r3, r2
 8010e76:	005b      	lsls	r3, r3, #1
 8010e78:	4413      	add	r3, r2
 8010e7a:	00db      	lsls	r3, r3, #3
 8010e7c:	440b      	add	r3, r1
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7f8 ff23 	bl	8009ccc <pbuf_free>
      }
      arp_table[i].q = p;
 8010e86:	7c7a      	ldrb	r2, [r7, #17]
 8010e88:	490d      	ldr	r1, [pc, #52]	; (8010ec0 <etharp_query+0x268>)
 8010e8a:	4613      	mov	r3, r2
 8010e8c:	005b      	lsls	r3, r3, #1
 8010e8e:	4413      	add	r3, r2
 8010e90:	00db      	lsls	r3, r3, #3
 8010e92:	440b      	add	r3, r1
 8010e94:	69fa      	ldr	r2, [r7, #28]
 8010e96:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010e98:	2300      	movs	r3, #0
 8010e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e9e:	e002      	b.n	8010ea6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010ea0:	23ff      	movs	r3, #255	; 0xff
 8010ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010ea6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3728      	adds	r7, #40	; 0x28
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	08015f28 	.word	0x08015f28
 8010eb8:	080160d4 	.word	0x080160d4
 8010ebc:	08015fa0 	.word	0x08015fa0
 8010ec0:	2400bd50 	.word	0x2400bd50
 8010ec4:	080160e4 	.word	0x080160e4
 8010ec8:	080160c8 	.word	0x080160c8
 8010ecc:	2400be40 	.word	0x2400be40
 8010ed0:	0801610c 	.word	0x0801610c

08010ed4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b08a      	sub	sp, #40	; 0x28
 8010ed8:	af02      	add	r7, sp, #8
 8010eda:	60f8      	str	r0, [r7, #12]
 8010edc:	60b9      	str	r1, [r7, #8]
 8010ede:	607a      	str	r2, [r7, #4]
 8010ee0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d106      	bne.n	8010efa <etharp_raw+0x26>
 8010eec:	4b3a      	ldr	r3, [pc, #232]	; (8010fd8 <etharp_raw+0x104>)
 8010eee:	f240 4257 	movw	r2, #1111	; 0x457
 8010ef2:	493a      	ldr	r1, [pc, #232]	; (8010fdc <etharp_raw+0x108>)
 8010ef4:	483a      	ldr	r0, [pc, #232]	; (8010fe0 <etharp_raw+0x10c>)
 8010ef6:	f001 fe51 	bl	8012b9c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010efa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010efe:	211c      	movs	r1, #28
 8010f00:	200e      	movs	r0, #14
 8010f02:	f7f8 fc01 	bl	8009708 <pbuf_alloc>
 8010f06:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010f08:	69bb      	ldr	r3, [r7, #24]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d102      	bne.n	8010f14 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f12:	e05d      	b.n	8010fd0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010f14:	69bb      	ldr	r3, [r7, #24]
 8010f16:	895b      	ldrh	r3, [r3, #10]
 8010f18:	2b1b      	cmp	r3, #27
 8010f1a:	d806      	bhi.n	8010f2a <etharp_raw+0x56>
 8010f1c:	4b2e      	ldr	r3, [pc, #184]	; (8010fd8 <etharp_raw+0x104>)
 8010f1e:	f240 4262 	movw	r2, #1122	; 0x462
 8010f22:	4930      	ldr	r1, [pc, #192]	; (8010fe4 <etharp_raw+0x110>)
 8010f24:	482e      	ldr	r0, [pc, #184]	; (8010fe0 <etharp_raw+0x10c>)
 8010f26:	f001 fe39 	bl	8012b9c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010f2a:	69bb      	ldr	r3, [r7, #24]
 8010f2c:	685b      	ldr	r3, [r3, #4]
 8010f2e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010f30:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010f32:	4618      	mov	r0, r3
 8010f34:	f7f7 fa34 	bl	80083a0 <lwip_htons>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	697b      	ldr	r3, [r7, #20]
 8010f3e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010f46:	2b06      	cmp	r3, #6
 8010f48:	d006      	beq.n	8010f58 <etharp_raw+0x84>
 8010f4a:	4b23      	ldr	r3, [pc, #140]	; (8010fd8 <etharp_raw+0x104>)
 8010f4c:	f240 4269 	movw	r2, #1129	; 0x469
 8010f50:	4925      	ldr	r1, [pc, #148]	; (8010fe8 <etharp_raw+0x114>)
 8010f52:	4823      	ldr	r0, [pc, #140]	; (8010fe0 <etharp_raw+0x10c>)
 8010f54:	f001 fe22 	bl	8012b9c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	3308      	adds	r3, #8
 8010f5c:	2206      	movs	r2, #6
 8010f5e:	6839      	ldr	r1, [r7, #0]
 8010f60:	4618      	mov	r0, r3
 8010f62:	f001 ff4b 	bl	8012dfc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	3312      	adds	r3, #18
 8010f6a:	2206      	movs	r2, #6
 8010f6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f001 ff44 	bl	8012dfc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	330e      	adds	r3, #14
 8010f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f7a:	6812      	ldr	r2, [r2, #0]
 8010f7c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	3318      	adds	r3, #24
 8010f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f84:	6812      	ldr	r2, [r2, #0]
 8010f86:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	701a      	strb	r2, [r3, #0]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	f042 0201 	orr.w	r2, r2, #1
 8010f94:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	f042 0208 	orr.w	r2, r2, #8
 8010f9e:	709a      	strb	r2, [r3, #2]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	2206      	movs	r2, #6
 8010fa8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	2204      	movs	r2, #4
 8010fae:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010fb0:	f640 0306 	movw	r3, #2054	; 0x806
 8010fb4:	9300      	str	r3, [sp, #0]
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	68ba      	ldr	r2, [r7, #8]
 8010fba:	69b9      	ldr	r1, [r7, #24]
 8010fbc:	68f8      	ldr	r0, [r7, #12]
 8010fbe:	f001 fba1 	bl	8012704 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010fc2:	69b8      	ldr	r0, [r7, #24]
 8010fc4:	f7f8 fe82 	bl	8009ccc <pbuf_free>
  p = NULL;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010fcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3720      	adds	r7, #32
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}
 8010fd8:	08015f28 	.word	0x08015f28
 8010fdc:	08016078 	.word	0x08016078
 8010fe0:	08015fa0 	.word	0x08015fa0
 8010fe4:	08016128 	.word	0x08016128
 8010fe8:	0801615c 	.word	0x0801615c

08010fec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b088      	sub	sp, #32
 8010ff0:	af04      	add	r7, sp, #16
 8010ff2:	60f8      	str	r0, [r7, #12]
 8010ff4:	60b9      	str	r1, [r7, #8]
 8010ff6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011008:	2201      	movs	r2, #1
 801100a:	9203      	str	r2, [sp, #12]
 801100c:	68ba      	ldr	r2, [r7, #8]
 801100e:	9202      	str	r2, [sp, #8]
 8011010:	4a06      	ldr	r2, [pc, #24]	; (801102c <etharp_request_dst+0x40>)
 8011012:	9201      	str	r2, [sp, #4]
 8011014:	9300      	str	r3, [sp, #0]
 8011016:	4603      	mov	r3, r0
 8011018:	687a      	ldr	r2, [r7, #4]
 801101a:	68f8      	ldr	r0, [r7, #12]
 801101c:	f7ff ff5a 	bl	8010ed4 <etharp_raw>
 8011020:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011022:	4618      	mov	r0, r3
 8011024:	3710      	adds	r7, #16
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}
 801102a:	bf00      	nop
 801102c:	08016724 	.word	0x08016724

08011030 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b082      	sub	sp, #8
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
 8011038:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801103a:	4a05      	ldr	r2, [pc, #20]	; (8011050 <etharp_request+0x20>)
 801103c:	6839      	ldr	r1, [r7, #0]
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f7ff ffd4 	bl	8010fec <etharp_request_dst>
 8011044:	4603      	mov	r3, r0
}
 8011046:	4618      	mov	r0, r3
 8011048:	3708      	adds	r7, #8
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}
 801104e:	bf00      	nop
 8011050:	0801671c 	.word	0x0801671c

08011054 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b08e      	sub	sp, #56	; 0x38
 8011058:	af04      	add	r7, sp, #16
 801105a:	6078      	str	r0, [r7, #4]
 801105c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801105e:	4b87      	ldr	r3, [pc, #540]	; (801127c <icmp_input+0x228>)
 8011060:	689b      	ldr	r3, [r3, #8]
 8011062:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011066:	781b      	ldrb	r3, [r3, #0]
 8011068:	f003 030f 	and.w	r3, r3, #15
 801106c:	b2db      	uxtb	r3, r3
 801106e:	009b      	lsls	r3, r3, #2
 8011070:	b2db      	uxtb	r3, r3
 8011072:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011074:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011076:	2b13      	cmp	r3, #19
 8011078:	f240 80e8 	bls.w	801124c <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	895b      	ldrh	r3, [r3, #10]
 8011080:	2b03      	cmp	r3, #3
 8011082:	f240 80e5 	bls.w	8011250 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	685b      	ldr	r3, [r3, #4]
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011090:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011094:	2b00      	cmp	r3, #0
 8011096:	f000 80d2 	beq.w	801123e <icmp_input+0x1ea>
 801109a:	2b08      	cmp	r3, #8
 801109c:	f040 80d2 	bne.w	8011244 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80110a0:	4b77      	ldr	r3, [pc, #476]	; (8011280 <icmp_input+0x22c>)
 80110a2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80110a4:	4b75      	ldr	r3, [pc, #468]	; (801127c <icmp_input+0x228>)
 80110a6:	695b      	ldr	r3, [r3, #20]
 80110a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80110ac:	2be0      	cmp	r3, #224	; 0xe0
 80110ae:	f000 80d6 	beq.w	801125e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80110b2:	4b72      	ldr	r3, [pc, #456]	; (801127c <icmp_input+0x228>)
 80110b4:	695b      	ldr	r3, [r3, #20]
 80110b6:	4a71      	ldr	r2, [pc, #452]	; (801127c <icmp_input+0x228>)
 80110b8:	6812      	ldr	r2, [r2, #0]
 80110ba:	4611      	mov	r1, r2
 80110bc:	4618      	mov	r0, r3
 80110be:	f000 fc13 	bl	80118e8 <ip4_addr_isbroadcast_u32>
 80110c2:	4603      	mov	r3, r0
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	f040 80cc 	bne.w	8011262 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	891b      	ldrh	r3, [r3, #8]
 80110ce:	2b07      	cmp	r3, #7
 80110d0:	f240 80c0 	bls.w	8011254 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f7f7 fa00 	bl	80084da <inet_chksum_pbuf>
 80110da:	4603      	mov	r3, r0
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d003      	beq.n	80110e8 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f7f8 fdf3 	bl	8009ccc <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80110e6:	e0c5      	b.n	8011274 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80110e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110ea:	330e      	adds	r3, #14
 80110ec:	4619      	mov	r1, r3
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f7f8 fd56 	bl	8009ba0 <pbuf_add_header>
 80110f4:	4603      	mov	r3, r0
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d04b      	beq.n	8011192 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	891a      	ldrh	r2, [r3, #8]
 80110fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011100:	4413      	add	r3, r2
 8011102:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	891b      	ldrh	r3, [r3, #8]
 8011108:	8b7a      	ldrh	r2, [r7, #26]
 801110a:	429a      	cmp	r2, r3
 801110c:	f0c0 80ab 	bcc.w	8011266 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011110:	8b7b      	ldrh	r3, [r7, #26]
 8011112:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011116:	4619      	mov	r1, r3
 8011118:	200e      	movs	r0, #14
 801111a:	f7f8 faf5 	bl	8009708 <pbuf_alloc>
 801111e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	2b00      	cmp	r3, #0
 8011124:	f000 80a1 	beq.w	801126a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011128:	697b      	ldr	r3, [r7, #20]
 801112a:	895b      	ldrh	r3, [r3, #10]
 801112c:	461a      	mov	r2, r3
 801112e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011130:	3308      	adds	r3, #8
 8011132:	429a      	cmp	r2, r3
 8011134:	d203      	bcs.n	801113e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011136:	6978      	ldr	r0, [r7, #20]
 8011138:	f7f8 fdc8 	bl	8009ccc <pbuf_free>
          goto icmperr;
 801113c:	e096      	b.n	801126c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011144:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011146:	4618      	mov	r0, r3
 8011148:	f001 fe58 	bl	8012dfc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801114c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801114e:	4619      	mov	r1, r3
 8011150:	6978      	ldr	r0, [r7, #20]
 8011152:	f7f8 fd35 	bl	8009bc0 <pbuf_remove_header>
 8011156:	4603      	mov	r3, r0
 8011158:	2b00      	cmp	r3, #0
 801115a:	d009      	beq.n	8011170 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801115c:	4b49      	ldr	r3, [pc, #292]	; (8011284 <icmp_input+0x230>)
 801115e:	22b6      	movs	r2, #182	; 0xb6
 8011160:	4949      	ldr	r1, [pc, #292]	; (8011288 <icmp_input+0x234>)
 8011162:	484a      	ldr	r0, [pc, #296]	; (801128c <icmp_input+0x238>)
 8011164:	f001 fd1a 	bl	8012b9c <iprintf>
          pbuf_free(r);
 8011168:	6978      	ldr	r0, [r7, #20]
 801116a:	f7f8 fdaf 	bl	8009ccc <pbuf_free>
          goto icmperr;
 801116e:	e07d      	b.n	801126c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011170:	6879      	ldr	r1, [r7, #4]
 8011172:	6978      	ldr	r0, [r7, #20]
 8011174:	f7f8 fede 	bl	8009f34 <pbuf_copy>
 8011178:	4603      	mov	r3, r0
 801117a:	2b00      	cmp	r3, #0
 801117c:	d003      	beq.n	8011186 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801117e:	6978      	ldr	r0, [r7, #20]
 8011180:	f7f8 fda4 	bl	8009ccc <pbuf_free>
          goto icmperr;
 8011184:	e072      	b.n	801126c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f7f8 fda0 	bl	8009ccc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	607b      	str	r3, [r7, #4]
 8011190:	e00f      	b.n	80111b2 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011192:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011194:	330e      	adds	r3, #14
 8011196:	4619      	mov	r1, r3
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	f7f8 fd11 	bl	8009bc0 <pbuf_remove_header>
 801119e:	4603      	mov	r3, r0
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d006      	beq.n	80111b2 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80111a4:	4b37      	ldr	r3, [pc, #220]	; (8011284 <icmp_input+0x230>)
 80111a6:	22c7      	movs	r2, #199	; 0xc7
 80111a8:	4939      	ldr	r1, [pc, #228]	; (8011290 <icmp_input+0x23c>)
 80111aa:	4838      	ldr	r0, [pc, #224]	; (801128c <icmp_input+0x238>)
 80111ac:	f001 fcf6 	bl	8012b9c <iprintf>
          goto icmperr;
 80111b0:	e05c      	b.n	801126c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	685b      	ldr	r3, [r3, #4]
 80111b6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80111b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111ba:	4619      	mov	r1, r3
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f7f8 fcef 	bl	8009ba0 <pbuf_add_header>
 80111c2:	4603      	mov	r3, r0
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d13c      	bne.n	8011242 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80111ce:	69fb      	ldr	r3, [r7, #28]
 80111d0:	681a      	ldr	r2, [r3, #0]
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80111d6:	4b29      	ldr	r3, [pc, #164]	; (801127c <icmp_input+0x228>)
 80111d8:	691a      	ldr	r2, [r3, #16]
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	2200      	movs	r2, #0
 80111e2:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	885b      	ldrh	r3, [r3, #2]
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80111ee:	4293      	cmp	r3, r2
 80111f0:	d907      	bls.n	8011202 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80111f2:	693b      	ldr	r3, [r7, #16]
 80111f4:	885b      	ldrh	r3, [r3, #2]
 80111f6:	b29b      	uxth	r3, r3
 80111f8:	3309      	adds	r3, #9
 80111fa:	b29a      	uxth	r2, r3
 80111fc:	693b      	ldr	r3, [r7, #16]
 80111fe:	805a      	strh	r2, [r3, #2]
 8011200:	e006      	b.n	8011210 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8011202:	693b      	ldr	r3, [r7, #16]
 8011204:	885b      	ldrh	r3, [r3, #2]
 8011206:	b29b      	uxth	r3, r3
 8011208:	3308      	adds	r3, #8
 801120a:	b29a      	uxth	r2, r3
 801120c:	693b      	ldr	r3, [r7, #16]
 801120e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	22ff      	movs	r2, #255	; 0xff
 8011214:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	2200      	movs	r2, #0
 801121a:	729a      	strb	r2, [r3, #10]
 801121c:	2200      	movs	r2, #0
 801121e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	9302      	str	r3, [sp, #8]
 8011224:	2301      	movs	r3, #1
 8011226:	9301      	str	r3, [sp, #4]
 8011228:	2300      	movs	r3, #0
 801122a:	9300      	str	r3, [sp, #0]
 801122c:	23ff      	movs	r3, #255	; 0xff
 801122e:	2200      	movs	r2, #0
 8011230:	69f9      	ldr	r1, [r7, #28]
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f000 fa80 	bl	8011738 <ip4_output_if>
 8011238:	4603      	mov	r3, r0
 801123a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801123c:	e001      	b.n	8011242 <icmp_input+0x1ee>
      break;
 801123e:	bf00      	nop
 8011240:	e000      	b.n	8011244 <icmp_input+0x1f0>
      break;
 8011242:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f7f8 fd41 	bl	8009ccc <pbuf_free>
  return;
 801124a:	e013      	b.n	8011274 <icmp_input+0x220>
    goto lenerr;
 801124c:	bf00      	nop
 801124e:	e002      	b.n	8011256 <icmp_input+0x202>
    goto lenerr;
 8011250:	bf00      	nop
 8011252:	e000      	b.n	8011256 <icmp_input+0x202>
        goto lenerr;
 8011254:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f7f8 fd38 	bl	8009ccc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801125c:	e00a      	b.n	8011274 <icmp_input+0x220>
        goto icmperr;
 801125e:	bf00      	nop
 8011260:	e004      	b.n	801126c <icmp_input+0x218>
        goto icmperr;
 8011262:	bf00      	nop
 8011264:	e002      	b.n	801126c <icmp_input+0x218>
          goto icmperr;
 8011266:	bf00      	nop
 8011268:	e000      	b.n	801126c <icmp_input+0x218>
          goto icmperr;
 801126a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f7f8 fd2d 	bl	8009ccc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011272:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011274:	3728      	adds	r7, #40	; 0x28
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}
 801127a:	bf00      	nop
 801127c:	24008bf0 	.word	0x24008bf0
 8011280:	24008c04 	.word	0x24008c04
 8011284:	080161a0 	.word	0x080161a0
 8011288:	080161d8 	.word	0x080161d8
 801128c:	08016210 	.word	0x08016210
 8011290:	08016238 	.word	0x08016238

08011294 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b082      	sub	sp, #8
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	460b      	mov	r3, r1
 801129e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80112a0:	78fb      	ldrb	r3, [r7, #3]
 80112a2:	461a      	mov	r2, r3
 80112a4:	2103      	movs	r1, #3
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	f000 f814 	bl	80112d4 <icmp_send_response>
}
 80112ac:	bf00      	nop
 80112ae:	3708      	adds	r7, #8
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}

080112b4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	460b      	mov	r3, r1
 80112be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80112c0:	78fb      	ldrb	r3, [r7, #3]
 80112c2:	461a      	mov	r2, r3
 80112c4:	210b      	movs	r1, #11
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f000 f804 	bl	80112d4 <icmp_send_response>
}
 80112cc:	bf00      	nop
 80112ce:	3708      	adds	r7, #8
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}

080112d4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b08c      	sub	sp, #48	; 0x30
 80112d8:	af04      	add	r7, sp, #16
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	460b      	mov	r3, r1
 80112de:	70fb      	strb	r3, [r7, #3]
 80112e0:	4613      	mov	r3, r2
 80112e2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80112e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80112e8:	2124      	movs	r1, #36	; 0x24
 80112ea:	2022      	movs	r0, #34	; 0x22
 80112ec:	f7f8 fa0c 	bl	8009708 <pbuf_alloc>
 80112f0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80112f2:	69fb      	ldr	r3, [r7, #28]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d056      	beq.n	80113a6 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80112f8:	69fb      	ldr	r3, [r7, #28]
 80112fa:	895b      	ldrh	r3, [r3, #10]
 80112fc:	2b23      	cmp	r3, #35	; 0x23
 80112fe:	d806      	bhi.n	801130e <icmp_send_response+0x3a>
 8011300:	4b2b      	ldr	r3, [pc, #172]	; (80113b0 <icmp_send_response+0xdc>)
 8011302:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011306:	492b      	ldr	r1, [pc, #172]	; (80113b4 <icmp_send_response+0xe0>)
 8011308:	482b      	ldr	r0, [pc, #172]	; (80113b8 <icmp_send_response+0xe4>)
 801130a:	f001 fc47 	bl	8012b9c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	685b      	ldr	r3, [r3, #4]
 8011312:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011314:	69fb      	ldr	r3, [r7, #28]
 8011316:	685b      	ldr	r3, [r3, #4]
 8011318:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	78fa      	ldrb	r2, [r7, #3]
 801131e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	78ba      	ldrb	r2, [r7, #2]
 8011324:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	2200      	movs	r2, #0
 801132a:	711a      	strb	r2, [r3, #4]
 801132c:	2200      	movs	r2, #0
 801132e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011330:	697b      	ldr	r3, [r7, #20]
 8011332:	2200      	movs	r2, #0
 8011334:	719a      	strb	r2, [r3, #6]
 8011336:	2200      	movs	r2, #0
 8011338:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801133a:	69fb      	ldr	r3, [r7, #28]
 801133c:	685b      	ldr	r3, [r3, #4]
 801133e:	f103 0008 	add.w	r0, r3, #8
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	685b      	ldr	r3, [r3, #4]
 8011346:	221c      	movs	r2, #28
 8011348:	4619      	mov	r1, r3
 801134a:	f001 fd57 	bl	8012dfc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801134e:	69bb      	ldr	r3, [r7, #24]
 8011350:	68db      	ldr	r3, [r3, #12]
 8011352:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011354:	f107 030c 	add.w	r3, r7, #12
 8011358:	4618      	mov	r0, r3
 801135a:	f000 f82f 	bl	80113bc <ip4_route>
 801135e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011360:	693b      	ldr	r3, [r7, #16]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d01b      	beq.n	801139e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	2200      	movs	r2, #0
 801136a:	709a      	strb	r2, [r3, #2]
 801136c:	2200      	movs	r2, #0
 801136e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8011370:	69fb      	ldr	r3, [r7, #28]
 8011372:	895b      	ldrh	r3, [r3, #10]
 8011374:	4619      	mov	r1, r3
 8011376:	6978      	ldr	r0, [r7, #20]
 8011378:	f7f7 f89d 	bl	80084b6 <inet_chksum>
 801137c:	4603      	mov	r3, r0
 801137e:	461a      	mov	r2, r3
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011384:	f107 020c 	add.w	r2, r7, #12
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	9302      	str	r3, [sp, #8]
 801138c:	2301      	movs	r3, #1
 801138e:	9301      	str	r3, [sp, #4]
 8011390:	2300      	movs	r3, #0
 8011392:	9300      	str	r3, [sp, #0]
 8011394:	23ff      	movs	r3, #255	; 0xff
 8011396:	2100      	movs	r1, #0
 8011398:	69f8      	ldr	r0, [r7, #28]
 801139a:	f000 f9cd 	bl	8011738 <ip4_output_if>
  }
  pbuf_free(q);
 801139e:	69f8      	ldr	r0, [r7, #28]
 80113a0:	f7f8 fc94 	bl	8009ccc <pbuf_free>
 80113a4:	e000      	b.n	80113a8 <icmp_send_response+0xd4>
    return;
 80113a6:	bf00      	nop
}
 80113a8:	3720      	adds	r7, #32
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}
 80113ae:	bf00      	nop
 80113b0:	080161a0 	.word	0x080161a0
 80113b4:	0801626c 	.word	0x0801626c
 80113b8:	08016210 	.word	0x08016210

080113bc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80113bc:	b480      	push	{r7}
 80113be:	b085      	sub	sp, #20
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80113c4:	4b33      	ldr	r3, [pc, #204]	; (8011494 <ip4_route+0xd8>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	60fb      	str	r3, [r7, #12]
 80113ca:	e036      	b.n	801143a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80113d2:	f003 0301 	and.w	r3, r3, #1
 80113d6:	b2db      	uxtb	r3, r3
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d02b      	beq.n	8011434 <ip4_route+0x78>
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80113e2:	089b      	lsrs	r3, r3, #2
 80113e4:	f003 0301 	and.w	r3, r3, #1
 80113e8:	b2db      	uxtb	r3, r3
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d022      	beq.n	8011434 <ip4_route+0x78>
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	3304      	adds	r3, #4
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d01d      	beq.n	8011434 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681a      	ldr	r2, [r3, #0]
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	3304      	adds	r3, #4
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	405a      	eors	r2, r3
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	3308      	adds	r3, #8
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	4013      	ands	r3, r2
 801140c:	2b00      	cmp	r3, #0
 801140e:	d101      	bne.n	8011414 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	e038      	b.n	8011486 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801141a:	f003 0302 	and.w	r3, r3, #2
 801141e:	2b00      	cmp	r3, #0
 8011420:	d108      	bne.n	8011434 <ip4_route+0x78>
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681a      	ldr	r2, [r3, #0]
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	330c      	adds	r3, #12
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	429a      	cmp	r2, r3
 801142e:	d101      	bne.n	8011434 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	e028      	b.n	8011486 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	60fb      	str	r3, [r7, #12]
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d1c5      	bne.n	80113cc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011440:	4b15      	ldr	r3, [pc, #84]	; (8011498 <ip4_route+0xdc>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d01a      	beq.n	801147e <ip4_route+0xc2>
 8011448:	4b13      	ldr	r3, [pc, #76]	; (8011498 <ip4_route+0xdc>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011450:	f003 0301 	and.w	r3, r3, #1
 8011454:	2b00      	cmp	r3, #0
 8011456:	d012      	beq.n	801147e <ip4_route+0xc2>
 8011458:	4b0f      	ldr	r3, [pc, #60]	; (8011498 <ip4_route+0xdc>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011460:	f003 0304 	and.w	r3, r3, #4
 8011464:	2b00      	cmp	r3, #0
 8011466:	d00a      	beq.n	801147e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011468:	4b0b      	ldr	r3, [pc, #44]	; (8011498 <ip4_route+0xdc>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	3304      	adds	r3, #4
 801146e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011470:	2b00      	cmp	r3, #0
 8011472:	d004      	beq.n	801147e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	b2db      	uxtb	r3, r3
 801147a:	2b7f      	cmp	r3, #127	; 0x7f
 801147c:	d101      	bne.n	8011482 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801147e:	2300      	movs	r3, #0
 8011480:	e001      	b.n	8011486 <ip4_route+0xca>
  }

  return netif_default;
 8011482:	4b05      	ldr	r3, [pc, #20]	; (8011498 <ip4_route+0xdc>)
 8011484:	681b      	ldr	r3, [r3, #0]
}
 8011486:	4618      	mov	r0, r3
 8011488:	3714      	adds	r7, #20
 801148a:	46bd      	mov	sp, r7
 801148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011490:	4770      	bx	lr
 8011492:	bf00      	nop
 8011494:	2400bce4 	.word	0x2400bce4
 8011498:	2400bce8 	.word	0x2400bce8

0801149c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b082      	sub	sp, #8
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80114aa:	f003 0301 	and.w	r3, r3, #1
 80114ae:	b2db      	uxtb	r3, r3
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d016      	beq.n	80114e2 <ip4_input_accept+0x46>
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	3304      	adds	r3, #4
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d011      	beq.n	80114e2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80114be:	4b0b      	ldr	r3, [pc, #44]	; (80114ec <ip4_input_accept+0x50>)
 80114c0:	695a      	ldr	r2, [r3, #20]
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	3304      	adds	r3, #4
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d008      	beq.n	80114de <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80114cc:	4b07      	ldr	r3, [pc, #28]	; (80114ec <ip4_input_accept+0x50>)
 80114ce:	695b      	ldr	r3, [r3, #20]
 80114d0:	6879      	ldr	r1, [r7, #4]
 80114d2:	4618      	mov	r0, r3
 80114d4:	f000 fa08 	bl	80118e8 <ip4_addr_isbroadcast_u32>
 80114d8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d001      	beq.n	80114e2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80114de:	2301      	movs	r3, #1
 80114e0:	e000      	b.n	80114e4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80114e2:	2300      	movs	r3, #0
}
 80114e4:	4618      	mov	r0, r3
 80114e6:	3708      	adds	r7, #8
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}
 80114ec:	24008bf0 	.word	0x24008bf0

080114f0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b086      	sub	sp, #24
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
 80114f8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	781b      	ldrb	r3, [r3, #0]
 8011504:	091b      	lsrs	r3, r3, #4
 8011506:	b2db      	uxtb	r3, r3
 8011508:	2b04      	cmp	r3, #4
 801150a:	d004      	beq.n	8011516 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801150c:	6878      	ldr	r0, [r7, #4]
 801150e:	f7f8 fbdd 	bl	8009ccc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011512:	2300      	movs	r3, #0
 8011514:	e107      	b.n	8011726 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	f003 030f 	and.w	r3, r3, #15
 801151e:	b2db      	uxtb	r3, r3
 8011520:	009b      	lsls	r3, r3, #2
 8011522:	b2db      	uxtb	r3, r3
 8011524:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	885b      	ldrh	r3, [r3, #2]
 801152a:	b29b      	uxth	r3, r3
 801152c:	4618      	mov	r0, r3
 801152e:	f7f6 ff37 	bl	80083a0 <lwip_htons>
 8011532:	4603      	mov	r3, r0
 8011534:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	891b      	ldrh	r3, [r3, #8]
 801153a:	89ba      	ldrh	r2, [r7, #12]
 801153c:	429a      	cmp	r2, r3
 801153e:	d204      	bcs.n	801154a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011540:	89bb      	ldrh	r3, [r7, #12]
 8011542:	4619      	mov	r1, r3
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f7f8 fa3d 	bl	80099c4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	895b      	ldrh	r3, [r3, #10]
 801154e:	89fa      	ldrh	r2, [r7, #14]
 8011550:	429a      	cmp	r2, r3
 8011552:	d807      	bhi.n	8011564 <ip4_input+0x74>
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	891b      	ldrh	r3, [r3, #8]
 8011558:	89ba      	ldrh	r2, [r7, #12]
 801155a:	429a      	cmp	r2, r3
 801155c:	d802      	bhi.n	8011564 <ip4_input+0x74>
 801155e:	89fb      	ldrh	r3, [r7, #14]
 8011560:	2b13      	cmp	r3, #19
 8011562:	d804      	bhi.n	801156e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f7f8 fbb1 	bl	8009ccc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801156a:	2300      	movs	r3, #0
 801156c:	e0db      	b.n	8011726 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	691b      	ldr	r3, [r3, #16]
 8011572:	4a6f      	ldr	r2, [pc, #444]	; (8011730 <ip4_input+0x240>)
 8011574:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011576:	697b      	ldr	r3, [r7, #20]
 8011578:	68db      	ldr	r3, [r3, #12]
 801157a:	4a6d      	ldr	r2, [pc, #436]	; (8011730 <ip4_input+0x240>)
 801157c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801157e:	4b6c      	ldr	r3, [pc, #432]	; (8011730 <ip4_input+0x240>)
 8011580:	695b      	ldr	r3, [r3, #20]
 8011582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011586:	2be0      	cmp	r3, #224	; 0xe0
 8011588:	d112      	bne.n	80115b0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011590:	f003 0301 	and.w	r3, r3, #1
 8011594:	b2db      	uxtb	r3, r3
 8011596:	2b00      	cmp	r3, #0
 8011598:	d007      	beq.n	80115aa <ip4_input+0xba>
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	3304      	adds	r3, #4
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d002      	beq.n	80115aa <ip4_input+0xba>
      netif = inp;
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	613b      	str	r3, [r7, #16]
 80115a8:	e02a      	b.n	8011600 <ip4_input+0x110>
    } else {
      netif = NULL;
 80115aa:	2300      	movs	r3, #0
 80115ac:	613b      	str	r3, [r7, #16]
 80115ae:	e027      	b.n	8011600 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80115b0:	6838      	ldr	r0, [r7, #0]
 80115b2:	f7ff ff73 	bl	801149c <ip4_input_accept>
 80115b6:	4603      	mov	r3, r0
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d002      	beq.n	80115c2 <ip4_input+0xd2>
      netif = inp;
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	613b      	str	r3, [r7, #16]
 80115c0:	e01e      	b.n	8011600 <ip4_input+0x110>
    } else {
      netif = NULL;
 80115c2:	2300      	movs	r3, #0
 80115c4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80115c6:	4b5a      	ldr	r3, [pc, #360]	; (8011730 <ip4_input+0x240>)
 80115c8:	695b      	ldr	r3, [r3, #20]
 80115ca:	b2db      	uxtb	r3, r3
 80115cc:	2b7f      	cmp	r3, #127	; 0x7f
 80115ce:	d017      	beq.n	8011600 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80115d0:	4b58      	ldr	r3, [pc, #352]	; (8011734 <ip4_input+0x244>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	613b      	str	r3, [r7, #16]
 80115d6:	e00e      	b.n	80115f6 <ip4_input+0x106>
          if (netif == inp) {
 80115d8:	693a      	ldr	r2, [r7, #16]
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	429a      	cmp	r2, r3
 80115de:	d006      	beq.n	80115ee <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80115e0:	6938      	ldr	r0, [r7, #16]
 80115e2:	f7ff ff5b 	bl	801149c <ip4_input_accept>
 80115e6:	4603      	mov	r3, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d108      	bne.n	80115fe <ip4_input+0x10e>
 80115ec:	e000      	b.n	80115f0 <ip4_input+0x100>
            continue;
 80115ee:	bf00      	nop
        NETIF_FOREACH(netif) {
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	613b      	str	r3, [r7, #16]
 80115f6:	693b      	ldr	r3, [r7, #16]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d1ed      	bne.n	80115d8 <ip4_input+0xe8>
 80115fc:	e000      	b.n	8011600 <ip4_input+0x110>
            break;
 80115fe:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011600:	4b4b      	ldr	r3, [pc, #300]	; (8011730 <ip4_input+0x240>)
 8011602:	691b      	ldr	r3, [r3, #16]
 8011604:	6839      	ldr	r1, [r7, #0]
 8011606:	4618      	mov	r0, r3
 8011608:	f000 f96e 	bl	80118e8 <ip4_addr_isbroadcast_u32>
 801160c:	4603      	mov	r3, r0
 801160e:	2b00      	cmp	r3, #0
 8011610:	d105      	bne.n	801161e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011612:	4b47      	ldr	r3, [pc, #284]	; (8011730 <ip4_input+0x240>)
 8011614:	691b      	ldr	r3, [r3, #16]
 8011616:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801161a:	2be0      	cmp	r3, #224	; 0xe0
 801161c:	d104      	bne.n	8011628 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f7f8 fb54 	bl	8009ccc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011624:	2300      	movs	r3, #0
 8011626:	e07e      	b.n	8011726 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011628:	693b      	ldr	r3, [r7, #16]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d104      	bne.n	8011638 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f7f8 fb4c 	bl	8009ccc <pbuf_free>
    return ERR_OK;
 8011634:	2300      	movs	r3, #0
 8011636:	e076      	b.n	8011726 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	88db      	ldrh	r3, [r3, #6]
 801163c:	b29b      	uxth	r3, r3
 801163e:	461a      	mov	r2, r3
 8011640:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011644:	4013      	ands	r3, r2
 8011646:	2b00      	cmp	r3, #0
 8011648:	d00b      	beq.n	8011662 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f000 fc92 	bl	8011f74 <ip4_reass>
 8011650:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d101      	bne.n	801165c <ip4_input+0x16c>
      return ERR_OK;
 8011658:	2300      	movs	r3, #0
 801165a:	e064      	b.n	8011726 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	685b      	ldr	r3, [r3, #4]
 8011660:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011662:	4a33      	ldr	r2, [pc, #204]	; (8011730 <ip4_input+0x240>)
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011668:	4a31      	ldr	r2, [pc, #196]	; (8011730 <ip4_input+0x240>)
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801166e:	4a30      	ldr	r2, [pc, #192]	; (8011730 <ip4_input+0x240>)
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	781b      	ldrb	r3, [r3, #0]
 8011678:	f003 030f 	and.w	r3, r3, #15
 801167c:	b2db      	uxtb	r3, r3
 801167e:	009b      	lsls	r3, r3, #2
 8011680:	b2db      	uxtb	r3, r3
 8011682:	b29a      	uxth	r2, r3
 8011684:	4b2a      	ldr	r3, [pc, #168]	; (8011730 <ip4_input+0x240>)
 8011686:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011688:	89fb      	ldrh	r3, [r7, #14]
 801168a:	4619      	mov	r1, r3
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f7f8 fa97 	bl	8009bc0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	7a5b      	ldrb	r3, [r3, #9]
 8011696:	2b11      	cmp	r3, #17
 8011698:	d006      	beq.n	80116a8 <ip4_input+0x1b8>
 801169a:	2b11      	cmp	r3, #17
 801169c:	dc13      	bgt.n	80116c6 <ip4_input+0x1d6>
 801169e:	2b01      	cmp	r3, #1
 80116a0:	d00c      	beq.n	80116bc <ip4_input+0x1cc>
 80116a2:	2b06      	cmp	r3, #6
 80116a4:	d005      	beq.n	80116b2 <ip4_input+0x1c2>
 80116a6:	e00e      	b.n	80116c6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80116a8:	6839      	ldr	r1, [r7, #0]
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f7fe f93c 	bl	800f928 <udp_input>
        break;
 80116b0:	e026      	b.n	8011700 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80116b2:	6839      	ldr	r1, [r7, #0]
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f7fa f94d 	bl	800b954 <tcp_input>
        break;
 80116ba:	e021      	b.n	8011700 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80116bc:	6839      	ldr	r1, [r7, #0]
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f7ff fcc8 	bl	8011054 <icmp_input>
        break;
 80116c4:	e01c      	b.n	8011700 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80116c6:	4b1a      	ldr	r3, [pc, #104]	; (8011730 <ip4_input+0x240>)
 80116c8:	695b      	ldr	r3, [r3, #20]
 80116ca:	6939      	ldr	r1, [r7, #16]
 80116cc:	4618      	mov	r0, r3
 80116ce:	f000 f90b 	bl	80118e8 <ip4_addr_isbroadcast_u32>
 80116d2:	4603      	mov	r3, r0
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d10f      	bne.n	80116f8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80116d8:	4b15      	ldr	r3, [pc, #84]	; (8011730 <ip4_input+0x240>)
 80116da:	695b      	ldr	r3, [r3, #20]
 80116dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80116e0:	2be0      	cmp	r3, #224	; 0xe0
 80116e2:	d009      	beq.n	80116f8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80116e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80116e8:	4619      	mov	r1, r3
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	f7f8 fadb 	bl	8009ca6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80116f0:	2102      	movs	r1, #2
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f7ff fdce 	bl	8011294 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f7f8 fae7 	bl	8009ccc <pbuf_free>
        break;
 80116fe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011700:	4b0b      	ldr	r3, [pc, #44]	; (8011730 <ip4_input+0x240>)
 8011702:	2200      	movs	r2, #0
 8011704:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011706:	4b0a      	ldr	r3, [pc, #40]	; (8011730 <ip4_input+0x240>)
 8011708:	2200      	movs	r2, #0
 801170a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801170c:	4b08      	ldr	r3, [pc, #32]	; (8011730 <ip4_input+0x240>)
 801170e:	2200      	movs	r2, #0
 8011710:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011712:	4b07      	ldr	r3, [pc, #28]	; (8011730 <ip4_input+0x240>)
 8011714:	2200      	movs	r2, #0
 8011716:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011718:	4b05      	ldr	r3, [pc, #20]	; (8011730 <ip4_input+0x240>)
 801171a:	2200      	movs	r2, #0
 801171c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801171e:	4b04      	ldr	r3, [pc, #16]	; (8011730 <ip4_input+0x240>)
 8011720:	2200      	movs	r2, #0
 8011722:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011724:	2300      	movs	r3, #0
}
 8011726:	4618      	mov	r0, r3
 8011728:	3718      	adds	r7, #24
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
 801172e:	bf00      	nop
 8011730:	24008bf0 	.word	0x24008bf0
 8011734:	2400bce4 	.word	0x2400bce4

08011738 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b08a      	sub	sp, #40	; 0x28
 801173c:	af04      	add	r7, sp, #16
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	607a      	str	r2, [r7, #4]
 8011744:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d009      	beq.n	8011764 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d003      	beq.n	801175e <ip4_output_if+0x26>
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d102      	bne.n	8011764 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801175e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011760:	3304      	adds	r3, #4
 8011762:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011764:	78fa      	ldrb	r2, [r7, #3]
 8011766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011768:	9302      	str	r3, [sp, #8]
 801176a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801176e:	9301      	str	r3, [sp, #4]
 8011770:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011774:	9300      	str	r3, [sp, #0]
 8011776:	4613      	mov	r3, r2
 8011778:	687a      	ldr	r2, [r7, #4]
 801177a:	6979      	ldr	r1, [r7, #20]
 801177c:	68f8      	ldr	r0, [r7, #12]
 801177e:	f000 f805 	bl	801178c <ip4_output_if_src>
 8011782:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011784:	4618      	mov	r0, r3
 8011786:	3718      	adds	r7, #24
 8011788:	46bd      	mov	sp, r7
 801178a:	bd80      	pop	{r7, pc}

0801178c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b088      	sub	sp, #32
 8011790:	af00      	add	r7, sp, #0
 8011792:	60f8      	str	r0, [r7, #12]
 8011794:	60b9      	str	r1, [r7, #8]
 8011796:	607a      	str	r2, [r7, #4]
 8011798:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	7b9b      	ldrb	r3, [r3, #14]
 801179e:	2b01      	cmp	r3, #1
 80117a0:	d006      	beq.n	80117b0 <ip4_output_if_src+0x24>
 80117a2:	4b4b      	ldr	r3, [pc, #300]	; (80118d0 <ip4_output_if_src+0x144>)
 80117a4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80117a8:	494a      	ldr	r1, [pc, #296]	; (80118d4 <ip4_output_if_src+0x148>)
 80117aa:	484b      	ldr	r0, [pc, #300]	; (80118d8 <ip4_output_if_src+0x14c>)
 80117ac:	f001 f9f6 	bl	8012b9c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d060      	beq.n	8011878 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80117b6:	2314      	movs	r3, #20
 80117b8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80117ba:	2114      	movs	r1, #20
 80117bc:	68f8      	ldr	r0, [r7, #12]
 80117be:	f7f8 f9ef 	bl	8009ba0 <pbuf_add_header>
 80117c2:	4603      	mov	r3, r0
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d002      	beq.n	80117ce <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80117c8:	f06f 0301 	mvn.w	r3, #1
 80117cc:	e07c      	b.n	80118c8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	895b      	ldrh	r3, [r3, #10]
 80117d8:	2b13      	cmp	r3, #19
 80117da:	d806      	bhi.n	80117ea <ip4_output_if_src+0x5e>
 80117dc:	4b3c      	ldr	r3, [pc, #240]	; (80118d0 <ip4_output_if_src+0x144>)
 80117de:	f44f 7262 	mov.w	r2, #904	; 0x388
 80117e2:	493e      	ldr	r1, [pc, #248]	; (80118dc <ip4_output_if_src+0x150>)
 80117e4:	483c      	ldr	r0, [pc, #240]	; (80118d8 <ip4_output_if_src+0x14c>)
 80117e6:	f001 f9d9 	bl	8012b9c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80117ea:	69fb      	ldr	r3, [r7, #28]
 80117ec:	78fa      	ldrb	r2, [r7, #3]
 80117ee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80117f0:	69fb      	ldr	r3, [r7, #28]
 80117f2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80117f6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681a      	ldr	r2, [r3, #0]
 80117fc:	69fb      	ldr	r3, [r7, #28]
 80117fe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011800:	8b7b      	ldrh	r3, [r7, #26]
 8011802:	089b      	lsrs	r3, r3, #2
 8011804:	b29b      	uxth	r3, r3
 8011806:	b2db      	uxtb	r3, r3
 8011808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801180c:	b2da      	uxtb	r2, r3
 801180e:	69fb      	ldr	r3, [r7, #28]
 8011810:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011812:	69fb      	ldr	r3, [r7, #28]
 8011814:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011818:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	891b      	ldrh	r3, [r3, #8]
 801181e:	4618      	mov	r0, r3
 8011820:	f7f6 fdbe 	bl	80083a0 <lwip_htons>
 8011824:	4603      	mov	r3, r0
 8011826:	461a      	mov	r2, r3
 8011828:	69fb      	ldr	r3, [r7, #28]
 801182a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801182c:	69fb      	ldr	r3, [r7, #28]
 801182e:	2200      	movs	r2, #0
 8011830:	719a      	strb	r2, [r3, #6]
 8011832:	2200      	movs	r2, #0
 8011834:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011836:	4b2a      	ldr	r3, [pc, #168]	; (80118e0 <ip4_output_if_src+0x154>)
 8011838:	881b      	ldrh	r3, [r3, #0]
 801183a:	4618      	mov	r0, r3
 801183c:	f7f6 fdb0 	bl	80083a0 <lwip_htons>
 8011840:	4603      	mov	r3, r0
 8011842:	461a      	mov	r2, r3
 8011844:	69fb      	ldr	r3, [r7, #28]
 8011846:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011848:	4b25      	ldr	r3, [pc, #148]	; (80118e0 <ip4_output_if_src+0x154>)
 801184a:	881b      	ldrh	r3, [r3, #0]
 801184c:	3301      	adds	r3, #1
 801184e:	b29a      	uxth	r2, r3
 8011850:	4b23      	ldr	r3, [pc, #140]	; (80118e0 <ip4_output_if_src+0x154>)
 8011852:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d104      	bne.n	8011864 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801185a:	4b22      	ldr	r3, [pc, #136]	; (80118e4 <ip4_output_if_src+0x158>)
 801185c:	681a      	ldr	r2, [r3, #0]
 801185e:	69fb      	ldr	r3, [r7, #28]
 8011860:	60da      	str	r2, [r3, #12]
 8011862:	e003      	b.n	801186c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011864:	68bb      	ldr	r3, [r7, #8]
 8011866:	681a      	ldr	r2, [r3, #0]
 8011868:	69fb      	ldr	r3, [r7, #28]
 801186a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801186c:	69fb      	ldr	r3, [r7, #28]
 801186e:	2200      	movs	r2, #0
 8011870:	729a      	strb	r2, [r3, #10]
 8011872:	2200      	movs	r2, #0
 8011874:	72da      	strb	r2, [r3, #11]
 8011876:	e00f      	b.n	8011898 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	895b      	ldrh	r3, [r3, #10]
 801187c:	2b13      	cmp	r3, #19
 801187e:	d802      	bhi.n	8011886 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011880:	f06f 0301 	mvn.w	r3, #1
 8011884:	e020      	b.n	80118c8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801188c:	69fb      	ldr	r3, [r7, #28]
 801188e:	691b      	ldr	r3, [r3, #16]
 8011890:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011892:	f107 0314 	add.w	r3, r7, #20
 8011896:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801189a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801189c:	2b00      	cmp	r3, #0
 801189e:	d00c      	beq.n	80118ba <ip4_output_if_src+0x12e>
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	891a      	ldrh	r2, [r3, #8]
 80118a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80118a8:	429a      	cmp	r2, r3
 80118aa:	d906      	bls.n	80118ba <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80118ac:	687a      	ldr	r2, [r7, #4]
 80118ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80118b0:	68f8      	ldr	r0, [r7, #12]
 80118b2:	f000 fd53 	bl	801235c <ip4_frag>
 80118b6:	4603      	mov	r3, r0
 80118b8:	e006      	b.n	80118c8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80118ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118bc:	695b      	ldr	r3, [r3, #20]
 80118be:	687a      	ldr	r2, [r7, #4]
 80118c0:	68f9      	ldr	r1, [r7, #12]
 80118c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118c4:	4798      	blx	r3
 80118c6:	4603      	mov	r3, r0
}
 80118c8:	4618      	mov	r0, r3
 80118ca:	3720      	adds	r7, #32
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}
 80118d0:	08016298 	.word	0x08016298
 80118d4:	080162cc 	.word	0x080162cc
 80118d8:	080162d8 	.word	0x080162d8
 80118dc:	08016300 	.word	0x08016300
 80118e0:	2400be42 	.word	0x2400be42
 80118e4:	08016718 	.word	0x08016718

080118e8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80118e8:	b480      	push	{r7}
 80118ea:	b085      	sub	sp, #20
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
 80118f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80118fc:	d002      	beq.n	8011904 <ip4_addr_isbroadcast_u32+0x1c>
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d101      	bne.n	8011908 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011904:	2301      	movs	r3, #1
 8011906:	e02a      	b.n	801195e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801190e:	f003 0302 	and.w	r3, r3, #2
 8011912:	2b00      	cmp	r3, #0
 8011914:	d101      	bne.n	801191a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011916:	2300      	movs	r3, #0
 8011918:	e021      	b.n	801195e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	3304      	adds	r3, #4
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	687a      	ldr	r2, [r7, #4]
 8011922:	429a      	cmp	r2, r3
 8011924:	d101      	bne.n	801192a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011926:	2300      	movs	r3, #0
 8011928:	e019      	b.n	801195e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801192a:	68fa      	ldr	r2, [r7, #12]
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	3304      	adds	r3, #4
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	405a      	eors	r2, r3
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	3308      	adds	r3, #8
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	4013      	ands	r3, r2
 801193c:	2b00      	cmp	r3, #0
 801193e:	d10d      	bne.n	801195c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	3308      	adds	r3, #8
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	43da      	mvns	r2, r3
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	3308      	adds	r3, #8
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011954:	429a      	cmp	r2, r3
 8011956:	d101      	bne.n	801195c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011958:	2301      	movs	r3, #1
 801195a:	e000      	b.n	801195e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801195c:	2300      	movs	r3, #0
  }
}
 801195e:	4618      	mov	r0, r3
 8011960:	3714      	adds	r7, #20
 8011962:	46bd      	mov	sp, r7
 8011964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011968:	4770      	bx	lr
	...

0801196c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b084      	sub	sp, #16
 8011970:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011972:	2300      	movs	r3, #0
 8011974:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011976:	4b12      	ldr	r3, [pc, #72]	; (80119c0 <ip_reass_tmr+0x54>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801197c:	e018      	b.n	80119b0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	7fdb      	ldrb	r3, [r3, #31]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d00b      	beq.n	801199e <ip_reass_tmr+0x32>
      r->timer--;
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	7fdb      	ldrb	r3, [r3, #31]
 801198a:	3b01      	subs	r3, #1
 801198c:	b2da      	uxtb	r2, r3
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	60fb      	str	r3, [r7, #12]
 801199c:	e008      	b.n	80119b0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80119a8:	68b9      	ldr	r1, [r7, #8]
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f000 f80a 	bl	80119c4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d1e3      	bne.n	801197e <ip_reass_tmr+0x12>
    }
  }
}
 80119b6:	bf00      	nop
 80119b8:	bf00      	nop
 80119ba:	3710      	adds	r7, #16
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}
 80119c0:	2400be44 	.word	0x2400be44

080119c4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b088      	sub	sp, #32
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80119ce:	2300      	movs	r3, #0
 80119d0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80119d2:	683a      	ldr	r2, [r7, #0]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	d105      	bne.n	80119e6 <ip_reass_free_complete_datagram+0x22>
 80119da:	4b45      	ldr	r3, [pc, #276]	; (8011af0 <ip_reass_free_complete_datagram+0x12c>)
 80119dc:	22ab      	movs	r2, #171	; 0xab
 80119de:	4945      	ldr	r1, [pc, #276]	; (8011af4 <ip_reass_free_complete_datagram+0x130>)
 80119e0:	4845      	ldr	r0, [pc, #276]	; (8011af8 <ip_reass_free_complete_datagram+0x134>)
 80119e2:	f001 f8db 	bl	8012b9c <iprintf>
  if (prev != NULL) {
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d00a      	beq.n	8011a02 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	687a      	ldr	r2, [r7, #4]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d005      	beq.n	8011a02 <ip_reass_free_complete_datagram+0x3e>
 80119f6:	4b3e      	ldr	r3, [pc, #248]	; (8011af0 <ip_reass_free_complete_datagram+0x12c>)
 80119f8:	22ad      	movs	r2, #173	; 0xad
 80119fa:	4940      	ldr	r1, [pc, #256]	; (8011afc <ip_reass_free_complete_datagram+0x138>)
 80119fc:	483e      	ldr	r0, [pc, #248]	; (8011af8 <ip_reass_free_complete_datagram+0x134>)
 80119fe:	f001 f8cd 	bl	8012b9c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	685b      	ldr	r3, [r3, #4]
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	889b      	ldrh	r3, [r3, #4]
 8011a0e:	b29b      	uxth	r3, r3
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d12a      	bne.n	8011a6a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	681a      	ldr	r2, [r3, #0]
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011a22:	69bb      	ldr	r3, [r7, #24]
 8011a24:	6858      	ldr	r0, [r3, #4]
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	3308      	adds	r3, #8
 8011a2a:	2214      	movs	r2, #20
 8011a2c:	4619      	mov	r1, r3
 8011a2e:	f001 f9e5 	bl	8012dfc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011a32:	2101      	movs	r1, #1
 8011a34:	69b8      	ldr	r0, [r7, #24]
 8011a36:	f7ff fc3d 	bl	80112b4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011a3a:	69b8      	ldr	r0, [r7, #24]
 8011a3c:	f7f8 f9d4 	bl	8009de8 <pbuf_clen>
 8011a40:	4603      	mov	r3, r0
 8011a42:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011a44:	8bfa      	ldrh	r2, [r7, #30]
 8011a46:	8a7b      	ldrh	r3, [r7, #18]
 8011a48:	4413      	add	r3, r2
 8011a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a4e:	db05      	blt.n	8011a5c <ip_reass_free_complete_datagram+0x98>
 8011a50:	4b27      	ldr	r3, [pc, #156]	; (8011af0 <ip_reass_free_complete_datagram+0x12c>)
 8011a52:	22bc      	movs	r2, #188	; 0xbc
 8011a54:	492a      	ldr	r1, [pc, #168]	; (8011b00 <ip_reass_free_complete_datagram+0x13c>)
 8011a56:	4828      	ldr	r0, [pc, #160]	; (8011af8 <ip_reass_free_complete_datagram+0x134>)
 8011a58:	f001 f8a0 	bl	8012b9c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011a5c:	8bfa      	ldrh	r2, [r7, #30]
 8011a5e:	8a7b      	ldrh	r3, [r7, #18]
 8011a60:	4413      	add	r3, r2
 8011a62:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011a64:	69b8      	ldr	r0, [r7, #24]
 8011a66:	f7f8 f931 	bl	8009ccc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	685b      	ldr	r3, [r3, #4]
 8011a6e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011a70:	e01f      	b.n	8011ab2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011a72:	69bb      	ldr	r3, [r7, #24]
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011a78:	69bb      	ldr	r3, [r7, #24]
 8011a7a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011a82:	68f8      	ldr	r0, [r7, #12]
 8011a84:	f7f8 f9b0 	bl	8009de8 <pbuf_clen>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011a8c:	8bfa      	ldrh	r2, [r7, #30]
 8011a8e:	8a7b      	ldrh	r3, [r7, #18]
 8011a90:	4413      	add	r3, r2
 8011a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a96:	db05      	blt.n	8011aa4 <ip_reass_free_complete_datagram+0xe0>
 8011a98:	4b15      	ldr	r3, [pc, #84]	; (8011af0 <ip_reass_free_complete_datagram+0x12c>)
 8011a9a:	22cc      	movs	r2, #204	; 0xcc
 8011a9c:	4918      	ldr	r1, [pc, #96]	; (8011b00 <ip_reass_free_complete_datagram+0x13c>)
 8011a9e:	4816      	ldr	r0, [pc, #88]	; (8011af8 <ip_reass_free_complete_datagram+0x134>)
 8011aa0:	f001 f87c 	bl	8012b9c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011aa4:	8bfa      	ldrh	r2, [r7, #30]
 8011aa6:	8a7b      	ldrh	r3, [r7, #18]
 8011aa8:	4413      	add	r3, r2
 8011aaa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011aac:	68f8      	ldr	r0, [r7, #12]
 8011aae:	f7f8 f90d 	bl	8009ccc <pbuf_free>
  while (p != NULL) {
 8011ab2:	69bb      	ldr	r3, [r7, #24]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d1dc      	bne.n	8011a72 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011ab8:	6839      	ldr	r1, [r7, #0]
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f000 f8c2 	bl	8011c44 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011ac0:	4b10      	ldr	r3, [pc, #64]	; (8011b04 <ip_reass_free_complete_datagram+0x140>)
 8011ac2:	881b      	ldrh	r3, [r3, #0]
 8011ac4:	8bfa      	ldrh	r2, [r7, #30]
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d905      	bls.n	8011ad6 <ip_reass_free_complete_datagram+0x112>
 8011aca:	4b09      	ldr	r3, [pc, #36]	; (8011af0 <ip_reass_free_complete_datagram+0x12c>)
 8011acc:	22d2      	movs	r2, #210	; 0xd2
 8011ace:	490e      	ldr	r1, [pc, #56]	; (8011b08 <ip_reass_free_complete_datagram+0x144>)
 8011ad0:	4809      	ldr	r0, [pc, #36]	; (8011af8 <ip_reass_free_complete_datagram+0x134>)
 8011ad2:	f001 f863 	bl	8012b9c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011ad6:	4b0b      	ldr	r3, [pc, #44]	; (8011b04 <ip_reass_free_complete_datagram+0x140>)
 8011ad8:	881a      	ldrh	r2, [r3, #0]
 8011ada:	8bfb      	ldrh	r3, [r7, #30]
 8011adc:	1ad3      	subs	r3, r2, r3
 8011ade:	b29a      	uxth	r2, r3
 8011ae0:	4b08      	ldr	r3, [pc, #32]	; (8011b04 <ip_reass_free_complete_datagram+0x140>)
 8011ae2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011ae4:	8bfb      	ldrh	r3, [r7, #30]
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3720      	adds	r7, #32
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}
 8011aee:	bf00      	nop
 8011af0:	08016330 	.word	0x08016330
 8011af4:	0801636c 	.word	0x0801636c
 8011af8:	08016378 	.word	0x08016378
 8011afc:	080163a0 	.word	0x080163a0
 8011b00:	080163b4 	.word	0x080163b4
 8011b04:	2400be48 	.word	0x2400be48
 8011b08:	080163d4 	.word	0x080163d4

08011b0c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b08a      	sub	sp, #40	; 0x28
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011b16:	2300      	movs	r3, #0
 8011b18:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011b22:	2300      	movs	r3, #0
 8011b24:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011b26:	2300      	movs	r3, #0
 8011b28:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011b2a:	4b28      	ldr	r3, [pc, #160]	; (8011bcc <ip_reass_remove_oldest_datagram+0xc0>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011b30:	e030      	b.n	8011b94 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b34:	695a      	ldr	r2, [r3, #20]
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	68db      	ldr	r3, [r3, #12]
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d10c      	bne.n	8011b58 <ip_reass_remove_oldest_datagram+0x4c>
 8011b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b40:	699a      	ldr	r2, [r3, #24]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	691b      	ldr	r3, [r3, #16]
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d106      	bne.n	8011b58 <ip_reass_remove_oldest_datagram+0x4c>
 8011b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b4c:	899a      	ldrh	r2, [r3, #12]
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	889b      	ldrh	r3, [r3, #4]
 8011b52:	b29b      	uxth	r3, r3
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d014      	beq.n	8011b82 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	3301      	adds	r3, #1
 8011b5c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011b5e:	6a3b      	ldr	r3, [r7, #32]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d104      	bne.n	8011b6e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b66:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011b68:	69fb      	ldr	r3, [r7, #28]
 8011b6a:	61bb      	str	r3, [r7, #24]
 8011b6c:	e009      	b.n	8011b82 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b70:	7fda      	ldrb	r2, [r3, #31]
 8011b72:	6a3b      	ldr	r3, [r7, #32]
 8011b74:	7fdb      	ldrb	r3, [r3, #31]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d803      	bhi.n	8011b82 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011b7e:	69fb      	ldr	r3, [r7, #28]
 8011b80:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d001      	beq.n	8011b8e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d1cb      	bne.n	8011b32 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011b9a:	6a3b      	ldr	r3, [r7, #32]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d008      	beq.n	8011bb2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011ba0:	69b9      	ldr	r1, [r7, #24]
 8011ba2:	6a38      	ldr	r0, [r7, #32]
 8011ba4:	f7ff ff0e 	bl	80119c4 <ip_reass_free_complete_datagram>
 8011ba8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011baa:	697a      	ldr	r2, [r7, #20]
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	4413      	add	r3, r2
 8011bb0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011bb2:	697a      	ldr	r2, [r7, #20]
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	da02      	bge.n	8011bc0 <ip_reass_remove_oldest_datagram+0xb4>
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	2b01      	cmp	r3, #1
 8011bbe:	dcac      	bgt.n	8011b1a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011bc0:	697b      	ldr	r3, [r7, #20]
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3728      	adds	r7, #40	; 0x28
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}
 8011bca:	bf00      	nop
 8011bcc:	2400be44 	.word	0x2400be44

08011bd0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b084      	sub	sp, #16
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011bda:	2004      	movs	r0, #4
 8011bdc:	f7f7 f95e 	bl	8008e9c <memp_malloc>
 8011be0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d110      	bne.n	8011c0a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011be8:	6839      	ldr	r1, [r7, #0]
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	f7ff ff8e 	bl	8011b0c <ip_reass_remove_oldest_datagram>
 8011bf0:	4602      	mov	r2, r0
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	4293      	cmp	r3, r2
 8011bf6:	dc03      	bgt.n	8011c00 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011bf8:	2004      	movs	r0, #4
 8011bfa:	f7f7 f94f 	bl	8008e9c <memp_malloc>
 8011bfe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d101      	bne.n	8011c0a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011c06:	2300      	movs	r3, #0
 8011c08:	e016      	b.n	8011c38 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011c0a:	2220      	movs	r2, #32
 8011c0c:	2100      	movs	r1, #0
 8011c0e:	68f8      	ldr	r0, [r7, #12]
 8011c10:	f001 f829 	bl	8012c66 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	220f      	movs	r2, #15
 8011c18:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011c1a:	4b09      	ldr	r3, [pc, #36]	; (8011c40 <ip_reass_enqueue_new_datagram+0x70>)
 8011c1c:	681a      	ldr	r2, [r3, #0]
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011c22:	4a07      	ldr	r2, [pc, #28]	; (8011c40 <ip_reass_enqueue_new_datagram+0x70>)
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	3308      	adds	r3, #8
 8011c2c:	2214      	movs	r2, #20
 8011c2e:	6879      	ldr	r1, [r7, #4]
 8011c30:	4618      	mov	r0, r3
 8011c32:	f001 f8e3 	bl	8012dfc <memcpy>
  return ipr;
 8011c36:	68fb      	ldr	r3, [r7, #12]
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3710      	adds	r7, #16
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}
 8011c40:	2400be44 	.word	0x2400be44

08011c44 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b082      	sub	sp, #8
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011c4e:	4b10      	ldr	r3, [pc, #64]	; (8011c90 <ip_reass_dequeue_datagram+0x4c>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	687a      	ldr	r2, [r7, #4]
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d104      	bne.n	8011c62 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	4a0c      	ldr	r2, [pc, #48]	; (8011c90 <ip_reass_dequeue_datagram+0x4c>)
 8011c5e:	6013      	str	r3, [r2, #0]
 8011c60:	e00d      	b.n	8011c7e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d106      	bne.n	8011c76 <ip_reass_dequeue_datagram+0x32>
 8011c68:	4b0a      	ldr	r3, [pc, #40]	; (8011c94 <ip_reass_dequeue_datagram+0x50>)
 8011c6a:	f240 1245 	movw	r2, #325	; 0x145
 8011c6e:	490a      	ldr	r1, [pc, #40]	; (8011c98 <ip_reass_dequeue_datagram+0x54>)
 8011c70:	480a      	ldr	r0, [pc, #40]	; (8011c9c <ip_reass_dequeue_datagram+0x58>)
 8011c72:	f000 ff93 	bl	8012b9c <iprintf>
    prev->next = ipr->next;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681a      	ldr	r2, [r3, #0]
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011c7e:	6879      	ldr	r1, [r7, #4]
 8011c80:	2004      	movs	r0, #4
 8011c82:	f7f7 f981 	bl	8008f88 <memp_free>
}
 8011c86:	bf00      	nop
 8011c88:	3708      	adds	r7, #8
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}
 8011c8e:	bf00      	nop
 8011c90:	2400be44 	.word	0x2400be44
 8011c94:	08016330 	.word	0x08016330
 8011c98:	080163f8 	.word	0x080163f8
 8011c9c:	08016378 	.word	0x08016378

08011ca0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b08c      	sub	sp, #48	; 0x30
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	60f8      	str	r0, [r7, #12]
 8011ca8:	60b9      	str	r1, [r7, #8]
 8011caa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011cac:	2300      	movs	r3, #0
 8011cae:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011cb0:	2301      	movs	r3, #1
 8011cb2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	685b      	ldr	r3, [r3, #4]
 8011cb8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011cba:	69fb      	ldr	r3, [r7, #28]
 8011cbc:	885b      	ldrh	r3, [r3, #2]
 8011cbe:	b29b      	uxth	r3, r3
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f7f6 fb6d 	bl	80083a0 <lwip_htons>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011cca:	69fb      	ldr	r3, [r7, #28]
 8011ccc:	781b      	ldrb	r3, [r3, #0]
 8011cce:	f003 030f 	and.w	r3, r3, #15
 8011cd2:	b2db      	uxtb	r3, r3
 8011cd4:	009b      	lsls	r3, r3, #2
 8011cd6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011cd8:	7e7b      	ldrb	r3, [r7, #25]
 8011cda:	b29b      	uxth	r3, r3
 8011cdc:	8b7a      	ldrh	r2, [r7, #26]
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	d202      	bcs.n	8011ce8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ce6:	e135      	b.n	8011f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011ce8:	7e7b      	ldrb	r3, [r7, #25]
 8011cea:	b29b      	uxth	r3, r3
 8011cec:	8b7a      	ldrh	r2, [r7, #26]
 8011cee:	1ad3      	subs	r3, r2, r3
 8011cf0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011cf2:	69fb      	ldr	r3, [r7, #28]
 8011cf4:	88db      	ldrh	r3, [r3, #6]
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7f6 fb51 	bl	80083a0 <lwip_htons>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011d04:	b29b      	uxth	r3, r3
 8011d06:	00db      	lsls	r3, r3, #3
 8011d08:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	685b      	ldr	r3, [r3, #4]
 8011d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d12:	2200      	movs	r2, #0
 8011d14:	701a      	strb	r2, [r3, #0]
 8011d16:	2200      	movs	r2, #0
 8011d18:	705a      	strb	r2, [r3, #1]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	709a      	strb	r2, [r3, #2]
 8011d1e:	2200      	movs	r2, #0
 8011d20:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d24:	8afa      	ldrh	r2, [r7, #22]
 8011d26:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011d28:	8afa      	ldrh	r2, [r7, #22]
 8011d2a:	8b7b      	ldrh	r3, [r7, #26]
 8011d2c:	4413      	add	r3, r2
 8011d2e:	b29a      	uxth	r2, r3
 8011d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d32:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d36:	88db      	ldrh	r3, [r3, #6]
 8011d38:	b29b      	uxth	r3, r3
 8011d3a:	8afa      	ldrh	r2, [r7, #22]
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d902      	bls.n	8011d46 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d44:	e106      	b.n	8011f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	685b      	ldr	r3, [r3, #4]
 8011d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8011d4c:	e068      	b.n	8011e20 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d50:	685b      	ldr	r3, [r3, #4]
 8011d52:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d56:	889b      	ldrh	r3, [r3, #4]
 8011d58:	b29a      	uxth	r2, r3
 8011d5a:	693b      	ldr	r3, [r7, #16]
 8011d5c:	889b      	ldrh	r3, [r3, #4]
 8011d5e:	b29b      	uxth	r3, r3
 8011d60:	429a      	cmp	r2, r3
 8011d62:	d235      	bcs.n	8011dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d68:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d020      	beq.n	8011db2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d72:	889b      	ldrh	r3, [r3, #4]
 8011d74:	b29a      	uxth	r2, r3
 8011d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d78:	88db      	ldrh	r3, [r3, #6]
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d307      	bcc.n	8011d90 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d82:	88db      	ldrh	r3, [r3, #6]
 8011d84:	b29a      	uxth	r2, r3
 8011d86:	693b      	ldr	r3, [r7, #16]
 8011d88:	889b      	ldrh	r3, [r3, #4]
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d902      	bls.n	8011d96 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d94:	e0de      	b.n	8011f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d98:	68ba      	ldr	r2, [r7, #8]
 8011d9a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d9e:	88db      	ldrh	r3, [r3, #6]
 8011da0:	b29a      	uxth	r2, r3
 8011da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da4:	889b      	ldrh	r3, [r3, #4]
 8011da6:	b29b      	uxth	r3, r3
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d03d      	beq.n	8011e28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011dac:	2300      	movs	r3, #0
 8011dae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011db0:	e03a      	b.n	8011e28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db4:	88db      	ldrh	r3, [r3, #6]
 8011db6:	b29a      	uxth	r2, r3
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	889b      	ldrh	r3, [r3, #4]
 8011dbc:	b29b      	uxth	r3, r3
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	d902      	bls.n	8011dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011dc6:	e0c5      	b.n	8011f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	68ba      	ldr	r2, [r7, #8]
 8011dcc:	605a      	str	r2, [r3, #4]
      break;
 8011dce:	e02b      	b.n	8011e28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd2:	889b      	ldrh	r3, [r3, #4]
 8011dd4:	b29a      	uxth	r2, r3
 8011dd6:	693b      	ldr	r3, [r7, #16]
 8011dd8:	889b      	ldrh	r3, [r3, #4]
 8011dda:	b29b      	uxth	r3, r3
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d102      	bne.n	8011de6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011de4:	e0b6      	b.n	8011f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de8:	889b      	ldrh	r3, [r3, #4]
 8011dea:	b29a      	uxth	r2, r3
 8011dec:	693b      	ldr	r3, [r7, #16]
 8011dee:	88db      	ldrh	r3, [r3, #6]
 8011df0:	b29b      	uxth	r3, r3
 8011df2:	429a      	cmp	r2, r3
 8011df4:	d202      	bcs.n	8011dfc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011dfa:	e0ab      	b.n	8011f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d009      	beq.n	8011e16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e04:	88db      	ldrh	r3, [r3, #6]
 8011e06:	b29a      	uxth	r2, r3
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	889b      	ldrh	r3, [r3, #4]
 8011e0c:	b29b      	uxth	r3, r3
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d001      	beq.n	8011e16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011e12:	2300      	movs	r3, #0
 8011e14:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011e1c:	693b      	ldr	r3, [r7, #16]
 8011e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d193      	bne.n	8011d4e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011e26:	e000      	b.n	8011e2a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011e28:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d12d      	bne.n	8011e8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d01c      	beq.n	8011e70 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e38:	88db      	ldrh	r3, [r3, #6]
 8011e3a:	b29a      	uxth	r2, r3
 8011e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e3e:	889b      	ldrh	r3, [r3, #4]
 8011e40:	b29b      	uxth	r3, r3
 8011e42:	429a      	cmp	r2, r3
 8011e44:	d906      	bls.n	8011e54 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011e46:	4b45      	ldr	r3, [pc, #276]	; (8011f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011e48:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011e4c:	4944      	ldr	r1, [pc, #272]	; (8011f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011e4e:	4845      	ldr	r0, [pc, #276]	; (8011f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011e50:	f000 fea4 	bl	8012b9c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e56:	68ba      	ldr	r2, [r7, #8]
 8011e58:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e5c:	88db      	ldrh	r3, [r3, #6]
 8011e5e:	b29a      	uxth	r2, r3
 8011e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e62:	889b      	ldrh	r3, [r3, #4]
 8011e64:	b29b      	uxth	r3, r3
 8011e66:	429a      	cmp	r2, r3
 8011e68:	d010      	beq.n	8011e8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	623b      	str	r3, [r7, #32]
 8011e6e:	e00d      	b.n	8011e8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d006      	beq.n	8011e86 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011e78:	4b38      	ldr	r3, [pc, #224]	; (8011f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011e7a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8011e7e:	493a      	ldr	r1, [pc, #232]	; (8011f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011e80:	4838      	ldr	r0, [pc, #224]	; (8011f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011e82:	f000 fe8b 	bl	8012b9c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	68ba      	ldr	r2, [r7, #8]
 8011e8a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d105      	bne.n	8011e9e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	7f9b      	ldrb	r3, [r3, #30]
 8011e96:	f003 0301 	and.w	r3, r3, #1
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d059      	beq.n	8011f52 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011e9e:	6a3b      	ldr	r3, [r7, #32]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d04f      	beq.n	8011f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	685b      	ldr	r3, [r3, #4]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d006      	beq.n	8011eba <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	685b      	ldr	r3, [r3, #4]
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	889b      	ldrh	r3, [r3, #4]
 8011eb4:	b29b      	uxth	r3, r3
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d002      	beq.n	8011ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	623b      	str	r3, [r7, #32]
 8011ebe:	e041      	b.n	8011f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011eca:	e012      	b.n	8011ef2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ece:	685b      	ldr	r3, [r3, #4]
 8011ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8011ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed4:	88db      	ldrh	r3, [r3, #6]
 8011ed6:	b29a      	uxth	r2, r3
 8011ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eda:	889b      	ldrh	r3, [r3, #4]
 8011edc:	b29b      	uxth	r3, r3
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	d002      	beq.n	8011ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	623b      	str	r3, [r7, #32]
            break;
 8011ee6:	e007      	b.n	8011ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eea:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d1e9      	bne.n	8011ecc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011ef8:	6a3b      	ldr	r3, [r7, #32]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d022      	beq.n	8011f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	685b      	ldr	r3, [r3, #4]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d106      	bne.n	8011f14 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011f06:	4b15      	ldr	r3, [pc, #84]	; (8011f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011f08:	f240 12df 	movw	r2, #479	; 0x1df
 8011f0c:	4917      	ldr	r1, [pc, #92]	; (8011f6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011f0e:	4815      	ldr	r0, [pc, #84]	; (8011f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011f10:	f000 fe44 	bl	8012b9c <iprintf>
          LWIP_ASSERT("sanity check",
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	685b      	ldr	r3, [r3, #4]
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d106      	bne.n	8011f2e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011f20:	4b0e      	ldr	r3, [pc, #56]	; (8011f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011f22:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011f26:	4911      	ldr	r1, [pc, #68]	; (8011f6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011f28:	480e      	ldr	r0, [pc, #56]	; (8011f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011f2a:	f000 fe37 	bl	8012b9c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d006      	beq.n	8011f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011f36:	4b09      	ldr	r3, [pc, #36]	; (8011f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011f38:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8011f3c:	490c      	ldr	r1, [pc, #48]	; (8011f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011f3e:	4809      	ldr	r0, [pc, #36]	; (8011f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011f40:	f000 fe2c 	bl	8012b9c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011f44:	6a3b      	ldr	r3, [r7, #32]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	bf14      	ite	ne
 8011f4a:	2301      	movne	r3, #1
 8011f4c:	2300      	moveq	r3, #0
 8011f4e:	b2db      	uxtb	r3, r3
 8011f50:	e000      	b.n	8011f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011f52:	2300      	movs	r3, #0
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	3730      	adds	r7, #48	; 0x30
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}
 8011f5c:	08016330 	.word	0x08016330
 8011f60:	08016414 	.word	0x08016414
 8011f64:	08016378 	.word	0x08016378
 8011f68:	08016434 	.word	0x08016434
 8011f6c:	0801646c 	.word	0x0801646c
 8011f70:	0801647c 	.word	0x0801647c

08011f74 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b08e      	sub	sp, #56	; 0x38
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	685b      	ldr	r3, [r3, #4]
 8011f80:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	f003 030f 	and.w	r3, r3, #15
 8011f8a:	b2db      	uxtb	r3, r3
 8011f8c:	009b      	lsls	r3, r3, #2
 8011f8e:	b2db      	uxtb	r3, r3
 8011f90:	2b14      	cmp	r3, #20
 8011f92:	f040 8171 	bne.w	8012278 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f98:	88db      	ldrh	r3, [r3, #6]
 8011f9a:	b29b      	uxth	r3, r3
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7f6 f9ff 	bl	80083a0 <lwip_htons>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011fa8:	b29b      	uxth	r3, r3
 8011faa:	00db      	lsls	r3, r3, #3
 8011fac:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fb0:	885b      	ldrh	r3, [r3, #2]
 8011fb2:	b29b      	uxth	r3, r3
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7f6 f9f3 	bl	80083a0 <lwip_htons>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fc0:	781b      	ldrb	r3, [r3, #0]
 8011fc2:	f003 030f 	and.w	r3, r3, #15
 8011fc6:	b2db      	uxtb	r3, r3
 8011fc8:	009b      	lsls	r3, r3, #2
 8011fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8011fce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011fd2:	b29b      	uxth	r3, r3
 8011fd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	f0c0 8150 	bcc.w	801227c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011fdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011fe0:	b29b      	uxth	r3, r3
 8011fe2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011fe4:	1ad3      	subs	r3, r2, r3
 8011fe6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011fe8:	6878      	ldr	r0, [r7, #4]
 8011fea:	f7f7 fefd 	bl	8009de8 <pbuf_clen>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011ff2:	4b8c      	ldr	r3, [pc, #560]	; (8012224 <ip4_reass+0x2b0>)
 8011ff4:	881b      	ldrh	r3, [r3, #0]
 8011ff6:	461a      	mov	r2, r3
 8011ff8:	8c3b      	ldrh	r3, [r7, #32]
 8011ffa:	4413      	add	r3, r2
 8011ffc:	2b0a      	cmp	r3, #10
 8011ffe:	dd10      	ble.n	8012022 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012000:	8c3b      	ldrh	r3, [r7, #32]
 8012002:	4619      	mov	r1, r3
 8012004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012006:	f7ff fd81 	bl	8011b0c <ip_reass_remove_oldest_datagram>
 801200a:	4603      	mov	r3, r0
 801200c:	2b00      	cmp	r3, #0
 801200e:	f000 8137 	beq.w	8012280 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012012:	4b84      	ldr	r3, [pc, #528]	; (8012224 <ip4_reass+0x2b0>)
 8012014:	881b      	ldrh	r3, [r3, #0]
 8012016:	461a      	mov	r2, r3
 8012018:	8c3b      	ldrh	r3, [r7, #32]
 801201a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801201c:	2b0a      	cmp	r3, #10
 801201e:	f300 812f 	bgt.w	8012280 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012022:	4b81      	ldr	r3, [pc, #516]	; (8012228 <ip4_reass+0x2b4>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	633b      	str	r3, [r7, #48]	; 0x30
 8012028:	e015      	b.n	8012056 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801202a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801202c:	695a      	ldr	r2, [r3, #20]
 801202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012030:	68db      	ldr	r3, [r3, #12]
 8012032:	429a      	cmp	r2, r3
 8012034:	d10c      	bne.n	8012050 <ip4_reass+0xdc>
 8012036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012038:	699a      	ldr	r2, [r3, #24]
 801203a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801203c:	691b      	ldr	r3, [r3, #16]
 801203e:	429a      	cmp	r2, r3
 8012040:	d106      	bne.n	8012050 <ip4_reass+0xdc>
 8012042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012044:	899a      	ldrh	r2, [r3, #12]
 8012046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012048:	889b      	ldrh	r3, [r3, #4]
 801204a:	b29b      	uxth	r3, r3
 801204c:	429a      	cmp	r2, r3
 801204e:	d006      	beq.n	801205e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	633b      	str	r3, [r7, #48]	; 0x30
 8012056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012058:	2b00      	cmp	r3, #0
 801205a:	d1e6      	bne.n	801202a <ip4_reass+0xb6>
 801205c:	e000      	b.n	8012060 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801205e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012062:	2b00      	cmp	r3, #0
 8012064:	d109      	bne.n	801207a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012066:	8c3b      	ldrh	r3, [r7, #32]
 8012068:	4619      	mov	r1, r3
 801206a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801206c:	f7ff fdb0 	bl	8011bd0 <ip_reass_enqueue_new_datagram>
 8012070:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012074:	2b00      	cmp	r3, #0
 8012076:	d11c      	bne.n	80120b2 <ip4_reass+0x13e>
      goto nullreturn;
 8012078:	e105      	b.n	8012286 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801207a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801207c:	88db      	ldrh	r3, [r3, #6]
 801207e:	b29b      	uxth	r3, r3
 8012080:	4618      	mov	r0, r3
 8012082:	f7f6 f98d 	bl	80083a0 <lwip_htons>
 8012086:	4603      	mov	r3, r0
 8012088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801208c:	2b00      	cmp	r3, #0
 801208e:	d110      	bne.n	80120b2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012092:	89db      	ldrh	r3, [r3, #14]
 8012094:	4618      	mov	r0, r3
 8012096:	f7f6 f983 	bl	80083a0 <lwip_htons>
 801209a:	4603      	mov	r3, r0
 801209c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d006      	beq.n	80120b2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80120a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a6:	3308      	adds	r3, #8
 80120a8:	2214      	movs	r2, #20
 80120aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80120ac:	4618      	mov	r0, r3
 80120ae:	f000 fea5 	bl	8012dfc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80120b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b4:	88db      	ldrh	r3, [r3, #6]
 80120b6:	b29b      	uxth	r3, r3
 80120b8:	f003 0320 	and.w	r3, r3, #32
 80120bc:	2b00      	cmp	r3, #0
 80120be:	bf0c      	ite	eq
 80120c0:	2301      	moveq	r3, #1
 80120c2:	2300      	movne	r3, #0
 80120c4:	b2db      	uxtb	r3, r3
 80120c6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80120c8:	69fb      	ldr	r3, [r7, #28]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d00e      	beq.n	80120ec <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80120ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80120d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80120d2:	4413      	add	r3, r2
 80120d4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80120d6:	8b7a      	ldrh	r2, [r7, #26]
 80120d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80120da:	429a      	cmp	r2, r3
 80120dc:	f0c0 80a0 	bcc.w	8012220 <ip4_reass+0x2ac>
 80120e0:	8b7b      	ldrh	r3, [r7, #26]
 80120e2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80120e6:	4293      	cmp	r3, r2
 80120e8:	f200 809a 	bhi.w	8012220 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80120ec:	69fa      	ldr	r2, [r7, #28]
 80120ee:	6879      	ldr	r1, [r7, #4]
 80120f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80120f2:	f7ff fdd5 	bl	8011ca0 <ip_reass_chain_frag_into_datagram_and_validate>
 80120f6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80120fe:	f000 809b 	beq.w	8012238 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012102:	4b48      	ldr	r3, [pc, #288]	; (8012224 <ip4_reass+0x2b0>)
 8012104:	881a      	ldrh	r2, [r3, #0]
 8012106:	8c3b      	ldrh	r3, [r7, #32]
 8012108:	4413      	add	r3, r2
 801210a:	b29a      	uxth	r2, r3
 801210c:	4b45      	ldr	r3, [pc, #276]	; (8012224 <ip4_reass+0x2b0>)
 801210e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012110:	69fb      	ldr	r3, [r7, #28]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d00d      	beq.n	8012132 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012116:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012118:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801211a:	4413      	add	r3, r2
 801211c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012120:	8a7a      	ldrh	r2, [r7, #18]
 8012122:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012126:	7f9b      	ldrb	r3, [r3, #30]
 8012128:	f043 0301 	orr.w	r3, r3, #1
 801212c:	b2da      	uxtb	r2, r3
 801212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012130:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012132:	697b      	ldr	r3, [r7, #20]
 8012134:	2b01      	cmp	r3, #1
 8012136:	d171      	bne.n	801221c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801213a:	8b9b      	ldrh	r3, [r3, #28]
 801213c:	3314      	adds	r3, #20
 801213e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012142:	685b      	ldr	r3, [r3, #4]
 8012144:	685b      	ldr	r3, [r3, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	685b      	ldr	r3, [r3, #4]
 8012150:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012154:	3308      	adds	r3, #8
 8012156:	2214      	movs	r2, #20
 8012158:	4619      	mov	r1, r3
 801215a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801215c:	f000 fe4e 	bl	8012dfc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012160:	8a3b      	ldrh	r3, [r7, #16]
 8012162:	4618      	mov	r0, r3
 8012164:	f7f6 f91c 	bl	80083a0 <lwip_htons>
 8012168:	4603      	mov	r3, r0
 801216a:	461a      	mov	r2, r3
 801216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801216e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012172:	2200      	movs	r2, #0
 8012174:	719a      	strb	r2, [r3, #6]
 8012176:	2200      	movs	r2, #0
 8012178:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801217a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801217c:	2200      	movs	r2, #0
 801217e:	729a      	strb	r2, [r3, #10]
 8012180:	2200      	movs	r2, #0
 8012182:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012186:	685b      	ldr	r3, [r3, #4]
 8012188:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801218a:	e00d      	b.n	80121a8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801218c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801218e:	685b      	ldr	r3, [r3, #4]
 8012190:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012192:	2114      	movs	r1, #20
 8012194:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012196:	f7f7 fd13 	bl	8009bc0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801219a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	f7f7 fe63 	bl	8009e68 <pbuf_cat>
      r = iprh->next_pbuf;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80121a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d1ee      	bne.n	801218c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80121ae:	4b1e      	ldr	r3, [pc, #120]	; (8012228 <ip4_reass+0x2b4>)
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d102      	bne.n	80121be <ip4_reass+0x24a>
      ipr_prev = NULL;
 80121b8:	2300      	movs	r3, #0
 80121ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80121bc:	e010      	b.n	80121e0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80121be:	4b1a      	ldr	r3, [pc, #104]	; (8012228 <ip4_reass+0x2b4>)
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80121c4:	e007      	b.n	80121d6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80121c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121cc:	429a      	cmp	r2, r3
 80121ce:	d006      	beq.n	80121de <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80121d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80121d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d1f4      	bne.n	80121c6 <ip4_reass+0x252>
 80121dc:	e000      	b.n	80121e0 <ip4_reass+0x26c>
          break;
 80121de:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80121e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80121e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80121e4:	f7ff fd2e 	bl	8011c44 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	f7f7 fdfd 	bl	8009de8 <pbuf_clen>
 80121ee:	4603      	mov	r3, r0
 80121f0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80121f2:	4b0c      	ldr	r3, [pc, #48]	; (8012224 <ip4_reass+0x2b0>)
 80121f4:	881b      	ldrh	r3, [r3, #0]
 80121f6:	8c3a      	ldrh	r2, [r7, #32]
 80121f8:	429a      	cmp	r2, r3
 80121fa:	d906      	bls.n	801220a <ip4_reass+0x296>
 80121fc:	4b0b      	ldr	r3, [pc, #44]	; (801222c <ip4_reass+0x2b8>)
 80121fe:	f240 229b 	movw	r2, #667	; 0x29b
 8012202:	490b      	ldr	r1, [pc, #44]	; (8012230 <ip4_reass+0x2bc>)
 8012204:	480b      	ldr	r0, [pc, #44]	; (8012234 <ip4_reass+0x2c0>)
 8012206:	f000 fcc9 	bl	8012b9c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801220a:	4b06      	ldr	r3, [pc, #24]	; (8012224 <ip4_reass+0x2b0>)
 801220c:	881a      	ldrh	r2, [r3, #0]
 801220e:	8c3b      	ldrh	r3, [r7, #32]
 8012210:	1ad3      	subs	r3, r2, r3
 8012212:	b29a      	uxth	r2, r3
 8012214:	4b03      	ldr	r3, [pc, #12]	; (8012224 <ip4_reass+0x2b0>)
 8012216:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	e038      	b.n	801228e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801221c:	2300      	movs	r3, #0
 801221e:	e036      	b.n	801228e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012220:	bf00      	nop
 8012222:	e00a      	b.n	801223a <ip4_reass+0x2c6>
 8012224:	2400be48 	.word	0x2400be48
 8012228:	2400be44 	.word	0x2400be44
 801222c:	08016330 	.word	0x08016330
 8012230:	080164a0 	.word	0x080164a0
 8012234:	08016378 	.word	0x08016378
    goto nullreturn_ipr;
 8012238:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801223c:	2b00      	cmp	r3, #0
 801223e:	d106      	bne.n	801224e <ip4_reass+0x2da>
 8012240:	4b15      	ldr	r3, [pc, #84]	; (8012298 <ip4_reass+0x324>)
 8012242:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012246:	4915      	ldr	r1, [pc, #84]	; (801229c <ip4_reass+0x328>)
 8012248:	4815      	ldr	r0, [pc, #84]	; (80122a0 <ip4_reass+0x32c>)
 801224a:	f000 fca7 	bl	8012b9c <iprintf>
  if (ipr->p == NULL) {
 801224e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012250:	685b      	ldr	r3, [r3, #4]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d116      	bne.n	8012284 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012256:	4b13      	ldr	r3, [pc, #76]	; (80122a4 <ip4_reass+0x330>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801225c:	429a      	cmp	r2, r3
 801225e:	d006      	beq.n	801226e <ip4_reass+0x2fa>
 8012260:	4b0d      	ldr	r3, [pc, #52]	; (8012298 <ip4_reass+0x324>)
 8012262:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012266:	4910      	ldr	r1, [pc, #64]	; (80122a8 <ip4_reass+0x334>)
 8012268:	480d      	ldr	r0, [pc, #52]	; (80122a0 <ip4_reass+0x32c>)
 801226a:	f000 fc97 	bl	8012b9c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801226e:	2100      	movs	r1, #0
 8012270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012272:	f7ff fce7 	bl	8011c44 <ip_reass_dequeue_datagram>
 8012276:	e006      	b.n	8012286 <ip4_reass+0x312>
    goto nullreturn;
 8012278:	bf00      	nop
 801227a:	e004      	b.n	8012286 <ip4_reass+0x312>
    goto nullreturn;
 801227c:	bf00      	nop
 801227e:	e002      	b.n	8012286 <ip4_reass+0x312>
      goto nullreturn;
 8012280:	bf00      	nop
 8012282:	e000      	b.n	8012286 <ip4_reass+0x312>
  }

nullreturn:
 8012284:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f7f7 fd20 	bl	8009ccc <pbuf_free>
  return NULL;
 801228c:	2300      	movs	r3, #0
}
 801228e:	4618      	mov	r0, r3
 8012290:	3738      	adds	r7, #56	; 0x38
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}
 8012296:	bf00      	nop
 8012298:	08016330 	.word	0x08016330
 801229c:	080164bc 	.word	0x080164bc
 80122a0:	08016378 	.word	0x08016378
 80122a4:	2400be44 	.word	0x2400be44
 80122a8:	080164c8 	.word	0x080164c8

080122ac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80122b0:	2005      	movs	r0, #5
 80122b2:	f7f6 fdf3 	bl	8008e9c <memp_malloc>
 80122b6:	4603      	mov	r3, r0
}
 80122b8:	4618      	mov	r0, r3
 80122ba:	bd80      	pop	{r7, pc}

080122bc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b082      	sub	sp, #8
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d106      	bne.n	80122d8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80122ca:	4b07      	ldr	r3, [pc, #28]	; (80122e8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80122cc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80122d0:	4906      	ldr	r1, [pc, #24]	; (80122ec <ip_frag_free_pbuf_custom_ref+0x30>)
 80122d2:	4807      	ldr	r0, [pc, #28]	; (80122f0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80122d4:	f000 fc62 	bl	8012b9c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80122d8:	6879      	ldr	r1, [r7, #4]
 80122da:	2005      	movs	r0, #5
 80122dc:	f7f6 fe54 	bl	8008f88 <memp_free>
}
 80122e0:	bf00      	nop
 80122e2:	3708      	adds	r7, #8
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}
 80122e8:	08016330 	.word	0x08016330
 80122ec:	080164e8 	.word	0x080164e8
 80122f0:	08016378 	.word	0x08016378

080122f4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b084      	sub	sp, #16
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d106      	bne.n	8012314 <ipfrag_free_pbuf_custom+0x20>
 8012306:	4b11      	ldr	r3, [pc, #68]	; (801234c <ipfrag_free_pbuf_custom+0x58>)
 8012308:	f240 22ce 	movw	r2, #718	; 0x2ce
 801230c:	4910      	ldr	r1, [pc, #64]	; (8012350 <ipfrag_free_pbuf_custom+0x5c>)
 801230e:	4811      	ldr	r0, [pc, #68]	; (8012354 <ipfrag_free_pbuf_custom+0x60>)
 8012310:	f000 fc44 	bl	8012b9c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012314:	68fa      	ldr	r2, [r7, #12]
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	429a      	cmp	r2, r3
 801231a:	d006      	beq.n	801232a <ipfrag_free_pbuf_custom+0x36>
 801231c:	4b0b      	ldr	r3, [pc, #44]	; (801234c <ipfrag_free_pbuf_custom+0x58>)
 801231e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012322:	490d      	ldr	r1, [pc, #52]	; (8012358 <ipfrag_free_pbuf_custom+0x64>)
 8012324:	480b      	ldr	r0, [pc, #44]	; (8012354 <ipfrag_free_pbuf_custom+0x60>)
 8012326:	f000 fc39 	bl	8012b9c <iprintf>
  if (pcr->original != NULL) {
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	695b      	ldr	r3, [r3, #20]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d004      	beq.n	801233c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	695b      	ldr	r3, [r3, #20]
 8012336:	4618      	mov	r0, r3
 8012338:	f7f7 fcc8 	bl	8009ccc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801233c:	68f8      	ldr	r0, [r7, #12]
 801233e:	f7ff ffbd 	bl	80122bc <ip_frag_free_pbuf_custom_ref>
}
 8012342:	bf00      	nop
 8012344:	3710      	adds	r7, #16
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}
 801234a:	bf00      	nop
 801234c:	08016330 	.word	0x08016330
 8012350:	080164f4 	.word	0x080164f4
 8012354:	08016378 	.word	0x08016378
 8012358:	08016500 	.word	0x08016500

0801235c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b094      	sub	sp, #80	; 0x50
 8012360:	af02      	add	r7, sp, #8
 8012362:	60f8      	str	r0, [r7, #12]
 8012364:	60b9      	str	r1, [r7, #8]
 8012366:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012368:	2300      	movs	r3, #0
 801236a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012372:	3b14      	subs	r3, #20
 8012374:	2b00      	cmp	r3, #0
 8012376:	da00      	bge.n	801237a <ip4_frag+0x1e>
 8012378:	3307      	adds	r3, #7
 801237a:	10db      	asrs	r3, r3, #3
 801237c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801237e:	2314      	movs	r3, #20
 8012380:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	685b      	ldr	r3, [r3, #4]
 8012386:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801238a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238e:	781b      	ldrb	r3, [r3, #0]
 8012390:	f003 030f 	and.w	r3, r3, #15
 8012394:	b2db      	uxtb	r3, r3
 8012396:	009b      	lsls	r3, r3, #2
 8012398:	b2db      	uxtb	r3, r3
 801239a:	2b14      	cmp	r3, #20
 801239c:	d002      	beq.n	80123a4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801239e:	f06f 0305 	mvn.w	r3, #5
 80123a2:	e110      	b.n	80125c6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	895b      	ldrh	r3, [r3, #10]
 80123a8:	2b13      	cmp	r3, #19
 80123aa:	d809      	bhi.n	80123c0 <ip4_frag+0x64>
 80123ac:	4b88      	ldr	r3, [pc, #544]	; (80125d0 <ip4_frag+0x274>)
 80123ae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80123b2:	4988      	ldr	r1, [pc, #544]	; (80125d4 <ip4_frag+0x278>)
 80123b4:	4888      	ldr	r0, [pc, #544]	; (80125d8 <ip4_frag+0x27c>)
 80123b6:	f000 fbf1 	bl	8012b9c <iprintf>
 80123ba:	f06f 0305 	mvn.w	r3, #5
 80123be:	e102      	b.n	80125c6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80123c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c2:	88db      	ldrh	r3, [r3, #6]
 80123c4:	b29b      	uxth	r3, r3
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7f5 ffea 	bl	80083a0 <lwip_htons>
 80123cc:	4603      	mov	r3, r0
 80123ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80123d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80123d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80123da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80123e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	891b      	ldrh	r3, [r3, #8]
 80123e6:	3b14      	subs	r3, #20
 80123e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80123ec:	e0e1      	b.n	80125b2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80123ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80123f0:	00db      	lsls	r3, r3, #3
 80123f2:	b29b      	uxth	r3, r3
 80123f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80123f8:	4293      	cmp	r3, r2
 80123fa:	bf28      	it	cs
 80123fc:	4613      	movcs	r3, r2
 80123fe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012400:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012404:	2114      	movs	r1, #20
 8012406:	200e      	movs	r0, #14
 8012408:	f7f7 f97e 	bl	8009708 <pbuf_alloc>
 801240c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012410:	2b00      	cmp	r3, #0
 8012412:	f000 80d5 	beq.w	80125c0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012418:	895b      	ldrh	r3, [r3, #10]
 801241a:	2b13      	cmp	r3, #19
 801241c:	d806      	bhi.n	801242c <ip4_frag+0xd0>
 801241e:	4b6c      	ldr	r3, [pc, #432]	; (80125d0 <ip4_frag+0x274>)
 8012420:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012424:	496d      	ldr	r1, [pc, #436]	; (80125dc <ip4_frag+0x280>)
 8012426:	486c      	ldr	r0, [pc, #432]	; (80125d8 <ip4_frag+0x27c>)
 8012428:	f000 fbb8 	bl	8012b9c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242e:	685b      	ldr	r3, [r3, #4]
 8012430:	2214      	movs	r2, #20
 8012432:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012434:	4618      	mov	r0, r3
 8012436:	f000 fce1 	bl	8012dfc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243c:	685b      	ldr	r3, [r3, #4]
 801243e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012440:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012442:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012446:	e064      	b.n	8012512 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	895a      	ldrh	r2, [r3, #10]
 801244c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801244e:	1ad3      	subs	r3, r2, r3
 8012450:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	895b      	ldrh	r3, [r3, #10]
 8012456:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012458:	429a      	cmp	r2, r3
 801245a:	d906      	bls.n	801246a <ip4_frag+0x10e>
 801245c:	4b5c      	ldr	r3, [pc, #368]	; (80125d0 <ip4_frag+0x274>)
 801245e:	f240 322d 	movw	r2, #813	; 0x32d
 8012462:	495f      	ldr	r1, [pc, #380]	; (80125e0 <ip4_frag+0x284>)
 8012464:	485c      	ldr	r0, [pc, #368]	; (80125d8 <ip4_frag+0x27c>)
 8012466:	f000 fb99 	bl	8012b9c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801246a:	8bfa      	ldrh	r2, [r7, #30]
 801246c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012470:	4293      	cmp	r3, r2
 8012472:	bf28      	it	cs
 8012474:	4613      	movcs	r3, r2
 8012476:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801247a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801247e:	2b00      	cmp	r3, #0
 8012480:	d105      	bne.n	801248e <ip4_frag+0x132>
        poff = 0;
 8012482:	2300      	movs	r3, #0
 8012484:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	60fb      	str	r3, [r7, #12]
        continue;
 801248c:	e041      	b.n	8012512 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801248e:	f7ff ff0d 	bl	80122ac <ip_frag_alloc_pbuf_custom_ref>
 8012492:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012494:	69bb      	ldr	r3, [r7, #24]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d103      	bne.n	80124a2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801249a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801249c:	f7f7 fc16 	bl	8009ccc <pbuf_free>
        goto memerr;
 80124a0:	e08f      	b.n	80125c2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80124a2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80124a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80124aa:	4413      	add	r3, r2
 80124ac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80124b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80124b4:	9201      	str	r2, [sp, #4]
 80124b6:	9300      	str	r3, [sp, #0]
 80124b8:	4603      	mov	r3, r0
 80124ba:	2241      	movs	r2, #65	; 0x41
 80124bc:	2000      	movs	r0, #0
 80124be:	f7f7 fa4d 	bl	800995c <pbuf_alloced_custom>
 80124c2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80124c4:	697b      	ldr	r3, [r7, #20]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d106      	bne.n	80124d8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80124ca:	69b8      	ldr	r0, [r7, #24]
 80124cc:	f7ff fef6 	bl	80122bc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80124d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80124d2:	f7f7 fbfb 	bl	8009ccc <pbuf_free>
        goto memerr;
 80124d6:	e074      	b.n	80125c2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80124d8:	68f8      	ldr	r0, [r7, #12]
 80124da:	f7f7 fc9d 	bl	8009e18 <pbuf_ref>
      pcr->original = p;
 80124de:	69bb      	ldr	r3, [r7, #24]
 80124e0:	68fa      	ldr	r2, [r7, #12]
 80124e2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80124e4:	69bb      	ldr	r3, [r7, #24]
 80124e6:	4a3f      	ldr	r2, [pc, #252]	; (80125e4 <ip4_frag+0x288>)
 80124e8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80124ea:	6979      	ldr	r1, [r7, #20]
 80124ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80124ee:	f7f7 fcbb 	bl	8009e68 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80124f2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80124f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80124fa:	1ad3      	subs	r3, r2, r3
 80124fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012500:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012504:	2b00      	cmp	r3, #0
 8012506:	d004      	beq.n	8012512 <ip4_frag+0x1b6>
        poff = 0;
 8012508:	2300      	movs	r3, #0
 801250a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012512:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012516:	2b00      	cmp	r3, #0
 8012518:	d196      	bne.n	8012448 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801251a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801251c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012520:	4413      	add	r3, r2
 8012522:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012528:	f1a3 0213 	sub.w	r2, r3, #19
 801252c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012530:	429a      	cmp	r2, r3
 8012532:	bfcc      	ite	gt
 8012534:	2301      	movgt	r3, #1
 8012536:	2300      	movle	r3, #0
 8012538:	b2db      	uxtb	r3, r3
 801253a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801253c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012540:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012544:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012546:	6a3b      	ldr	r3, [r7, #32]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d002      	beq.n	8012552 <ip4_frag+0x1f6>
 801254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801254e:	2b00      	cmp	r3, #0
 8012550:	d003      	beq.n	801255a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012552:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012554:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012558:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801255a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801255c:	4618      	mov	r0, r3
 801255e:	f7f5 ff1f 	bl	80083a0 <lwip_htons>
 8012562:	4603      	mov	r3, r0
 8012564:	461a      	mov	r2, r3
 8012566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012568:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801256a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801256c:	3314      	adds	r3, #20
 801256e:	b29b      	uxth	r3, r3
 8012570:	4618      	mov	r0, r3
 8012572:	f7f5 ff15 	bl	80083a0 <lwip_htons>
 8012576:	4603      	mov	r3, r0
 8012578:	461a      	mov	r2, r3
 801257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801257c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012580:	2200      	movs	r2, #0
 8012582:	729a      	strb	r2, [r3, #10]
 8012584:	2200      	movs	r2, #0
 8012586:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	695b      	ldr	r3, [r3, #20]
 801258c:	687a      	ldr	r2, [r7, #4]
 801258e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012590:	68b8      	ldr	r0, [r7, #8]
 8012592:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012596:	f7f7 fb99 	bl	8009ccc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801259a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801259e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80125a0:	1ad3      	subs	r3, r2, r3
 80125a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80125a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80125aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80125ac:	4413      	add	r3, r2
 80125ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80125b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	f47f af19 	bne.w	80123ee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80125bc:	2300      	movs	r3, #0
 80125be:	e002      	b.n	80125c6 <ip4_frag+0x26a>
      goto memerr;
 80125c0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80125c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	3748      	adds	r7, #72	; 0x48
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}
 80125ce:	bf00      	nop
 80125d0:	08016330 	.word	0x08016330
 80125d4:	0801650c 	.word	0x0801650c
 80125d8:	08016378 	.word	0x08016378
 80125dc:	08016528 	.word	0x08016528
 80125e0:	08016548 	.word	0x08016548
 80125e4:	080122f5 	.word	0x080122f5

080125e8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b086      	sub	sp, #24
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
 80125f0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80125f2:	230e      	movs	r3, #14
 80125f4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	895b      	ldrh	r3, [r3, #10]
 80125fa:	2b0e      	cmp	r3, #14
 80125fc:	d96e      	bls.n	80126dc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	7bdb      	ldrb	r3, [r3, #15]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d106      	bne.n	8012614 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801260c:	3301      	adds	r3, #1
 801260e:	b2da      	uxtb	r2, r3
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	685b      	ldr	r3, [r3, #4]
 8012618:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801261a:	693b      	ldr	r3, [r7, #16]
 801261c:	7b1a      	ldrb	r2, [r3, #12]
 801261e:	7b5b      	ldrb	r3, [r3, #13]
 8012620:	021b      	lsls	r3, r3, #8
 8012622:	4313      	orrs	r3, r2
 8012624:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012626:	693b      	ldr	r3, [r7, #16]
 8012628:	781b      	ldrb	r3, [r3, #0]
 801262a:	f003 0301 	and.w	r3, r3, #1
 801262e:	2b00      	cmp	r3, #0
 8012630:	d023      	beq.n	801267a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012632:	693b      	ldr	r3, [r7, #16]
 8012634:	781b      	ldrb	r3, [r3, #0]
 8012636:	2b01      	cmp	r3, #1
 8012638:	d10f      	bne.n	801265a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801263a:	693b      	ldr	r3, [r7, #16]
 801263c:	785b      	ldrb	r3, [r3, #1]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d11b      	bne.n	801267a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012642:	693b      	ldr	r3, [r7, #16]
 8012644:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012646:	2b5e      	cmp	r3, #94	; 0x5e
 8012648:	d117      	bne.n	801267a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	7b5b      	ldrb	r3, [r3, #13]
 801264e:	f043 0310 	orr.w	r3, r3, #16
 8012652:	b2da      	uxtb	r2, r3
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	735a      	strb	r2, [r3, #13]
 8012658:	e00f      	b.n	801267a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801265a:	693b      	ldr	r3, [r7, #16]
 801265c:	2206      	movs	r2, #6
 801265e:	4928      	ldr	r1, [pc, #160]	; (8012700 <ethernet_input+0x118>)
 8012660:	4618      	mov	r0, r3
 8012662:	f000 faf0 	bl	8012c46 <memcmp>
 8012666:	4603      	mov	r3, r0
 8012668:	2b00      	cmp	r3, #0
 801266a:	d106      	bne.n	801267a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	7b5b      	ldrb	r3, [r3, #13]
 8012670:	f043 0308 	orr.w	r3, r3, #8
 8012674:	b2da      	uxtb	r2, r3
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801267a:	89fb      	ldrh	r3, [r7, #14]
 801267c:	2b08      	cmp	r3, #8
 801267e:	d003      	beq.n	8012688 <ethernet_input+0xa0>
 8012680:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012684:	d014      	beq.n	80126b0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012686:	e032      	b.n	80126ee <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801268e:	f003 0308 	and.w	r3, r3, #8
 8012692:	2b00      	cmp	r3, #0
 8012694:	d024      	beq.n	80126e0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012696:	8afb      	ldrh	r3, [r7, #22]
 8012698:	4619      	mov	r1, r3
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f7f7 fa90 	bl	8009bc0 <pbuf_remove_header>
 80126a0:	4603      	mov	r3, r0
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d11e      	bne.n	80126e4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80126a6:	6839      	ldr	r1, [r7, #0]
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f7fe ff21 	bl	80114f0 <ip4_input>
      break;
 80126ae:	e013      	b.n	80126d8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80126b0:	683b      	ldr	r3, [r7, #0]
 80126b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80126b6:	f003 0308 	and.w	r3, r3, #8
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d014      	beq.n	80126e8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80126be:	8afb      	ldrh	r3, [r7, #22]
 80126c0:	4619      	mov	r1, r3
 80126c2:	6878      	ldr	r0, [r7, #4]
 80126c4:	f7f7 fa7c 	bl	8009bc0 <pbuf_remove_header>
 80126c8:	4603      	mov	r3, r0
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d10e      	bne.n	80126ec <ethernet_input+0x104>
        etharp_input(p, netif);
 80126ce:	6839      	ldr	r1, [r7, #0]
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f7fe f89b 	bl	801080c <etharp_input>
      break;
 80126d6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80126d8:	2300      	movs	r3, #0
 80126da:	e00c      	b.n	80126f6 <ethernet_input+0x10e>
    goto free_and_return;
 80126dc:	bf00      	nop
 80126de:	e006      	b.n	80126ee <ethernet_input+0x106>
        goto free_and_return;
 80126e0:	bf00      	nop
 80126e2:	e004      	b.n	80126ee <ethernet_input+0x106>
        goto free_and_return;
 80126e4:	bf00      	nop
 80126e6:	e002      	b.n	80126ee <ethernet_input+0x106>
        goto free_and_return;
 80126e8:	bf00      	nop
 80126ea:	e000      	b.n	80126ee <ethernet_input+0x106>
        goto free_and_return;
 80126ec:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f7f7 faec 	bl	8009ccc <pbuf_free>
  return ERR_OK;
 80126f4:	2300      	movs	r3, #0
}
 80126f6:	4618      	mov	r0, r3
 80126f8:	3718      	adds	r7, #24
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}
 80126fe:	bf00      	nop
 8012700:	0801671c 	.word	0x0801671c

08012704 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012704:	b580      	push	{r7, lr}
 8012706:	b086      	sub	sp, #24
 8012708:	af00      	add	r7, sp, #0
 801270a:	60f8      	str	r0, [r7, #12]
 801270c:	60b9      	str	r1, [r7, #8]
 801270e:	607a      	str	r2, [r7, #4]
 8012710:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012712:	8c3b      	ldrh	r3, [r7, #32]
 8012714:	4618      	mov	r0, r3
 8012716:	f7f5 fe43 	bl	80083a0 <lwip_htons>
 801271a:	4603      	mov	r3, r0
 801271c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801271e:	210e      	movs	r1, #14
 8012720:	68b8      	ldr	r0, [r7, #8]
 8012722:	f7f7 fa3d 	bl	8009ba0 <pbuf_add_header>
 8012726:	4603      	mov	r3, r0
 8012728:	2b00      	cmp	r3, #0
 801272a:	d125      	bne.n	8012778 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012732:	693b      	ldr	r3, [r7, #16]
 8012734:	8afa      	ldrh	r2, [r7, #22]
 8012736:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	2206      	movs	r2, #6
 801273c:	6839      	ldr	r1, [r7, #0]
 801273e:	4618      	mov	r0, r3
 8012740:	f000 fb5c 	bl	8012dfc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	3306      	adds	r3, #6
 8012748:	2206      	movs	r2, #6
 801274a:	6879      	ldr	r1, [r7, #4]
 801274c:	4618      	mov	r0, r3
 801274e:	f000 fb55 	bl	8012dfc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012758:	2b06      	cmp	r3, #6
 801275a:	d006      	beq.n	801276a <ethernet_output+0x66>
 801275c:	4b0a      	ldr	r3, [pc, #40]	; (8012788 <ethernet_output+0x84>)
 801275e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012762:	490a      	ldr	r1, [pc, #40]	; (801278c <ethernet_output+0x88>)
 8012764:	480a      	ldr	r0, [pc, #40]	; (8012790 <ethernet_output+0x8c>)
 8012766:	f000 fa19 	bl	8012b9c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	699b      	ldr	r3, [r3, #24]
 801276e:	68b9      	ldr	r1, [r7, #8]
 8012770:	68f8      	ldr	r0, [r7, #12]
 8012772:	4798      	blx	r3
 8012774:	4603      	mov	r3, r0
 8012776:	e002      	b.n	801277e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012778:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801277a:	f06f 0301 	mvn.w	r3, #1
}
 801277e:	4618      	mov	r0, r3
 8012780:	3718      	adds	r7, #24
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}
 8012786:	bf00      	nop
 8012788:	08016558 	.word	0x08016558
 801278c:	08016590 	.word	0x08016590
 8012790:	080165c4 	.word	0x080165c4

08012794 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b086      	sub	sp, #24
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	60bb      	str	r3, [r7, #8]
 80127a2:	2304      	movs	r3, #4
 80127a4:	60fb      	str	r3, [r7, #12]
 80127a6:	2300      	movs	r3, #0
 80127a8:	613b      	str	r3, [r7, #16]
 80127aa:	2300      	movs	r3, #0
 80127ac:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80127ae:	f107 0308 	add.w	r3, r7, #8
 80127b2:	2100      	movs	r1, #0
 80127b4:	4618      	mov	r0, r3
 80127b6:	f7f2 ff15 	bl	80055e4 <osMessageCreate>
 80127ba:	4602      	mov	r2, r0
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d102      	bne.n	80127ce <sys_mbox_new+0x3a>
    return ERR_MEM;
 80127c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80127cc:	e000      	b.n	80127d0 <sys_mbox_new+0x3c>

  return ERR_OK;
 80127ce:	2300      	movs	r3, #0
}
 80127d0:	4618      	mov	r0, r3
 80127d2:	3718      	adds	r7, #24
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}

080127d8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b084      	sub	sp, #16
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	6839      	ldr	r1, [r7, #0]
 80127e8:	2200      	movs	r2, #0
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7f2 ff22 	bl	8005634 <osMessagePut>
 80127f0:	4603      	mov	r3, r0
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d102      	bne.n	80127fc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80127f6:	2300      	movs	r3, #0
 80127f8:	73fb      	strb	r3, [r7, #15]
 80127fa:	e001      	b.n	8012800 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80127fc:	23ff      	movs	r3, #255	; 0xff
 80127fe:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8012800:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012804:	4618      	mov	r0, r3
 8012806:	3710      	adds	r7, #16
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}

0801280c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b08c      	sub	sp, #48	; 0x30
 8012810:	af00      	add	r7, sp, #0
 8012812:	61f8      	str	r0, [r7, #28]
 8012814:	61b9      	str	r1, [r7, #24]
 8012816:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8012818:	f7f2 fd54 	bl	80052c4 <osKernelSysTick>
 801281c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d017      	beq.n	8012854 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	6819      	ldr	r1, [r3, #0]
 8012828:	f107 0320 	add.w	r3, r7, #32
 801282c:	697a      	ldr	r2, [r7, #20]
 801282e:	4618      	mov	r0, r3
 8012830:	f7f2 ff40 	bl	80056b4 <osMessageGet>

    if(event.status == osEventMessage)
 8012834:	6a3b      	ldr	r3, [r7, #32]
 8012836:	2b10      	cmp	r3, #16
 8012838:	d109      	bne.n	801284e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801283c:	461a      	mov	r2, r3
 801283e:	69bb      	ldr	r3, [r7, #24]
 8012840:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8012842:	f7f2 fd3f 	bl	80052c4 <osKernelSysTick>
 8012846:	4602      	mov	r2, r0
 8012848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801284a:	1ad3      	subs	r3, r2, r3
 801284c:	e019      	b.n	8012882 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801284e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012852:	e016      	b.n	8012882 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8012854:	69fb      	ldr	r3, [r7, #28]
 8012856:	6819      	ldr	r1, [r3, #0]
 8012858:	463b      	mov	r3, r7
 801285a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801285e:	4618      	mov	r0, r3
 8012860:	f7f2 ff28 	bl	80056b4 <osMessageGet>
 8012864:	f107 0320 	add.w	r3, r7, #32
 8012868:	463a      	mov	r2, r7
 801286a:	ca07      	ldmia	r2, {r0, r1, r2}
 801286c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8012870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012872:	461a      	mov	r2, r3
 8012874:	69bb      	ldr	r3, [r7, #24]
 8012876:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8012878:	f7f2 fd24 	bl	80052c4 <osKernelSysTick>
 801287c:	4602      	mov	r2, r0
 801287e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012880:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8012882:	4618      	mov	r0, r3
 8012884:	3730      	adds	r7, #48	; 0x30
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}

0801288a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801288a:	b480      	push	{r7}
 801288c:	b083      	sub	sp, #12
 801288e:	af00      	add	r7, sp, #0
 8012890:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d101      	bne.n	801289e <sys_mbox_valid+0x14>
    return 0;
 801289a:	2300      	movs	r3, #0
 801289c:	e000      	b.n	80128a0 <sys_mbox_valid+0x16>
  else
    return 1;
 801289e:	2301      	movs	r3, #1
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	370c      	adds	r7, #12
 80128a4:	46bd      	mov	sp, r7
 80128a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128aa:	4770      	bx	lr

080128ac <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80128b0:	4803      	ldr	r0, [pc, #12]	; (80128c0 <sys_init+0x14>)
 80128b2:	f7f2 fd77 	bl	80053a4 <osMutexCreate>
 80128b6:	4603      	mov	r3, r0
 80128b8:	4a02      	ldr	r2, [pc, #8]	; (80128c4 <sys_init+0x18>)
 80128ba:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80128bc:	bf00      	nop
 80128be:	bd80      	pop	{r7, pc}
 80128c0:	0801672c 	.word	0x0801672c
 80128c4:	2400be4c 	.word	0x2400be4c

080128c8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b084      	sub	sp, #16
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80128d0:	2300      	movs	r3, #0
 80128d2:	60bb      	str	r3, [r7, #8]
 80128d4:	2300      	movs	r3, #0
 80128d6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80128d8:	f107 0308 	add.w	r3, r7, #8
 80128dc:	4618      	mov	r0, r3
 80128de:	f7f2 fd61 	bl	80053a4 <osMutexCreate>
 80128e2:	4602      	mov	r2, r0
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d102      	bne.n	80128f6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80128f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128f4:	e000      	b.n	80128f8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80128f6:	2300      	movs	r3, #0
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3710      	adds	r7, #16
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}

08012900 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b082      	sub	sp, #8
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012910:	4618      	mov	r0, r3
 8012912:	f7f2 fd5f 	bl	80053d4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8012916:	bf00      	nop
 8012918:	3708      	adds	r7, #8
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}

0801291e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801291e:	b580      	push	{r7, lr}
 8012920:	b082      	sub	sp, #8
 8012922:	af00      	add	r7, sp, #0
 8012924:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	4618      	mov	r0, r3
 801292c:	f7f2 fda0 	bl	8005470 <osMutexRelease>
}
 8012930:	bf00      	nop
 8012932:	3708      	adds	r7, #8
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}

08012938 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b08c      	sub	sp, #48	; 0x30
 801293c:	af00      	add	r7, sp, #0
 801293e:	60f8      	str	r0, [r7, #12]
 8012940:	60b9      	str	r1, [r7, #8]
 8012942:	607a      	str	r2, [r7, #4]
 8012944:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8012946:	f107 0314 	add.w	r3, r7, #20
 801294a:	2200      	movs	r2, #0
 801294c:	601a      	str	r2, [r3, #0]
 801294e:	605a      	str	r2, [r3, #4]
 8012950:	609a      	str	r2, [r3, #8]
 8012952:	60da      	str	r2, [r3, #12]
 8012954:	611a      	str	r2, [r3, #16]
 8012956:	615a      	str	r2, [r3, #20]
 8012958:	619a      	str	r2, [r3, #24]
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	617b      	str	r3, [r7, #20]
 801295e:	68bb      	ldr	r3, [r7, #8]
 8012960:	61bb      	str	r3, [r7, #24]
 8012962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012964:	b21b      	sxth	r3, r3
 8012966:	83bb      	strh	r3, [r7, #28]
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801296c:	f107 0314 	add.w	r3, r7, #20
 8012970:	6879      	ldr	r1, [r7, #4]
 8012972:	4618      	mov	r0, r3
 8012974:	f7f2 fcb6 	bl	80052e4 <osThreadCreate>
 8012978:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801297a:	4618      	mov	r0, r3
 801297c:	3730      	adds	r7, #48	; 0x30
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}
	...

08012984 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8012988:	4b04      	ldr	r3, [pc, #16]	; (801299c <sys_arch_protect+0x18>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012990:	4618      	mov	r0, r3
 8012992:	f7f2 fd1f 	bl	80053d4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8012996:	2301      	movs	r3, #1
}
 8012998:	4618      	mov	r0, r3
 801299a:	bd80      	pop	{r7, pc}
 801299c:	2400be4c 	.word	0x2400be4c

080129a0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b082      	sub	sp, #8
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80129a8:	4b04      	ldr	r3, [pc, #16]	; (80129bc <sys_arch_unprotect+0x1c>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7f2 fd5f 	bl	8005470 <osMutexRelease>
}
 80129b2:	bf00      	nop
 80129b4:	3708      	adds	r7, #8
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}
 80129ba:	bf00      	nop
 80129bc:	2400be4c 	.word	0x2400be4c

080129c0 <rand>:
 80129c0:	4b16      	ldr	r3, [pc, #88]	; (8012a1c <rand+0x5c>)
 80129c2:	b510      	push	{r4, lr}
 80129c4:	681c      	ldr	r4, [r3, #0]
 80129c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80129c8:	b9b3      	cbnz	r3, 80129f8 <rand+0x38>
 80129ca:	2018      	movs	r0, #24
 80129cc:	f000 fa8e 	bl	8012eec <malloc>
 80129d0:	4602      	mov	r2, r0
 80129d2:	6320      	str	r0, [r4, #48]	; 0x30
 80129d4:	b920      	cbnz	r0, 80129e0 <rand+0x20>
 80129d6:	4b12      	ldr	r3, [pc, #72]	; (8012a20 <rand+0x60>)
 80129d8:	4812      	ldr	r0, [pc, #72]	; (8012a24 <rand+0x64>)
 80129da:	2152      	movs	r1, #82	; 0x52
 80129dc:	f000 fa1c 	bl	8012e18 <__assert_func>
 80129e0:	4911      	ldr	r1, [pc, #68]	; (8012a28 <rand+0x68>)
 80129e2:	4b12      	ldr	r3, [pc, #72]	; (8012a2c <rand+0x6c>)
 80129e4:	e9c0 1300 	strd	r1, r3, [r0]
 80129e8:	4b11      	ldr	r3, [pc, #68]	; (8012a30 <rand+0x70>)
 80129ea:	6083      	str	r3, [r0, #8]
 80129ec:	230b      	movs	r3, #11
 80129ee:	8183      	strh	r3, [r0, #12]
 80129f0:	2100      	movs	r1, #0
 80129f2:	2001      	movs	r0, #1
 80129f4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80129f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80129fa:	480e      	ldr	r0, [pc, #56]	; (8012a34 <rand+0x74>)
 80129fc:	690b      	ldr	r3, [r1, #16]
 80129fe:	694c      	ldr	r4, [r1, #20]
 8012a00:	4a0d      	ldr	r2, [pc, #52]	; (8012a38 <rand+0x78>)
 8012a02:	4358      	muls	r0, r3
 8012a04:	fb02 0004 	mla	r0, r2, r4, r0
 8012a08:	fba3 3202 	umull	r3, r2, r3, r2
 8012a0c:	3301      	adds	r3, #1
 8012a0e:	eb40 0002 	adc.w	r0, r0, r2
 8012a12:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012a16:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012a1a:	bd10      	pop	{r4, pc}
 8012a1c:	2400008c 	.word	0x2400008c
 8012a20:	08016734 	.word	0x08016734
 8012a24:	0801674b 	.word	0x0801674b
 8012a28:	abcd330e 	.word	0xabcd330e
 8012a2c:	e66d1234 	.word	0xe66d1234
 8012a30:	0005deec 	.word	0x0005deec
 8012a34:	5851f42d 	.word	0x5851f42d
 8012a38:	4c957f2d 	.word	0x4c957f2d

08012a3c <std>:
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	b510      	push	{r4, lr}
 8012a40:	4604      	mov	r4, r0
 8012a42:	e9c0 3300 	strd	r3, r3, [r0]
 8012a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012a4a:	6083      	str	r3, [r0, #8]
 8012a4c:	8181      	strh	r1, [r0, #12]
 8012a4e:	6643      	str	r3, [r0, #100]	; 0x64
 8012a50:	81c2      	strh	r2, [r0, #14]
 8012a52:	6183      	str	r3, [r0, #24]
 8012a54:	4619      	mov	r1, r3
 8012a56:	2208      	movs	r2, #8
 8012a58:	305c      	adds	r0, #92	; 0x5c
 8012a5a:	f000 f904 	bl	8012c66 <memset>
 8012a5e:	4b05      	ldr	r3, [pc, #20]	; (8012a74 <std+0x38>)
 8012a60:	6263      	str	r3, [r4, #36]	; 0x24
 8012a62:	4b05      	ldr	r3, [pc, #20]	; (8012a78 <std+0x3c>)
 8012a64:	62a3      	str	r3, [r4, #40]	; 0x28
 8012a66:	4b05      	ldr	r3, [pc, #20]	; (8012a7c <std+0x40>)
 8012a68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012a6a:	4b05      	ldr	r3, [pc, #20]	; (8012a80 <std+0x44>)
 8012a6c:	6224      	str	r4, [r4, #32]
 8012a6e:	6323      	str	r3, [r4, #48]	; 0x30
 8012a70:	bd10      	pop	{r4, pc}
 8012a72:	bf00      	nop
 8012a74:	08012bc1 	.word	0x08012bc1
 8012a78:	08012be3 	.word	0x08012be3
 8012a7c:	08012c1b 	.word	0x08012c1b
 8012a80:	08012c3f 	.word	0x08012c3f

08012a84 <stdio_exit_handler>:
 8012a84:	4a02      	ldr	r2, [pc, #8]	; (8012a90 <stdio_exit_handler+0xc>)
 8012a86:	4903      	ldr	r1, [pc, #12]	; (8012a94 <stdio_exit_handler+0x10>)
 8012a88:	4803      	ldr	r0, [pc, #12]	; (8012a98 <stdio_exit_handler+0x14>)
 8012a8a:	f000 b869 	b.w	8012b60 <_fwalk_sglue>
 8012a8e:	bf00      	nop
 8012a90:	24000034 	.word	0x24000034
 8012a94:	08013709 	.word	0x08013709
 8012a98:	24000040 	.word	0x24000040

08012a9c <cleanup_stdio>:
 8012a9c:	6841      	ldr	r1, [r0, #4]
 8012a9e:	4b0c      	ldr	r3, [pc, #48]	; (8012ad0 <cleanup_stdio+0x34>)
 8012aa0:	4299      	cmp	r1, r3
 8012aa2:	b510      	push	{r4, lr}
 8012aa4:	4604      	mov	r4, r0
 8012aa6:	d001      	beq.n	8012aac <cleanup_stdio+0x10>
 8012aa8:	f000 fe2e 	bl	8013708 <_fflush_r>
 8012aac:	68a1      	ldr	r1, [r4, #8]
 8012aae:	4b09      	ldr	r3, [pc, #36]	; (8012ad4 <cleanup_stdio+0x38>)
 8012ab0:	4299      	cmp	r1, r3
 8012ab2:	d002      	beq.n	8012aba <cleanup_stdio+0x1e>
 8012ab4:	4620      	mov	r0, r4
 8012ab6:	f000 fe27 	bl	8013708 <_fflush_r>
 8012aba:	68e1      	ldr	r1, [r4, #12]
 8012abc:	4b06      	ldr	r3, [pc, #24]	; (8012ad8 <cleanup_stdio+0x3c>)
 8012abe:	4299      	cmp	r1, r3
 8012ac0:	d004      	beq.n	8012acc <cleanup_stdio+0x30>
 8012ac2:	4620      	mov	r0, r4
 8012ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ac8:	f000 be1e 	b.w	8013708 <_fflush_r>
 8012acc:	bd10      	pop	{r4, pc}
 8012ace:	bf00      	nop
 8012ad0:	2400be50 	.word	0x2400be50
 8012ad4:	2400beb8 	.word	0x2400beb8
 8012ad8:	2400bf20 	.word	0x2400bf20

08012adc <global_stdio_init.part.0>:
 8012adc:	b510      	push	{r4, lr}
 8012ade:	4b0b      	ldr	r3, [pc, #44]	; (8012b0c <global_stdio_init.part.0+0x30>)
 8012ae0:	4c0b      	ldr	r4, [pc, #44]	; (8012b10 <global_stdio_init.part.0+0x34>)
 8012ae2:	4a0c      	ldr	r2, [pc, #48]	; (8012b14 <global_stdio_init.part.0+0x38>)
 8012ae4:	601a      	str	r2, [r3, #0]
 8012ae6:	4620      	mov	r0, r4
 8012ae8:	2200      	movs	r2, #0
 8012aea:	2104      	movs	r1, #4
 8012aec:	f7ff ffa6 	bl	8012a3c <std>
 8012af0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012af4:	2201      	movs	r2, #1
 8012af6:	2109      	movs	r1, #9
 8012af8:	f7ff ffa0 	bl	8012a3c <std>
 8012afc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012b00:	2202      	movs	r2, #2
 8012b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b06:	2112      	movs	r1, #18
 8012b08:	f7ff bf98 	b.w	8012a3c <std>
 8012b0c:	2400bf88 	.word	0x2400bf88
 8012b10:	2400be50 	.word	0x2400be50
 8012b14:	08012a85 	.word	0x08012a85

08012b18 <__sfp_lock_acquire>:
 8012b18:	4801      	ldr	r0, [pc, #4]	; (8012b20 <__sfp_lock_acquire+0x8>)
 8012b1a:	f000 b96d 	b.w	8012df8 <__retarget_lock_acquire_recursive>
 8012b1e:	bf00      	nop
 8012b20:	2400bf91 	.word	0x2400bf91

08012b24 <__sfp_lock_release>:
 8012b24:	4801      	ldr	r0, [pc, #4]	; (8012b2c <__sfp_lock_release+0x8>)
 8012b26:	f000 b968 	b.w	8012dfa <__retarget_lock_release_recursive>
 8012b2a:	bf00      	nop
 8012b2c:	2400bf91 	.word	0x2400bf91

08012b30 <__sinit>:
 8012b30:	b510      	push	{r4, lr}
 8012b32:	4604      	mov	r4, r0
 8012b34:	f7ff fff0 	bl	8012b18 <__sfp_lock_acquire>
 8012b38:	6a23      	ldr	r3, [r4, #32]
 8012b3a:	b11b      	cbz	r3, 8012b44 <__sinit+0x14>
 8012b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b40:	f7ff bff0 	b.w	8012b24 <__sfp_lock_release>
 8012b44:	4b04      	ldr	r3, [pc, #16]	; (8012b58 <__sinit+0x28>)
 8012b46:	6223      	str	r3, [r4, #32]
 8012b48:	4b04      	ldr	r3, [pc, #16]	; (8012b5c <__sinit+0x2c>)
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d1f5      	bne.n	8012b3c <__sinit+0xc>
 8012b50:	f7ff ffc4 	bl	8012adc <global_stdio_init.part.0>
 8012b54:	e7f2      	b.n	8012b3c <__sinit+0xc>
 8012b56:	bf00      	nop
 8012b58:	08012a9d 	.word	0x08012a9d
 8012b5c:	2400bf88 	.word	0x2400bf88

08012b60 <_fwalk_sglue>:
 8012b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b64:	4607      	mov	r7, r0
 8012b66:	4688      	mov	r8, r1
 8012b68:	4614      	mov	r4, r2
 8012b6a:	2600      	movs	r6, #0
 8012b6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012b70:	f1b9 0901 	subs.w	r9, r9, #1
 8012b74:	d505      	bpl.n	8012b82 <_fwalk_sglue+0x22>
 8012b76:	6824      	ldr	r4, [r4, #0]
 8012b78:	2c00      	cmp	r4, #0
 8012b7a:	d1f7      	bne.n	8012b6c <_fwalk_sglue+0xc>
 8012b7c:	4630      	mov	r0, r6
 8012b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b82:	89ab      	ldrh	r3, [r5, #12]
 8012b84:	2b01      	cmp	r3, #1
 8012b86:	d907      	bls.n	8012b98 <_fwalk_sglue+0x38>
 8012b88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	d003      	beq.n	8012b98 <_fwalk_sglue+0x38>
 8012b90:	4629      	mov	r1, r5
 8012b92:	4638      	mov	r0, r7
 8012b94:	47c0      	blx	r8
 8012b96:	4306      	orrs	r6, r0
 8012b98:	3568      	adds	r5, #104	; 0x68
 8012b9a:	e7e9      	b.n	8012b70 <_fwalk_sglue+0x10>

08012b9c <iprintf>:
 8012b9c:	b40f      	push	{r0, r1, r2, r3}
 8012b9e:	b507      	push	{r0, r1, r2, lr}
 8012ba0:	4906      	ldr	r1, [pc, #24]	; (8012bbc <iprintf+0x20>)
 8012ba2:	ab04      	add	r3, sp, #16
 8012ba4:	6808      	ldr	r0, [r1, #0]
 8012ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012baa:	6881      	ldr	r1, [r0, #8]
 8012bac:	9301      	str	r3, [sp, #4]
 8012bae:	f000 fa7b 	bl	80130a8 <_vfiprintf_r>
 8012bb2:	b003      	add	sp, #12
 8012bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bb8:	b004      	add	sp, #16
 8012bba:	4770      	bx	lr
 8012bbc:	2400008c 	.word	0x2400008c

08012bc0 <__sread>:
 8012bc0:	b510      	push	{r4, lr}
 8012bc2:	460c      	mov	r4, r1
 8012bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bc8:	f000 f8ce 	bl	8012d68 <_read_r>
 8012bcc:	2800      	cmp	r0, #0
 8012bce:	bfab      	itete	ge
 8012bd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8012bd4:	181b      	addge	r3, r3, r0
 8012bd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012bda:	bfac      	ite	ge
 8012bdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8012bde:	81a3      	strhlt	r3, [r4, #12]
 8012be0:	bd10      	pop	{r4, pc}

08012be2 <__swrite>:
 8012be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012be6:	461f      	mov	r7, r3
 8012be8:	898b      	ldrh	r3, [r1, #12]
 8012bea:	05db      	lsls	r3, r3, #23
 8012bec:	4605      	mov	r5, r0
 8012bee:	460c      	mov	r4, r1
 8012bf0:	4616      	mov	r6, r2
 8012bf2:	d505      	bpl.n	8012c00 <__swrite+0x1e>
 8012bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bf8:	2302      	movs	r3, #2
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	f000 f8a2 	bl	8012d44 <_lseek_r>
 8012c00:	89a3      	ldrh	r3, [r4, #12]
 8012c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012c0a:	81a3      	strh	r3, [r4, #12]
 8012c0c:	4632      	mov	r2, r6
 8012c0e:	463b      	mov	r3, r7
 8012c10:	4628      	mov	r0, r5
 8012c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c16:	f000 b8b9 	b.w	8012d8c <_write_r>

08012c1a <__sseek>:
 8012c1a:	b510      	push	{r4, lr}
 8012c1c:	460c      	mov	r4, r1
 8012c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c22:	f000 f88f 	bl	8012d44 <_lseek_r>
 8012c26:	1c43      	adds	r3, r0, #1
 8012c28:	89a3      	ldrh	r3, [r4, #12]
 8012c2a:	bf15      	itete	ne
 8012c2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8012c2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012c32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012c36:	81a3      	strheq	r3, [r4, #12]
 8012c38:	bf18      	it	ne
 8012c3a:	81a3      	strhne	r3, [r4, #12]
 8012c3c:	bd10      	pop	{r4, pc}

08012c3e <__sclose>:
 8012c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c42:	f000 b819 	b.w	8012c78 <_close_r>

08012c46 <memcmp>:
 8012c46:	b510      	push	{r4, lr}
 8012c48:	3901      	subs	r1, #1
 8012c4a:	4402      	add	r2, r0
 8012c4c:	4290      	cmp	r0, r2
 8012c4e:	d101      	bne.n	8012c54 <memcmp+0xe>
 8012c50:	2000      	movs	r0, #0
 8012c52:	e005      	b.n	8012c60 <memcmp+0x1a>
 8012c54:	7803      	ldrb	r3, [r0, #0]
 8012c56:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012c5a:	42a3      	cmp	r3, r4
 8012c5c:	d001      	beq.n	8012c62 <memcmp+0x1c>
 8012c5e:	1b18      	subs	r0, r3, r4
 8012c60:	bd10      	pop	{r4, pc}
 8012c62:	3001      	adds	r0, #1
 8012c64:	e7f2      	b.n	8012c4c <memcmp+0x6>

08012c66 <memset>:
 8012c66:	4402      	add	r2, r0
 8012c68:	4603      	mov	r3, r0
 8012c6a:	4293      	cmp	r3, r2
 8012c6c:	d100      	bne.n	8012c70 <memset+0xa>
 8012c6e:	4770      	bx	lr
 8012c70:	f803 1b01 	strb.w	r1, [r3], #1
 8012c74:	e7f9      	b.n	8012c6a <memset+0x4>
	...

08012c78 <_close_r>:
 8012c78:	b538      	push	{r3, r4, r5, lr}
 8012c7a:	4d06      	ldr	r5, [pc, #24]	; (8012c94 <_close_r+0x1c>)
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	4604      	mov	r4, r0
 8012c80:	4608      	mov	r0, r1
 8012c82:	602b      	str	r3, [r5, #0]
 8012c84:	f7ed fe8b 	bl	800099e <_close>
 8012c88:	1c43      	adds	r3, r0, #1
 8012c8a:	d102      	bne.n	8012c92 <_close_r+0x1a>
 8012c8c:	682b      	ldr	r3, [r5, #0]
 8012c8e:	b103      	cbz	r3, 8012c92 <_close_r+0x1a>
 8012c90:	6023      	str	r3, [r4, #0]
 8012c92:	bd38      	pop	{r3, r4, r5, pc}
 8012c94:	2400bf8c 	.word	0x2400bf8c

08012c98 <_reclaim_reent>:
 8012c98:	4b29      	ldr	r3, [pc, #164]	; (8012d40 <_reclaim_reent+0xa8>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	4283      	cmp	r3, r0
 8012c9e:	b570      	push	{r4, r5, r6, lr}
 8012ca0:	4604      	mov	r4, r0
 8012ca2:	d04b      	beq.n	8012d3c <_reclaim_reent+0xa4>
 8012ca4:	69c3      	ldr	r3, [r0, #28]
 8012ca6:	b143      	cbz	r3, 8012cba <_reclaim_reent+0x22>
 8012ca8:	68db      	ldr	r3, [r3, #12]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d144      	bne.n	8012d38 <_reclaim_reent+0xa0>
 8012cae:	69e3      	ldr	r3, [r4, #28]
 8012cb0:	6819      	ldr	r1, [r3, #0]
 8012cb2:	b111      	cbz	r1, 8012cba <_reclaim_reent+0x22>
 8012cb4:	4620      	mov	r0, r4
 8012cb6:	f000 f8cd 	bl	8012e54 <_free_r>
 8012cba:	6961      	ldr	r1, [r4, #20]
 8012cbc:	b111      	cbz	r1, 8012cc4 <_reclaim_reent+0x2c>
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	f000 f8c8 	bl	8012e54 <_free_r>
 8012cc4:	69e1      	ldr	r1, [r4, #28]
 8012cc6:	b111      	cbz	r1, 8012cce <_reclaim_reent+0x36>
 8012cc8:	4620      	mov	r0, r4
 8012cca:	f000 f8c3 	bl	8012e54 <_free_r>
 8012cce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012cd0:	b111      	cbz	r1, 8012cd8 <_reclaim_reent+0x40>
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	f000 f8be 	bl	8012e54 <_free_r>
 8012cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012cda:	b111      	cbz	r1, 8012ce2 <_reclaim_reent+0x4a>
 8012cdc:	4620      	mov	r0, r4
 8012cde:	f000 f8b9 	bl	8012e54 <_free_r>
 8012ce2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012ce4:	b111      	cbz	r1, 8012cec <_reclaim_reent+0x54>
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	f000 f8b4 	bl	8012e54 <_free_r>
 8012cec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012cee:	b111      	cbz	r1, 8012cf6 <_reclaim_reent+0x5e>
 8012cf0:	4620      	mov	r0, r4
 8012cf2:	f000 f8af 	bl	8012e54 <_free_r>
 8012cf6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012cf8:	b111      	cbz	r1, 8012d00 <_reclaim_reent+0x68>
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	f000 f8aa 	bl	8012e54 <_free_r>
 8012d00:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012d02:	b111      	cbz	r1, 8012d0a <_reclaim_reent+0x72>
 8012d04:	4620      	mov	r0, r4
 8012d06:	f000 f8a5 	bl	8012e54 <_free_r>
 8012d0a:	6a23      	ldr	r3, [r4, #32]
 8012d0c:	b1b3      	cbz	r3, 8012d3c <_reclaim_reent+0xa4>
 8012d0e:	4620      	mov	r0, r4
 8012d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d14:	4718      	bx	r3
 8012d16:	5949      	ldr	r1, [r1, r5]
 8012d18:	b941      	cbnz	r1, 8012d2c <_reclaim_reent+0x94>
 8012d1a:	3504      	adds	r5, #4
 8012d1c:	69e3      	ldr	r3, [r4, #28]
 8012d1e:	2d80      	cmp	r5, #128	; 0x80
 8012d20:	68d9      	ldr	r1, [r3, #12]
 8012d22:	d1f8      	bne.n	8012d16 <_reclaim_reent+0x7e>
 8012d24:	4620      	mov	r0, r4
 8012d26:	f000 f895 	bl	8012e54 <_free_r>
 8012d2a:	e7c0      	b.n	8012cae <_reclaim_reent+0x16>
 8012d2c:	680e      	ldr	r6, [r1, #0]
 8012d2e:	4620      	mov	r0, r4
 8012d30:	f000 f890 	bl	8012e54 <_free_r>
 8012d34:	4631      	mov	r1, r6
 8012d36:	e7ef      	b.n	8012d18 <_reclaim_reent+0x80>
 8012d38:	2500      	movs	r5, #0
 8012d3a:	e7ef      	b.n	8012d1c <_reclaim_reent+0x84>
 8012d3c:	bd70      	pop	{r4, r5, r6, pc}
 8012d3e:	bf00      	nop
 8012d40:	2400008c 	.word	0x2400008c

08012d44 <_lseek_r>:
 8012d44:	b538      	push	{r3, r4, r5, lr}
 8012d46:	4d07      	ldr	r5, [pc, #28]	; (8012d64 <_lseek_r+0x20>)
 8012d48:	4604      	mov	r4, r0
 8012d4a:	4608      	mov	r0, r1
 8012d4c:	4611      	mov	r1, r2
 8012d4e:	2200      	movs	r2, #0
 8012d50:	602a      	str	r2, [r5, #0]
 8012d52:	461a      	mov	r2, r3
 8012d54:	f7ed fe4a 	bl	80009ec <_lseek>
 8012d58:	1c43      	adds	r3, r0, #1
 8012d5a:	d102      	bne.n	8012d62 <_lseek_r+0x1e>
 8012d5c:	682b      	ldr	r3, [r5, #0]
 8012d5e:	b103      	cbz	r3, 8012d62 <_lseek_r+0x1e>
 8012d60:	6023      	str	r3, [r4, #0]
 8012d62:	bd38      	pop	{r3, r4, r5, pc}
 8012d64:	2400bf8c 	.word	0x2400bf8c

08012d68 <_read_r>:
 8012d68:	b538      	push	{r3, r4, r5, lr}
 8012d6a:	4d07      	ldr	r5, [pc, #28]	; (8012d88 <_read_r+0x20>)
 8012d6c:	4604      	mov	r4, r0
 8012d6e:	4608      	mov	r0, r1
 8012d70:	4611      	mov	r1, r2
 8012d72:	2200      	movs	r2, #0
 8012d74:	602a      	str	r2, [r5, #0]
 8012d76:	461a      	mov	r2, r3
 8012d78:	f7ed fdf4 	bl	8000964 <_read>
 8012d7c:	1c43      	adds	r3, r0, #1
 8012d7e:	d102      	bne.n	8012d86 <_read_r+0x1e>
 8012d80:	682b      	ldr	r3, [r5, #0]
 8012d82:	b103      	cbz	r3, 8012d86 <_read_r+0x1e>
 8012d84:	6023      	str	r3, [r4, #0]
 8012d86:	bd38      	pop	{r3, r4, r5, pc}
 8012d88:	2400bf8c 	.word	0x2400bf8c

08012d8c <_write_r>:
 8012d8c:	b538      	push	{r3, r4, r5, lr}
 8012d8e:	4d07      	ldr	r5, [pc, #28]	; (8012dac <_write_r+0x20>)
 8012d90:	4604      	mov	r4, r0
 8012d92:	4608      	mov	r0, r1
 8012d94:	4611      	mov	r1, r2
 8012d96:	2200      	movs	r2, #0
 8012d98:	602a      	str	r2, [r5, #0]
 8012d9a:	461a      	mov	r2, r3
 8012d9c:	f7ed fb39 	bl	8000412 <_write>
 8012da0:	1c43      	adds	r3, r0, #1
 8012da2:	d102      	bne.n	8012daa <_write_r+0x1e>
 8012da4:	682b      	ldr	r3, [r5, #0]
 8012da6:	b103      	cbz	r3, 8012daa <_write_r+0x1e>
 8012da8:	6023      	str	r3, [r4, #0]
 8012daa:	bd38      	pop	{r3, r4, r5, pc}
 8012dac:	2400bf8c 	.word	0x2400bf8c

08012db0 <__libc_init_array>:
 8012db0:	b570      	push	{r4, r5, r6, lr}
 8012db2:	4d0d      	ldr	r5, [pc, #52]	; (8012de8 <__libc_init_array+0x38>)
 8012db4:	4c0d      	ldr	r4, [pc, #52]	; (8012dec <__libc_init_array+0x3c>)
 8012db6:	1b64      	subs	r4, r4, r5
 8012db8:	10a4      	asrs	r4, r4, #2
 8012dba:	2600      	movs	r6, #0
 8012dbc:	42a6      	cmp	r6, r4
 8012dbe:	d109      	bne.n	8012dd4 <__libc_init_array+0x24>
 8012dc0:	4d0b      	ldr	r5, [pc, #44]	; (8012df0 <__libc_init_array+0x40>)
 8012dc2:	4c0c      	ldr	r4, [pc, #48]	; (8012df4 <__libc_init_array+0x44>)
 8012dc4:	f000 fe50 	bl	8013a68 <_init>
 8012dc8:	1b64      	subs	r4, r4, r5
 8012dca:	10a4      	asrs	r4, r4, #2
 8012dcc:	2600      	movs	r6, #0
 8012dce:	42a6      	cmp	r6, r4
 8012dd0:	d105      	bne.n	8012dde <__libc_init_array+0x2e>
 8012dd2:	bd70      	pop	{r4, r5, r6, pc}
 8012dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8012dd8:	4798      	blx	r3
 8012dda:	3601      	adds	r6, #1
 8012ddc:	e7ee      	b.n	8012dbc <__libc_init_array+0xc>
 8012dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8012de2:	4798      	blx	r3
 8012de4:	3601      	adds	r6, #1
 8012de6:	e7f2      	b.n	8012dce <__libc_init_array+0x1e>
 8012de8:	08016814 	.word	0x08016814
 8012dec:	08016814 	.word	0x08016814
 8012df0:	08016814 	.word	0x08016814
 8012df4:	08016818 	.word	0x08016818

08012df8 <__retarget_lock_acquire_recursive>:
 8012df8:	4770      	bx	lr

08012dfa <__retarget_lock_release_recursive>:
 8012dfa:	4770      	bx	lr

08012dfc <memcpy>:
 8012dfc:	440a      	add	r2, r1
 8012dfe:	4291      	cmp	r1, r2
 8012e00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012e04:	d100      	bne.n	8012e08 <memcpy+0xc>
 8012e06:	4770      	bx	lr
 8012e08:	b510      	push	{r4, lr}
 8012e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e12:	4291      	cmp	r1, r2
 8012e14:	d1f9      	bne.n	8012e0a <memcpy+0xe>
 8012e16:	bd10      	pop	{r4, pc}

08012e18 <__assert_func>:
 8012e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e1a:	4614      	mov	r4, r2
 8012e1c:	461a      	mov	r2, r3
 8012e1e:	4b09      	ldr	r3, [pc, #36]	; (8012e44 <__assert_func+0x2c>)
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	4605      	mov	r5, r0
 8012e24:	68d8      	ldr	r0, [r3, #12]
 8012e26:	b14c      	cbz	r4, 8012e3c <__assert_func+0x24>
 8012e28:	4b07      	ldr	r3, [pc, #28]	; (8012e48 <__assert_func+0x30>)
 8012e2a:	9100      	str	r1, [sp, #0]
 8012e2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012e30:	4906      	ldr	r1, [pc, #24]	; (8012e4c <__assert_func+0x34>)
 8012e32:	462b      	mov	r3, r5
 8012e34:	f000 fc90 	bl	8013758 <fiprintf>
 8012e38:	f000 fd46 	bl	80138c8 <abort>
 8012e3c:	4b04      	ldr	r3, [pc, #16]	; (8012e50 <__assert_func+0x38>)
 8012e3e:	461c      	mov	r4, r3
 8012e40:	e7f3      	b.n	8012e2a <__assert_func+0x12>
 8012e42:	bf00      	nop
 8012e44:	2400008c 	.word	0x2400008c
 8012e48:	080167a3 	.word	0x080167a3
 8012e4c:	080167b0 	.word	0x080167b0
 8012e50:	080167de 	.word	0x080167de

08012e54 <_free_r>:
 8012e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012e56:	2900      	cmp	r1, #0
 8012e58:	d044      	beq.n	8012ee4 <_free_r+0x90>
 8012e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e5e:	9001      	str	r0, [sp, #4]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	f1a1 0404 	sub.w	r4, r1, #4
 8012e66:	bfb8      	it	lt
 8012e68:	18e4      	addlt	r4, r4, r3
 8012e6a:	f000 f8e7 	bl	801303c <__malloc_lock>
 8012e6e:	4a1e      	ldr	r2, [pc, #120]	; (8012ee8 <_free_r+0x94>)
 8012e70:	9801      	ldr	r0, [sp, #4]
 8012e72:	6813      	ldr	r3, [r2, #0]
 8012e74:	b933      	cbnz	r3, 8012e84 <_free_r+0x30>
 8012e76:	6063      	str	r3, [r4, #4]
 8012e78:	6014      	str	r4, [r2, #0]
 8012e7a:	b003      	add	sp, #12
 8012e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e80:	f000 b8e2 	b.w	8013048 <__malloc_unlock>
 8012e84:	42a3      	cmp	r3, r4
 8012e86:	d908      	bls.n	8012e9a <_free_r+0x46>
 8012e88:	6825      	ldr	r5, [r4, #0]
 8012e8a:	1961      	adds	r1, r4, r5
 8012e8c:	428b      	cmp	r3, r1
 8012e8e:	bf01      	itttt	eq
 8012e90:	6819      	ldreq	r1, [r3, #0]
 8012e92:	685b      	ldreq	r3, [r3, #4]
 8012e94:	1949      	addeq	r1, r1, r5
 8012e96:	6021      	streq	r1, [r4, #0]
 8012e98:	e7ed      	b.n	8012e76 <_free_r+0x22>
 8012e9a:	461a      	mov	r2, r3
 8012e9c:	685b      	ldr	r3, [r3, #4]
 8012e9e:	b10b      	cbz	r3, 8012ea4 <_free_r+0x50>
 8012ea0:	42a3      	cmp	r3, r4
 8012ea2:	d9fa      	bls.n	8012e9a <_free_r+0x46>
 8012ea4:	6811      	ldr	r1, [r2, #0]
 8012ea6:	1855      	adds	r5, r2, r1
 8012ea8:	42a5      	cmp	r5, r4
 8012eaa:	d10b      	bne.n	8012ec4 <_free_r+0x70>
 8012eac:	6824      	ldr	r4, [r4, #0]
 8012eae:	4421      	add	r1, r4
 8012eb0:	1854      	adds	r4, r2, r1
 8012eb2:	42a3      	cmp	r3, r4
 8012eb4:	6011      	str	r1, [r2, #0]
 8012eb6:	d1e0      	bne.n	8012e7a <_free_r+0x26>
 8012eb8:	681c      	ldr	r4, [r3, #0]
 8012eba:	685b      	ldr	r3, [r3, #4]
 8012ebc:	6053      	str	r3, [r2, #4]
 8012ebe:	440c      	add	r4, r1
 8012ec0:	6014      	str	r4, [r2, #0]
 8012ec2:	e7da      	b.n	8012e7a <_free_r+0x26>
 8012ec4:	d902      	bls.n	8012ecc <_free_r+0x78>
 8012ec6:	230c      	movs	r3, #12
 8012ec8:	6003      	str	r3, [r0, #0]
 8012eca:	e7d6      	b.n	8012e7a <_free_r+0x26>
 8012ecc:	6825      	ldr	r5, [r4, #0]
 8012ece:	1961      	adds	r1, r4, r5
 8012ed0:	428b      	cmp	r3, r1
 8012ed2:	bf04      	itt	eq
 8012ed4:	6819      	ldreq	r1, [r3, #0]
 8012ed6:	685b      	ldreq	r3, [r3, #4]
 8012ed8:	6063      	str	r3, [r4, #4]
 8012eda:	bf04      	itt	eq
 8012edc:	1949      	addeq	r1, r1, r5
 8012ede:	6021      	streq	r1, [r4, #0]
 8012ee0:	6054      	str	r4, [r2, #4]
 8012ee2:	e7ca      	b.n	8012e7a <_free_r+0x26>
 8012ee4:	b003      	add	sp, #12
 8012ee6:	bd30      	pop	{r4, r5, pc}
 8012ee8:	2400bf94 	.word	0x2400bf94

08012eec <malloc>:
 8012eec:	4b02      	ldr	r3, [pc, #8]	; (8012ef8 <malloc+0xc>)
 8012eee:	4601      	mov	r1, r0
 8012ef0:	6818      	ldr	r0, [r3, #0]
 8012ef2:	f000 b823 	b.w	8012f3c <_malloc_r>
 8012ef6:	bf00      	nop
 8012ef8:	2400008c 	.word	0x2400008c

08012efc <sbrk_aligned>:
 8012efc:	b570      	push	{r4, r5, r6, lr}
 8012efe:	4e0e      	ldr	r6, [pc, #56]	; (8012f38 <sbrk_aligned+0x3c>)
 8012f00:	460c      	mov	r4, r1
 8012f02:	6831      	ldr	r1, [r6, #0]
 8012f04:	4605      	mov	r5, r0
 8012f06:	b911      	cbnz	r1, 8012f0e <sbrk_aligned+0x12>
 8012f08:	f000 fcce 	bl	80138a8 <_sbrk_r>
 8012f0c:	6030      	str	r0, [r6, #0]
 8012f0e:	4621      	mov	r1, r4
 8012f10:	4628      	mov	r0, r5
 8012f12:	f000 fcc9 	bl	80138a8 <_sbrk_r>
 8012f16:	1c43      	adds	r3, r0, #1
 8012f18:	d00a      	beq.n	8012f30 <sbrk_aligned+0x34>
 8012f1a:	1cc4      	adds	r4, r0, #3
 8012f1c:	f024 0403 	bic.w	r4, r4, #3
 8012f20:	42a0      	cmp	r0, r4
 8012f22:	d007      	beq.n	8012f34 <sbrk_aligned+0x38>
 8012f24:	1a21      	subs	r1, r4, r0
 8012f26:	4628      	mov	r0, r5
 8012f28:	f000 fcbe 	bl	80138a8 <_sbrk_r>
 8012f2c:	3001      	adds	r0, #1
 8012f2e:	d101      	bne.n	8012f34 <sbrk_aligned+0x38>
 8012f30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012f34:	4620      	mov	r0, r4
 8012f36:	bd70      	pop	{r4, r5, r6, pc}
 8012f38:	2400bf98 	.word	0x2400bf98

08012f3c <_malloc_r>:
 8012f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f40:	1ccd      	adds	r5, r1, #3
 8012f42:	f025 0503 	bic.w	r5, r5, #3
 8012f46:	3508      	adds	r5, #8
 8012f48:	2d0c      	cmp	r5, #12
 8012f4a:	bf38      	it	cc
 8012f4c:	250c      	movcc	r5, #12
 8012f4e:	2d00      	cmp	r5, #0
 8012f50:	4607      	mov	r7, r0
 8012f52:	db01      	blt.n	8012f58 <_malloc_r+0x1c>
 8012f54:	42a9      	cmp	r1, r5
 8012f56:	d905      	bls.n	8012f64 <_malloc_r+0x28>
 8012f58:	230c      	movs	r3, #12
 8012f5a:	603b      	str	r3, [r7, #0]
 8012f5c:	2600      	movs	r6, #0
 8012f5e:	4630      	mov	r0, r6
 8012f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013038 <_malloc_r+0xfc>
 8012f68:	f000 f868 	bl	801303c <__malloc_lock>
 8012f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8012f70:	461c      	mov	r4, r3
 8012f72:	bb5c      	cbnz	r4, 8012fcc <_malloc_r+0x90>
 8012f74:	4629      	mov	r1, r5
 8012f76:	4638      	mov	r0, r7
 8012f78:	f7ff ffc0 	bl	8012efc <sbrk_aligned>
 8012f7c:	1c43      	adds	r3, r0, #1
 8012f7e:	4604      	mov	r4, r0
 8012f80:	d155      	bne.n	801302e <_malloc_r+0xf2>
 8012f82:	f8d8 4000 	ldr.w	r4, [r8]
 8012f86:	4626      	mov	r6, r4
 8012f88:	2e00      	cmp	r6, #0
 8012f8a:	d145      	bne.n	8013018 <_malloc_r+0xdc>
 8012f8c:	2c00      	cmp	r4, #0
 8012f8e:	d048      	beq.n	8013022 <_malloc_r+0xe6>
 8012f90:	6823      	ldr	r3, [r4, #0]
 8012f92:	4631      	mov	r1, r6
 8012f94:	4638      	mov	r0, r7
 8012f96:	eb04 0903 	add.w	r9, r4, r3
 8012f9a:	f000 fc85 	bl	80138a8 <_sbrk_r>
 8012f9e:	4581      	cmp	r9, r0
 8012fa0:	d13f      	bne.n	8013022 <_malloc_r+0xe6>
 8012fa2:	6821      	ldr	r1, [r4, #0]
 8012fa4:	1a6d      	subs	r5, r5, r1
 8012fa6:	4629      	mov	r1, r5
 8012fa8:	4638      	mov	r0, r7
 8012faa:	f7ff ffa7 	bl	8012efc <sbrk_aligned>
 8012fae:	3001      	adds	r0, #1
 8012fb0:	d037      	beq.n	8013022 <_malloc_r+0xe6>
 8012fb2:	6823      	ldr	r3, [r4, #0]
 8012fb4:	442b      	add	r3, r5
 8012fb6:	6023      	str	r3, [r4, #0]
 8012fb8:	f8d8 3000 	ldr.w	r3, [r8]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d038      	beq.n	8013032 <_malloc_r+0xf6>
 8012fc0:	685a      	ldr	r2, [r3, #4]
 8012fc2:	42a2      	cmp	r2, r4
 8012fc4:	d12b      	bne.n	801301e <_malloc_r+0xe2>
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	605a      	str	r2, [r3, #4]
 8012fca:	e00f      	b.n	8012fec <_malloc_r+0xb0>
 8012fcc:	6822      	ldr	r2, [r4, #0]
 8012fce:	1b52      	subs	r2, r2, r5
 8012fd0:	d41f      	bmi.n	8013012 <_malloc_r+0xd6>
 8012fd2:	2a0b      	cmp	r2, #11
 8012fd4:	d917      	bls.n	8013006 <_malloc_r+0xca>
 8012fd6:	1961      	adds	r1, r4, r5
 8012fd8:	42a3      	cmp	r3, r4
 8012fda:	6025      	str	r5, [r4, #0]
 8012fdc:	bf18      	it	ne
 8012fde:	6059      	strne	r1, [r3, #4]
 8012fe0:	6863      	ldr	r3, [r4, #4]
 8012fe2:	bf08      	it	eq
 8012fe4:	f8c8 1000 	streq.w	r1, [r8]
 8012fe8:	5162      	str	r2, [r4, r5]
 8012fea:	604b      	str	r3, [r1, #4]
 8012fec:	4638      	mov	r0, r7
 8012fee:	f104 060b 	add.w	r6, r4, #11
 8012ff2:	f000 f829 	bl	8013048 <__malloc_unlock>
 8012ff6:	f026 0607 	bic.w	r6, r6, #7
 8012ffa:	1d23      	adds	r3, r4, #4
 8012ffc:	1af2      	subs	r2, r6, r3
 8012ffe:	d0ae      	beq.n	8012f5e <_malloc_r+0x22>
 8013000:	1b9b      	subs	r3, r3, r6
 8013002:	50a3      	str	r3, [r4, r2]
 8013004:	e7ab      	b.n	8012f5e <_malloc_r+0x22>
 8013006:	42a3      	cmp	r3, r4
 8013008:	6862      	ldr	r2, [r4, #4]
 801300a:	d1dd      	bne.n	8012fc8 <_malloc_r+0x8c>
 801300c:	f8c8 2000 	str.w	r2, [r8]
 8013010:	e7ec      	b.n	8012fec <_malloc_r+0xb0>
 8013012:	4623      	mov	r3, r4
 8013014:	6864      	ldr	r4, [r4, #4]
 8013016:	e7ac      	b.n	8012f72 <_malloc_r+0x36>
 8013018:	4634      	mov	r4, r6
 801301a:	6876      	ldr	r6, [r6, #4]
 801301c:	e7b4      	b.n	8012f88 <_malloc_r+0x4c>
 801301e:	4613      	mov	r3, r2
 8013020:	e7cc      	b.n	8012fbc <_malloc_r+0x80>
 8013022:	230c      	movs	r3, #12
 8013024:	603b      	str	r3, [r7, #0]
 8013026:	4638      	mov	r0, r7
 8013028:	f000 f80e 	bl	8013048 <__malloc_unlock>
 801302c:	e797      	b.n	8012f5e <_malloc_r+0x22>
 801302e:	6025      	str	r5, [r4, #0]
 8013030:	e7dc      	b.n	8012fec <_malloc_r+0xb0>
 8013032:	605b      	str	r3, [r3, #4]
 8013034:	deff      	udf	#255	; 0xff
 8013036:	bf00      	nop
 8013038:	2400bf94 	.word	0x2400bf94

0801303c <__malloc_lock>:
 801303c:	4801      	ldr	r0, [pc, #4]	; (8013044 <__malloc_lock+0x8>)
 801303e:	f7ff bedb 	b.w	8012df8 <__retarget_lock_acquire_recursive>
 8013042:	bf00      	nop
 8013044:	2400bf90 	.word	0x2400bf90

08013048 <__malloc_unlock>:
 8013048:	4801      	ldr	r0, [pc, #4]	; (8013050 <__malloc_unlock+0x8>)
 801304a:	f7ff bed6 	b.w	8012dfa <__retarget_lock_release_recursive>
 801304e:	bf00      	nop
 8013050:	2400bf90 	.word	0x2400bf90

08013054 <__sfputc_r>:
 8013054:	6893      	ldr	r3, [r2, #8]
 8013056:	3b01      	subs	r3, #1
 8013058:	2b00      	cmp	r3, #0
 801305a:	b410      	push	{r4}
 801305c:	6093      	str	r3, [r2, #8]
 801305e:	da08      	bge.n	8013072 <__sfputc_r+0x1e>
 8013060:	6994      	ldr	r4, [r2, #24]
 8013062:	42a3      	cmp	r3, r4
 8013064:	db01      	blt.n	801306a <__sfputc_r+0x16>
 8013066:	290a      	cmp	r1, #10
 8013068:	d103      	bne.n	8013072 <__sfputc_r+0x1e>
 801306a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801306e:	f000 bb85 	b.w	801377c <__swbuf_r>
 8013072:	6813      	ldr	r3, [r2, #0]
 8013074:	1c58      	adds	r0, r3, #1
 8013076:	6010      	str	r0, [r2, #0]
 8013078:	7019      	strb	r1, [r3, #0]
 801307a:	4608      	mov	r0, r1
 801307c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013080:	4770      	bx	lr

08013082 <__sfputs_r>:
 8013082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013084:	4606      	mov	r6, r0
 8013086:	460f      	mov	r7, r1
 8013088:	4614      	mov	r4, r2
 801308a:	18d5      	adds	r5, r2, r3
 801308c:	42ac      	cmp	r4, r5
 801308e:	d101      	bne.n	8013094 <__sfputs_r+0x12>
 8013090:	2000      	movs	r0, #0
 8013092:	e007      	b.n	80130a4 <__sfputs_r+0x22>
 8013094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013098:	463a      	mov	r2, r7
 801309a:	4630      	mov	r0, r6
 801309c:	f7ff ffda 	bl	8013054 <__sfputc_r>
 80130a0:	1c43      	adds	r3, r0, #1
 80130a2:	d1f3      	bne.n	801308c <__sfputs_r+0xa>
 80130a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080130a8 <_vfiprintf_r>:
 80130a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ac:	460d      	mov	r5, r1
 80130ae:	b09d      	sub	sp, #116	; 0x74
 80130b0:	4614      	mov	r4, r2
 80130b2:	4698      	mov	r8, r3
 80130b4:	4606      	mov	r6, r0
 80130b6:	b118      	cbz	r0, 80130c0 <_vfiprintf_r+0x18>
 80130b8:	6a03      	ldr	r3, [r0, #32]
 80130ba:	b90b      	cbnz	r3, 80130c0 <_vfiprintf_r+0x18>
 80130bc:	f7ff fd38 	bl	8012b30 <__sinit>
 80130c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80130c2:	07d9      	lsls	r1, r3, #31
 80130c4:	d405      	bmi.n	80130d2 <_vfiprintf_r+0x2a>
 80130c6:	89ab      	ldrh	r3, [r5, #12]
 80130c8:	059a      	lsls	r2, r3, #22
 80130ca:	d402      	bmi.n	80130d2 <_vfiprintf_r+0x2a>
 80130cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80130ce:	f7ff fe93 	bl	8012df8 <__retarget_lock_acquire_recursive>
 80130d2:	89ab      	ldrh	r3, [r5, #12]
 80130d4:	071b      	lsls	r3, r3, #28
 80130d6:	d501      	bpl.n	80130dc <_vfiprintf_r+0x34>
 80130d8:	692b      	ldr	r3, [r5, #16]
 80130da:	b99b      	cbnz	r3, 8013104 <_vfiprintf_r+0x5c>
 80130dc:	4629      	mov	r1, r5
 80130de:	4630      	mov	r0, r6
 80130e0:	f000 fb8a 	bl	80137f8 <__swsetup_r>
 80130e4:	b170      	cbz	r0, 8013104 <_vfiprintf_r+0x5c>
 80130e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80130e8:	07dc      	lsls	r4, r3, #31
 80130ea:	d504      	bpl.n	80130f6 <_vfiprintf_r+0x4e>
 80130ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80130f0:	b01d      	add	sp, #116	; 0x74
 80130f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130f6:	89ab      	ldrh	r3, [r5, #12]
 80130f8:	0598      	lsls	r0, r3, #22
 80130fa:	d4f7      	bmi.n	80130ec <_vfiprintf_r+0x44>
 80130fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80130fe:	f7ff fe7c 	bl	8012dfa <__retarget_lock_release_recursive>
 8013102:	e7f3      	b.n	80130ec <_vfiprintf_r+0x44>
 8013104:	2300      	movs	r3, #0
 8013106:	9309      	str	r3, [sp, #36]	; 0x24
 8013108:	2320      	movs	r3, #32
 801310a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801310e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013112:	2330      	movs	r3, #48	; 0x30
 8013114:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80132c8 <_vfiprintf_r+0x220>
 8013118:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801311c:	f04f 0901 	mov.w	r9, #1
 8013120:	4623      	mov	r3, r4
 8013122:	469a      	mov	sl, r3
 8013124:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013128:	b10a      	cbz	r2, 801312e <_vfiprintf_r+0x86>
 801312a:	2a25      	cmp	r2, #37	; 0x25
 801312c:	d1f9      	bne.n	8013122 <_vfiprintf_r+0x7a>
 801312e:	ebba 0b04 	subs.w	fp, sl, r4
 8013132:	d00b      	beq.n	801314c <_vfiprintf_r+0xa4>
 8013134:	465b      	mov	r3, fp
 8013136:	4622      	mov	r2, r4
 8013138:	4629      	mov	r1, r5
 801313a:	4630      	mov	r0, r6
 801313c:	f7ff ffa1 	bl	8013082 <__sfputs_r>
 8013140:	3001      	adds	r0, #1
 8013142:	f000 80a9 	beq.w	8013298 <_vfiprintf_r+0x1f0>
 8013146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013148:	445a      	add	r2, fp
 801314a:	9209      	str	r2, [sp, #36]	; 0x24
 801314c:	f89a 3000 	ldrb.w	r3, [sl]
 8013150:	2b00      	cmp	r3, #0
 8013152:	f000 80a1 	beq.w	8013298 <_vfiprintf_r+0x1f0>
 8013156:	2300      	movs	r3, #0
 8013158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801315c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013160:	f10a 0a01 	add.w	sl, sl, #1
 8013164:	9304      	str	r3, [sp, #16]
 8013166:	9307      	str	r3, [sp, #28]
 8013168:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801316c:	931a      	str	r3, [sp, #104]	; 0x68
 801316e:	4654      	mov	r4, sl
 8013170:	2205      	movs	r2, #5
 8013172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013176:	4854      	ldr	r0, [pc, #336]	; (80132c8 <_vfiprintf_r+0x220>)
 8013178:	f7ed f8ba 	bl	80002f0 <memchr>
 801317c:	9a04      	ldr	r2, [sp, #16]
 801317e:	b9d8      	cbnz	r0, 80131b8 <_vfiprintf_r+0x110>
 8013180:	06d1      	lsls	r1, r2, #27
 8013182:	bf44      	itt	mi
 8013184:	2320      	movmi	r3, #32
 8013186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801318a:	0713      	lsls	r3, r2, #28
 801318c:	bf44      	itt	mi
 801318e:	232b      	movmi	r3, #43	; 0x2b
 8013190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013194:	f89a 3000 	ldrb.w	r3, [sl]
 8013198:	2b2a      	cmp	r3, #42	; 0x2a
 801319a:	d015      	beq.n	80131c8 <_vfiprintf_r+0x120>
 801319c:	9a07      	ldr	r2, [sp, #28]
 801319e:	4654      	mov	r4, sl
 80131a0:	2000      	movs	r0, #0
 80131a2:	f04f 0c0a 	mov.w	ip, #10
 80131a6:	4621      	mov	r1, r4
 80131a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80131ac:	3b30      	subs	r3, #48	; 0x30
 80131ae:	2b09      	cmp	r3, #9
 80131b0:	d94d      	bls.n	801324e <_vfiprintf_r+0x1a6>
 80131b2:	b1b0      	cbz	r0, 80131e2 <_vfiprintf_r+0x13a>
 80131b4:	9207      	str	r2, [sp, #28]
 80131b6:	e014      	b.n	80131e2 <_vfiprintf_r+0x13a>
 80131b8:	eba0 0308 	sub.w	r3, r0, r8
 80131bc:	fa09 f303 	lsl.w	r3, r9, r3
 80131c0:	4313      	orrs	r3, r2
 80131c2:	9304      	str	r3, [sp, #16]
 80131c4:	46a2      	mov	sl, r4
 80131c6:	e7d2      	b.n	801316e <_vfiprintf_r+0xc6>
 80131c8:	9b03      	ldr	r3, [sp, #12]
 80131ca:	1d19      	adds	r1, r3, #4
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	9103      	str	r1, [sp, #12]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	bfbb      	ittet	lt
 80131d4:	425b      	neglt	r3, r3
 80131d6:	f042 0202 	orrlt.w	r2, r2, #2
 80131da:	9307      	strge	r3, [sp, #28]
 80131dc:	9307      	strlt	r3, [sp, #28]
 80131de:	bfb8      	it	lt
 80131e0:	9204      	strlt	r2, [sp, #16]
 80131e2:	7823      	ldrb	r3, [r4, #0]
 80131e4:	2b2e      	cmp	r3, #46	; 0x2e
 80131e6:	d10c      	bne.n	8013202 <_vfiprintf_r+0x15a>
 80131e8:	7863      	ldrb	r3, [r4, #1]
 80131ea:	2b2a      	cmp	r3, #42	; 0x2a
 80131ec:	d134      	bne.n	8013258 <_vfiprintf_r+0x1b0>
 80131ee:	9b03      	ldr	r3, [sp, #12]
 80131f0:	1d1a      	adds	r2, r3, #4
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	9203      	str	r2, [sp, #12]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	bfb8      	it	lt
 80131fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80131fe:	3402      	adds	r4, #2
 8013200:	9305      	str	r3, [sp, #20]
 8013202:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80132d8 <_vfiprintf_r+0x230>
 8013206:	7821      	ldrb	r1, [r4, #0]
 8013208:	2203      	movs	r2, #3
 801320a:	4650      	mov	r0, sl
 801320c:	f7ed f870 	bl	80002f0 <memchr>
 8013210:	b138      	cbz	r0, 8013222 <_vfiprintf_r+0x17a>
 8013212:	9b04      	ldr	r3, [sp, #16]
 8013214:	eba0 000a 	sub.w	r0, r0, sl
 8013218:	2240      	movs	r2, #64	; 0x40
 801321a:	4082      	lsls	r2, r0
 801321c:	4313      	orrs	r3, r2
 801321e:	3401      	adds	r4, #1
 8013220:	9304      	str	r3, [sp, #16]
 8013222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013226:	4829      	ldr	r0, [pc, #164]	; (80132cc <_vfiprintf_r+0x224>)
 8013228:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801322c:	2206      	movs	r2, #6
 801322e:	f7ed f85f 	bl	80002f0 <memchr>
 8013232:	2800      	cmp	r0, #0
 8013234:	d03f      	beq.n	80132b6 <_vfiprintf_r+0x20e>
 8013236:	4b26      	ldr	r3, [pc, #152]	; (80132d0 <_vfiprintf_r+0x228>)
 8013238:	bb1b      	cbnz	r3, 8013282 <_vfiprintf_r+0x1da>
 801323a:	9b03      	ldr	r3, [sp, #12]
 801323c:	3307      	adds	r3, #7
 801323e:	f023 0307 	bic.w	r3, r3, #7
 8013242:	3308      	adds	r3, #8
 8013244:	9303      	str	r3, [sp, #12]
 8013246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013248:	443b      	add	r3, r7
 801324a:	9309      	str	r3, [sp, #36]	; 0x24
 801324c:	e768      	b.n	8013120 <_vfiprintf_r+0x78>
 801324e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013252:	460c      	mov	r4, r1
 8013254:	2001      	movs	r0, #1
 8013256:	e7a6      	b.n	80131a6 <_vfiprintf_r+0xfe>
 8013258:	2300      	movs	r3, #0
 801325a:	3401      	adds	r4, #1
 801325c:	9305      	str	r3, [sp, #20]
 801325e:	4619      	mov	r1, r3
 8013260:	f04f 0c0a 	mov.w	ip, #10
 8013264:	4620      	mov	r0, r4
 8013266:	f810 2b01 	ldrb.w	r2, [r0], #1
 801326a:	3a30      	subs	r2, #48	; 0x30
 801326c:	2a09      	cmp	r2, #9
 801326e:	d903      	bls.n	8013278 <_vfiprintf_r+0x1d0>
 8013270:	2b00      	cmp	r3, #0
 8013272:	d0c6      	beq.n	8013202 <_vfiprintf_r+0x15a>
 8013274:	9105      	str	r1, [sp, #20]
 8013276:	e7c4      	b.n	8013202 <_vfiprintf_r+0x15a>
 8013278:	fb0c 2101 	mla	r1, ip, r1, r2
 801327c:	4604      	mov	r4, r0
 801327e:	2301      	movs	r3, #1
 8013280:	e7f0      	b.n	8013264 <_vfiprintf_r+0x1bc>
 8013282:	ab03      	add	r3, sp, #12
 8013284:	9300      	str	r3, [sp, #0]
 8013286:	462a      	mov	r2, r5
 8013288:	4b12      	ldr	r3, [pc, #72]	; (80132d4 <_vfiprintf_r+0x22c>)
 801328a:	a904      	add	r1, sp, #16
 801328c:	4630      	mov	r0, r6
 801328e:	f3af 8000 	nop.w
 8013292:	4607      	mov	r7, r0
 8013294:	1c78      	adds	r0, r7, #1
 8013296:	d1d6      	bne.n	8013246 <_vfiprintf_r+0x19e>
 8013298:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801329a:	07d9      	lsls	r1, r3, #31
 801329c:	d405      	bmi.n	80132aa <_vfiprintf_r+0x202>
 801329e:	89ab      	ldrh	r3, [r5, #12]
 80132a0:	059a      	lsls	r2, r3, #22
 80132a2:	d402      	bmi.n	80132aa <_vfiprintf_r+0x202>
 80132a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80132a6:	f7ff fda8 	bl	8012dfa <__retarget_lock_release_recursive>
 80132aa:	89ab      	ldrh	r3, [r5, #12]
 80132ac:	065b      	lsls	r3, r3, #25
 80132ae:	f53f af1d 	bmi.w	80130ec <_vfiprintf_r+0x44>
 80132b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80132b4:	e71c      	b.n	80130f0 <_vfiprintf_r+0x48>
 80132b6:	ab03      	add	r3, sp, #12
 80132b8:	9300      	str	r3, [sp, #0]
 80132ba:	462a      	mov	r2, r5
 80132bc:	4b05      	ldr	r3, [pc, #20]	; (80132d4 <_vfiprintf_r+0x22c>)
 80132be:	a904      	add	r1, sp, #16
 80132c0:	4630      	mov	r0, r6
 80132c2:	f000 f879 	bl	80133b8 <_printf_i>
 80132c6:	e7e4      	b.n	8013292 <_vfiprintf_r+0x1ea>
 80132c8:	080167df 	.word	0x080167df
 80132cc:	080167e9 	.word	0x080167e9
 80132d0:	00000000 	.word	0x00000000
 80132d4:	08013083 	.word	0x08013083
 80132d8:	080167e5 	.word	0x080167e5

080132dc <_printf_common>:
 80132dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132e0:	4616      	mov	r6, r2
 80132e2:	4699      	mov	r9, r3
 80132e4:	688a      	ldr	r2, [r1, #8]
 80132e6:	690b      	ldr	r3, [r1, #16]
 80132e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80132ec:	4293      	cmp	r3, r2
 80132ee:	bfb8      	it	lt
 80132f0:	4613      	movlt	r3, r2
 80132f2:	6033      	str	r3, [r6, #0]
 80132f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80132f8:	4607      	mov	r7, r0
 80132fa:	460c      	mov	r4, r1
 80132fc:	b10a      	cbz	r2, 8013302 <_printf_common+0x26>
 80132fe:	3301      	adds	r3, #1
 8013300:	6033      	str	r3, [r6, #0]
 8013302:	6823      	ldr	r3, [r4, #0]
 8013304:	0699      	lsls	r1, r3, #26
 8013306:	bf42      	ittt	mi
 8013308:	6833      	ldrmi	r3, [r6, #0]
 801330a:	3302      	addmi	r3, #2
 801330c:	6033      	strmi	r3, [r6, #0]
 801330e:	6825      	ldr	r5, [r4, #0]
 8013310:	f015 0506 	ands.w	r5, r5, #6
 8013314:	d106      	bne.n	8013324 <_printf_common+0x48>
 8013316:	f104 0a19 	add.w	sl, r4, #25
 801331a:	68e3      	ldr	r3, [r4, #12]
 801331c:	6832      	ldr	r2, [r6, #0]
 801331e:	1a9b      	subs	r3, r3, r2
 8013320:	42ab      	cmp	r3, r5
 8013322:	dc26      	bgt.n	8013372 <_printf_common+0x96>
 8013324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013328:	1e13      	subs	r3, r2, #0
 801332a:	6822      	ldr	r2, [r4, #0]
 801332c:	bf18      	it	ne
 801332e:	2301      	movne	r3, #1
 8013330:	0692      	lsls	r2, r2, #26
 8013332:	d42b      	bmi.n	801338c <_printf_common+0xb0>
 8013334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013338:	4649      	mov	r1, r9
 801333a:	4638      	mov	r0, r7
 801333c:	47c0      	blx	r8
 801333e:	3001      	adds	r0, #1
 8013340:	d01e      	beq.n	8013380 <_printf_common+0xa4>
 8013342:	6823      	ldr	r3, [r4, #0]
 8013344:	6922      	ldr	r2, [r4, #16]
 8013346:	f003 0306 	and.w	r3, r3, #6
 801334a:	2b04      	cmp	r3, #4
 801334c:	bf02      	ittt	eq
 801334e:	68e5      	ldreq	r5, [r4, #12]
 8013350:	6833      	ldreq	r3, [r6, #0]
 8013352:	1aed      	subeq	r5, r5, r3
 8013354:	68a3      	ldr	r3, [r4, #8]
 8013356:	bf0c      	ite	eq
 8013358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801335c:	2500      	movne	r5, #0
 801335e:	4293      	cmp	r3, r2
 8013360:	bfc4      	itt	gt
 8013362:	1a9b      	subgt	r3, r3, r2
 8013364:	18ed      	addgt	r5, r5, r3
 8013366:	2600      	movs	r6, #0
 8013368:	341a      	adds	r4, #26
 801336a:	42b5      	cmp	r5, r6
 801336c:	d11a      	bne.n	80133a4 <_printf_common+0xc8>
 801336e:	2000      	movs	r0, #0
 8013370:	e008      	b.n	8013384 <_printf_common+0xa8>
 8013372:	2301      	movs	r3, #1
 8013374:	4652      	mov	r2, sl
 8013376:	4649      	mov	r1, r9
 8013378:	4638      	mov	r0, r7
 801337a:	47c0      	blx	r8
 801337c:	3001      	adds	r0, #1
 801337e:	d103      	bne.n	8013388 <_printf_common+0xac>
 8013380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013388:	3501      	adds	r5, #1
 801338a:	e7c6      	b.n	801331a <_printf_common+0x3e>
 801338c:	18e1      	adds	r1, r4, r3
 801338e:	1c5a      	adds	r2, r3, #1
 8013390:	2030      	movs	r0, #48	; 0x30
 8013392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013396:	4422      	add	r2, r4
 8013398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801339c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80133a0:	3302      	adds	r3, #2
 80133a2:	e7c7      	b.n	8013334 <_printf_common+0x58>
 80133a4:	2301      	movs	r3, #1
 80133a6:	4622      	mov	r2, r4
 80133a8:	4649      	mov	r1, r9
 80133aa:	4638      	mov	r0, r7
 80133ac:	47c0      	blx	r8
 80133ae:	3001      	adds	r0, #1
 80133b0:	d0e6      	beq.n	8013380 <_printf_common+0xa4>
 80133b2:	3601      	adds	r6, #1
 80133b4:	e7d9      	b.n	801336a <_printf_common+0x8e>
	...

080133b8 <_printf_i>:
 80133b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80133bc:	7e0f      	ldrb	r7, [r1, #24]
 80133be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80133c0:	2f78      	cmp	r7, #120	; 0x78
 80133c2:	4691      	mov	r9, r2
 80133c4:	4680      	mov	r8, r0
 80133c6:	460c      	mov	r4, r1
 80133c8:	469a      	mov	sl, r3
 80133ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80133ce:	d807      	bhi.n	80133e0 <_printf_i+0x28>
 80133d0:	2f62      	cmp	r7, #98	; 0x62
 80133d2:	d80a      	bhi.n	80133ea <_printf_i+0x32>
 80133d4:	2f00      	cmp	r7, #0
 80133d6:	f000 80d4 	beq.w	8013582 <_printf_i+0x1ca>
 80133da:	2f58      	cmp	r7, #88	; 0x58
 80133dc:	f000 80c0 	beq.w	8013560 <_printf_i+0x1a8>
 80133e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80133e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80133e8:	e03a      	b.n	8013460 <_printf_i+0xa8>
 80133ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80133ee:	2b15      	cmp	r3, #21
 80133f0:	d8f6      	bhi.n	80133e0 <_printf_i+0x28>
 80133f2:	a101      	add	r1, pc, #4	; (adr r1, 80133f8 <_printf_i+0x40>)
 80133f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80133f8:	08013451 	.word	0x08013451
 80133fc:	08013465 	.word	0x08013465
 8013400:	080133e1 	.word	0x080133e1
 8013404:	080133e1 	.word	0x080133e1
 8013408:	080133e1 	.word	0x080133e1
 801340c:	080133e1 	.word	0x080133e1
 8013410:	08013465 	.word	0x08013465
 8013414:	080133e1 	.word	0x080133e1
 8013418:	080133e1 	.word	0x080133e1
 801341c:	080133e1 	.word	0x080133e1
 8013420:	080133e1 	.word	0x080133e1
 8013424:	08013569 	.word	0x08013569
 8013428:	08013491 	.word	0x08013491
 801342c:	08013523 	.word	0x08013523
 8013430:	080133e1 	.word	0x080133e1
 8013434:	080133e1 	.word	0x080133e1
 8013438:	0801358b 	.word	0x0801358b
 801343c:	080133e1 	.word	0x080133e1
 8013440:	08013491 	.word	0x08013491
 8013444:	080133e1 	.word	0x080133e1
 8013448:	080133e1 	.word	0x080133e1
 801344c:	0801352b 	.word	0x0801352b
 8013450:	682b      	ldr	r3, [r5, #0]
 8013452:	1d1a      	adds	r2, r3, #4
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	602a      	str	r2, [r5, #0]
 8013458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801345c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013460:	2301      	movs	r3, #1
 8013462:	e09f      	b.n	80135a4 <_printf_i+0x1ec>
 8013464:	6820      	ldr	r0, [r4, #0]
 8013466:	682b      	ldr	r3, [r5, #0]
 8013468:	0607      	lsls	r7, r0, #24
 801346a:	f103 0104 	add.w	r1, r3, #4
 801346e:	6029      	str	r1, [r5, #0]
 8013470:	d501      	bpl.n	8013476 <_printf_i+0xbe>
 8013472:	681e      	ldr	r6, [r3, #0]
 8013474:	e003      	b.n	801347e <_printf_i+0xc6>
 8013476:	0646      	lsls	r6, r0, #25
 8013478:	d5fb      	bpl.n	8013472 <_printf_i+0xba>
 801347a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801347e:	2e00      	cmp	r6, #0
 8013480:	da03      	bge.n	801348a <_printf_i+0xd2>
 8013482:	232d      	movs	r3, #45	; 0x2d
 8013484:	4276      	negs	r6, r6
 8013486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801348a:	485a      	ldr	r0, [pc, #360]	; (80135f4 <_printf_i+0x23c>)
 801348c:	230a      	movs	r3, #10
 801348e:	e012      	b.n	80134b6 <_printf_i+0xfe>
 8013490:	682b      	ldr	r3, [r5, #0]
 8013492:	6820      	ldr	r0, [r4, #0]
 8013494:	1d19      	adds	r1, r3, #4
 8013496:	6029      	str	r1, [r5, #0]
 8013498:	0605      	lsls	r5, r0, #24
 801349a:	d501      	bpl.n	80134a0 <_printf_i+0xe8>
 801349c:	681e      	ldr	r6, [r3, #0]
 801349e:	e002      	b.n	80134a6 <_printf_i+0xee>
 80134a0:	0641      	lsls	r1, r0, #25
 80134a2:	d5fb      	bpl.n	801349c <_printf_i+0xe4>
 80134a4:	881e      	ldrh	r6, [r3, #0]
 80134a6:	4853      	ldr	r0, [pc, #332]	; (80135f4 <_printf_i+0x23c>)
 80134a8:	2f6f      	cmp	r7, #111	; 0x6f
 80134aa:	bf0c      	ite	eq
 80134ac:	2308      	moveq	r3, #8
 80134ae:	230a      	movne	r3, #10
 80134b0:	2100      	movs	r1, #0
 80134b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80134b6:	6865      	ldr	r5, [r4, #4]
 80134b8:	60a5      	str	r5, [r4, #8]
 80134ba:	2d00      	cmp	r5, #0
 80134bc:	bfa2      	ittt	ge
 80134be:	6821      	ldrge	r1, [r4, #0]
 80134c0:	f021 0104 	bicge.w	r1, r1, #4
 80134c4:	6021      	strge	r1, [r4, #0]
 80134c6:	b90e      	cbnz	r6, 80134cc <_printf_i+0x114>
 80134c8:	2d00      	cmp	r5, #0
 80134ca:	d04b      	beq.n	8013564 <_printf_i+0x1ac>
 80134cc:	4615      	mov	r5, r2
 80134ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80134d2:	fb03 6711 	mls	r7, r3, r1, r6
 80134d6:	5dc7      	ldrb	r7, [r0, r7]
 80134d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80134dc:	4637      	mov	r7, r6
 80134de:	42bb      	cmp	r3, r7
 80134e0:	460e      	mov	r6, r1
 80134e2:	d9f4      	bls.n	80134ce <_printf_i+0x116>
 80134e4:	2b08      	cmp	r3, #8
 80134e6:	d10b      	bne.n	8013500 <_printf_i+0x148>
 80134e8:	6823      	ldr	r3, [r4, #0]
 80134ea:	07de      	lsls	r6, r3, #31
 80134ec:	d508      	bpl.n	8013500 <_printf_i+0x148>
 80134ee:	6923      	ldr	r3, [r4, #16]
 80134f0:	6861      	ldr	r1, [r4, #4]
 80134f2:	4299      	cmp	r1, r3
 80134f4:	bfde      	ittt	le
 80134f6:	2330      	movle	r3, #48	; 0x30
 80134f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80134fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013500:	1b52      	subs	r2, r2, r5
 8013502:	6122      	str	r2, [r4, #16]
 8013504:	f8cd a000 	str.w	sl, [sp]
 8013508:	464b      	mov	r3, r9
 801350a:	aa03      	add	r2, sp, #12
 801350c:	4621      	mov	r1, r4
 801350e:	4640      	mov	r0, r8
 8013510:	f7ff fee4 	bl	80132dc <_printf_common>
 8013514:	3001      	adds	r0, #1
 8013516:	d14a      	bne.n	80135ae <_printf_i+0x1f6>
 8013518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801351c:	b004      	add	sp, #16
 801351e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013522:	6823      	ldr	r3, [r4, #0]
 8013524:	f043 0320 	orr.w	r3, r3, #32
 8013528:	6023      	str	r3, [r4, #0]
 801352a:	4833      	ldr	r0, [pc, #204]	; (80135f8 <_printf_i+0x240>)
 801352c:	2778      	movs	r7, #120	; 0x78
 801352e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013532:	6823      	ldr	r3, [r4, #0]
 8013534:	6829      	ldr	r1, [r5, #0]
 8013536:	061f      	lsls	r7, r3, #24
 8013538:	f851 6b04 	ldr.w	r6, [r1], #4
 801353c:	d402      	bmi.n	8013544 <_printf_i+0x18c>
 801353e:	065f      	lsls	r7, r3, #25
 8013540:	bf48      	it	mi
 8013542:	b2b6      	uxthmi	r6, r6
 8013544:	07df      	lsls	r7, r3, #31
 8013546:	bf48      	it	mi
 8013548:	f043 0320 	orrmi.w	r3, r3, #32
 801354c:	6029      	str	r1, [r5, #0]
 801354e:	bf48      	it	mi
 8013550:	6023      	strmi	r3, [r4, #0]
 8013552:	b91e      	cbnz	r6, 801355c <_printf_i+0x1a4>
 8013554:	6823      	ldr	r3, [r4, #0]
 8013556:	f023 0320 	bic.w	r3, r3, #32
 801355a:	6023      	str	r3, [r4, #0]
 801355c:	2310      	movs	r3, #16
 801355e:	e7a7      	b.n	80134b0 <_printf_i+0xf8>
 8013560:	4824      	ldr	r0, [pc, #144]	; (80135f4 <_printf_i+0x23c>)
 8013562:	e7e4      	b.n	801352e <_printf_i+0x176>
 8013564:	4615      	mov	r5, r2
 8013566:	e7bd      	b.n	80134e4 <_printf_i+0x12c>
 8013568:	682b      	ldr	r3, [r5, #0]
 801356a:	6826      	ldr	r6, [r4, #0]
 801356c:	6961      	ldr	r1, [r4, #20]
 801356e:	1d18      	adds	r0, r3, #4
 8013570:	6028      	str	r0, [r5, #0]
 8013572:	0635      	lsls	r5, r6, #24
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	d501      	bpl.n	801357c <_printf_i+0x1c4>
 8013578:	6019      	str	r1, [r3, #0]
 801357a:	e002      	b.n	8013582 <_printf_i+0x1ca>
 801357c:	0670      	lsls	r0, r6, #25
 801357e:	d5fb      	bpl.n	8013578 <_printf_i+0x1c0>
 8013580:	8019      	strh	r1, [r3, #0]
 8013582:	2300      	movs	r3, #0
 8013584:	6123      	str	r3, [r4, #16]
 8013586:	4615      	mov	r5, r2
 8013588:	e7bc      	b.n	8013504 <_printf_i+0x14c>
 801358a:	682b      	ldr	r3, [r5, #0]
 801358c:	1d1a      	adds	r2, r3, #4
 801358e:	602a      	str	r2, [r5, #0]
 8013590:	681d      	ldr	r5, [r3, #0]
 8013592:	6862      	ldr	r2, [r4, #4]
 8013594:	2100      	movs	r1, #0
 8013596:	4628      	mov	r0, r5
 8013598:	f7ec feaa 	bl	80002f0 <memchr>
 801359c:	b108      	cbz	r0, 80135a2 <_printf_i+0x1ea>
 801359e:	1b40      	subs	r0, r0, r5
 80135a0:	6060      	str	r0, [r4, #4]
 80135a2:	6863      	ldr	r3, [r4, #4]
 80135a4:	6123      	str	r3, [r4, #16]
 80135a6:	2300      	movs	r3, #0
 80135a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80135ac:	e7aa      	b.n	8013504 <_printf_i+0x14c>
 80135ae:	6923      	ldr	r3, [r4, #16]
 80135b0:	462a      	mov	r2, r5
 80135b2:	4649      	mov	r1, r9
 80135b4:	4640      	mov	r0, r8
 80135b6:	47d0      	blx	sl
 80135b8:	3001      	adds	r0, #1
 80135ba:	d0ad      	beq.n	8013518 <_printf_i+0x160>
 80135bc:	6823      	ldr	r3, [r4, #0]
 80135be:	079b      	lsls	r3, r3, #30
 80135c0:	d413      	bmi.n	80135ea <_printf_i+0x232>
 80135c2:	68e0      	ldr	r0, [r4, #12]
 80135c4:	9b03      	ldr	r3, [sp, #12]
 80135c6:	4298      	cmp	r0, r3
 80135c8:	bfb8      	it	lt
 80135ca:	4618      	movlt	r0, r3
 80135cc:	e7a6      	b.n	801351c <_printf_i+0x164>
 80135ce:	2301      	movs	r3, #1
 80135d0:	4632      	mov	r2, r6
 80135d2:	4649      	mov	r1, r9
 80135d4:	4640      	mov	r0, r8
 80135d6:	47d0      	blx	sl
 80135d8:	3001      	adds	r0, #1
 80135da:	d09d      	beq.n	8013518 <_printf_i+0x160>
 80135dc:	3501      	adds	r5, #1
 80135de:	68e3      	ldr	r3, [r4, #12]
 80135e0:	9903      	ldr	r1, [sp, #12]
 80135e2:	1a5b      	subs	r3, r3, r1
 80135e4:	42ab      	cmp	r3, r5
 80135e6:	dcf2      	bgt.n	80135ce <_printf_i+0x216>
 80135e8:	e7eb      	b.n	80135c2 <_printf_i+0x20a>
 80135ea:	2500      	movs	r5, #0
 80135ec:	f104 0619 	add.w	r6, r4, #25
 80135f0:	e7f5      	b.n	80135de <_printf_i+0x226>
 80135f2:	bf00      	nop
 80135f4:	080167f0 	.word	0x080167f0
 80135f8:	08016801 	.word	0x08016801

080135fc <__sflush_r>:
 80135fc:	898a      	ldrh	r2, [r1, #12]
 80135fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013602:	4605      	mov	r5, r0
 8013604:	0710      	lsls	r0, r2, #28
 8013606:	460c      	mov	r4, r1
 8013608:	d458      	bmi.n	80136bc <__sflush_r+0xc0>
 801360a:	684b      	ldr	r3, [r1, #4]
 801360c:	2b00      	cmp	r3, #0
 801360e:	dc05      	bgt.n	801361c <__sflush_r+0x20>
 8013610:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013612:	2b00      	cmp	r3, #0
 8013614:	dc02      	bgt.n	801361c <__sflush_r+0x20>
 8013616:	2000      	movs	r0, #0
 8013618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801361c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801361e:	2e00      	cmp	r6, #0
 8013620:	d0f9      	beq.n	8013616 <__sflush_r+0x1a>
 8013622:	2300      	movs	r3, #0
 8013624:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013628:	682f      	ldr	r7, [r5, #0]
 801362a:	6a21      	ldr	r1, [r4, #32]
 801362c:	602b      	str	r3, [r5, #0]
 801362e:	d032      	beq.n	8013696 <__sflush_r+0x9a>
 8013630:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013632:	89a3      	ldrh	r3, [r4, #12]
 8013634:	075a      	lsls	r2, r3, #29
 8013636:	d505      	bpl.n	8013644 <__sflush_r+0x48>
 8013638:	6863      	ldr	r3, [r4, #4]
 801363a:	1ac0      	subs	r0, r0, r3
 801363c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801363e:	b10b      	cbz	r3, 8013644 <__sflush_r+0x48>
 8013640:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013642:	1ac0      	subs	r0, r0, r3
 8013644:	2300      	movs	r3, #0
 8013646:	4602      	mov	r2, r0
 8013648:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801364a:	6a21      	ldr	r1, [r4, #32]
 801364c:	4628      	mov	r0, r5
 801364e:	47b0      	blx	r6
 8013650:	1c43      	adds	r3, r0, #1
 8013652:	89a3      	ldrh	r3, [r4, #12]
 8013654:	d106      	bne.n	8013664 <__sflush_r+0x68>
 8013656:	6829      	ldr	r1, [r5, #0]
 8013658:	291d      	cmp	r1, #29
 801365a:	d82b      	bhi.n	80136b4 <__sflush_r+0xb8>
 801365c:	4a29      	ldr	r2, [pc, #164]	; (8013704 <__sflush_r+0x108>)
 801365e:	410a      	asrs	r2, r1
 8013660:	07d6      	lsls	r6, r2, #31
 8013662:	d427      	bmi.n	80136b4 <__sflush_r+0xb8>
 8013664:	2200      	movs	r2, #0
 8013666:	6062      	str	r2, [r4, #4]
 8013668:	04d9      	lsls	r1, r3, #19
 801366a:	6922      	ldr	r2, [r4, #16]
 801366c:	6022      	str	r2, [r4, #0]
 801366e:	d504      	bpl.n	801367a <__sflush_r+0x7e>
 8013670:	1c42      	adds	r2, r0, #1
 8013672:	d101      	bne.n	8013678 <__sflush_r+0x7c>
 8013674:	682b      	ldr	r3, [r5, #0]
 8013676:	b903      	cbnz	r3, 801367a <__sflush_r+0x7e>
 8013678:	6560      	str	r0, [r4, #84]	; 0x54
 801367a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801367c:	602f      	str	r7, [r5, #0]
 801367e:	2900      	cmp	r1, #0
 8013680:	d0c9      	beq.n	8013616 <__sflush_r+0x1a>
 8013682:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013686:	4299      	cmp	r1, r3
 8013688:	d002      	beq.n	8013690 <__sflush_r+0x94>
 801368a:	4628      	mov	r0, r5
 801368c:	f7ff fbe2 	bl	8012e54 <_free_r>
 8013690:	2000      	movs	r0, #0
 8013692:	6360      	str	r0, [r4, #52]	; 0x34
 8013694:	e7c0      	b.n	8013618 <__sflush_r+0x1c>
 8013696:	2301      	movs	r3, #1
 8013698:	4628      	mov	r0, r5
 801369a:	47b0      	blx	r6
 801369c:	1c41      	adds	r1, r0, #1
 801369e:	d1c8      	bne.n	8013632 <__sflush_r+0x36>
 80136a0:	682b      	ldr	r3, [r5, #0]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d0c5      	beq.n	8013632 <__sflush_r+0x36>
 80136a6:	2b1d      	cmp	r3, #29
 80136a8:	d001      	beq.n	80136ae <__sflush_r+0xb2>
 80136aa:	2b16      	cmp	r3, #22
 80136ac:	d101      	bne.n	80136b2 <__sflush_r+0xb6>
 80136ae:	602f      	str	r7, [r5, #0]
 80136b0:	e7b1      	b.n	8013616 <__sflush_r+0x1a>
 80136b2:	89a3      	ldrh	r3, [r4, #12]
 80136b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136b8:	81a3      	strh	r3, [r4, #12]
 80136ba:	e7ad      	b.n	8013618 <__sflush_r+0x1c>
 80136bc:	690f      	ldr	r7, [r1, #16]
 80136be:	2f00      	cmp	r7, #0
 80136c0:	d0a9      	beq.n	8013616 <__sflush_r+0x1a>
 80136c2:	0793      	lsls	r3, r2, #30
 80136c4:	680e      	ldr	r6, [r1, #0]
 80136c6:	bf08      	it	eq
 80136c8:	694b      	ldreq	r3, [r1, #20]
 80136ca:	600f      	str	r7, [r1, #0]
 80136cc:	bf18      	it	ne
 80136ce:	2300      	movne	r3, #0
 80136d0:	eba6 0807 	sub.w	r8, r6, r7
 80136d4:	608b      	str	r3, [r1, #8]
 80136d6:	f1b8 0f00 	cmp.w	r8, #0
 80136da:	dd9c      	ble.n	8013616 <__sflush_r+0x1a>
 80136dc:	6a21      	ldr	r1, [r4, #32]
 80136de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80136e0:	4643      	mov	r3, r8
 80136e2:	463a      	mov	r2, r7
 80136e4:	4628      	mov	r0, r5
 80136e6:	47b0      	blx	r6
 80136e8:	2800      	cmp	r0, #0
 80136ea:	dc06      	bgt.n	80136fa <__sflush_r+0xfe>
 80136ec:	89a3      	ldrh	r3, [r4, #12]
 80136ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136f2:	81a3      	strh	r3, [r4, #12]
 80136f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80136f8:	e78e      	b.n	8013618 <__sflush_r+0x1c>
 80136fa:	4407      	add	r7, r0
 80136fc:	eba8 0800 	sub.w	r8, r8, r0
 8013700:	e7e9      	b.n	80136d6 <__sflush_r+0xda>
 8013702:	bf00      	nop
 8013704:	dfbffffe 	.word	0xdfbffffe

08013708 <_fflush_r>:
 8013708:	b538      	push	{r3, r4, r5, lr}
 801370a:	690b      	ldr	r3, [r1, #16]
 801370c:	4605      	mov	r5, r0
 801370e:	460c      	mov	r4, r1
 8013710:	b913      	cbnz	r3, 8013718 <_fflush_r+0x10>
 8013712:	2500      	movs	r5, #0
 8013714:	4628      	mov	r0, r5
 8013716:	bd38      	pop	{r3, r4, r5, pc}
 8013718:	b118      	cbz	r0, 8013722 <_fflush_r+0x1a>
 801371a:	6a03      	ldr	r3, [r0, #32]
 801371c:	b90b      	cbnz	r3, 8013722 <_fflush_r+0x1a>
 801371e:	f7ff fa07 	bl	8012b30 <__sinit>
 8013722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d0f3      	beq.n	8013712 <_fflush_r+0xa>
 801372a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801372c:	07d0      	lsls	r0, r2, #31
 801372e:	d404      	bmi.n	801373a <_fflush_r+0x32>
 8013730:	0599      	lsls	r1, r3, #22
 8013732:	d402      	bmi.n	801373a <_fflush_r+0x32>
 8013734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013736:	f7ff fb5f 	bl	8012df8 <__retarget_lock_acquire_recursive>
 801373a:	4628      	mov	r0, r5
 801373c:	4621      	mov	r1, r4
 801373e:	f7ff ff5d 	bl	80135fc <__sflush_r>
 8013742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013744:	07da      	lsls	r2, r3, #31
 8013746:	4605      	mov	r5, r0
 8013748:	d4e4      	bmi.n	8013714 <_fflush_r+0xc>
 801374a:	89a3      	ldrh	r3, [r4, #12]
 801374c:	059b      	lsls	r3, r3, #22
 801374e:	d4e1      	bmi.n	8013714 <_fflush_r+0xc>
 8013750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013752:	f7ff fb52 	bl	8012dfa <__retarget_lock_release_recursive>
 8013756:	e7dd      	b.n	8013714 <_fflush_r+0xc>

08013758 <fiprintf>:
 8013758:	b40e      	push	{r1, r2, r3}
 801375a:	b503      	push	{r0, r1, lr}
 801375c:	4601      	mov	r1, r0
 801375e:	ab03      	add	r3, sp, #12
 8013760:	4805      	ldr	r0, [pc, #20]	; (8013778 <fiprintf+0x20>)
 8013762:	f853 2b04 	ldr.w	r2, [r3], #4
 8013766:	6800      	ldr	r0, [r0, #0]
 8013768:	9301      	str	r3, [sp, #4]
 801376a:	f7ff fc9d 	bl	80130a8 <_vfiprintf_r>
 801376e:	b002      	add	sp, #8
 8013770:	f85d eb04 	ldr.w	lr, [sp], #4
 8013774:	b003      	add	sp, #12
 8013776:	4770      	bx	lr
 8013778:	2400008c 	.word	0x2400008c

0801377c <__swbuf_r>:
 801377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801377e:	460e      	mov	r6, r1
 8013780:	4614      	mov	r4, r2
 8013782:	4605      	mov	r5, r0
 8013784:	b118      	cbz	r0, 801378e <__swbuf_r+0x12>
 8013786:	6a03      	ldr	r3, [r0, #32]
 8013788:	b90b      	cbnz	r3, 801378e <__swbuf_r+0x12>
 801378a:	f7ff f9d1 	bl	8012b30 <__sinit>
 801378e:	69a3      	ldr	r3, [r4, #24]
 8013790:	60a3      	str	r3, [r4, #8]
 8013792:	89a3      	ldrh	r3, [r4, #12]
 8013794:	071a      	lsls	r2, r3, #28
 8013796:	d525      	bpl.n	80137e4 <__swbuf_r+0x68>
 8013798:	6923      	ldr	r3, [r4, #16]
 801379a:	b31b      	cbz	r3, 80137e4 <__swbuf_r+0x68>
 801379c:	6823      	ldr	r3, [r4, #0]
 801379e:	6922      	ldr	r2, [r4, #16]
 80137a0:	1a98      	subs	r0, r3, r2
 80137a2:	6963      	ldr	r3, [r4, #20]
 80137a4:	b2f6      	uxtb	r6, r6
 80137a6:	4283      	cmp	r3, r0
 80137a8:	4637      	mov	r7, r6
 80137aa:	dc04      	bgt.n	80137b6 <__swbuf_r+0x3a>
 80137ac:	4621      	mov	r1, r4
 80137ae:	4628      	mov	r0, r5
 80137b0:	f7ff ffaa 	bl	8013708 <_fflush_r>
 80137b4:	b9e0      	cbnz	r0, 80137f0 <__swbuf_r+0x74>
 80137b6:	68a3      	ldr	r3, [r4, #8]
 80137b8:	3b01      	subs	r3, #1
 80137ba:	60a3      	str	r3, [r4, #8]
 80137bc:	6823      	ldr	r3, [r4, #0]
 80137be:	1c5a      	adds	r2, r3, #1
 80137c0:	6022      	str	r2, [r4, #0]
 80137c2:	701e      	strb	r6, [r3, #0]
 80137c4:	6962      	ldr	r2, [r4, #20]
 80137c6:	1c43      	adds	r3, r0, #1
 80137c8:	429a      	cmp	r2, r3
 80137ca:	d004      	beq.n	80137d6 <__swbuf_r+0x5a>
 80137cc:	89a3      	ldrh	r3, [r4, #12]
 80137ce:	07db      	lsls	r3, r3, #31
 80137d0:	d506      	bpl.n	80137e0 <__swbuf_r+0x64>
 80137d2:	2e0a      	cmp	r6, #10
 80137d4:	d104      	bne.n	80137e0 <__swbuf_r+0x64>
 80137d6:	4621      	mov	r1, r4
 80137d8:	4628      	mov	r0, r5
 80137da:	f7ff ff95 	bl	8013708 <_fflush_r>
 80137de:	b938      	cbnz	r0, 80137f0 <__swbuf_r+0x74>
 80137e0:	4638      	mov	r0, r7
 80137e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137e4:	4621      	mov	r1, r4
 80137e6:	4628      	mov	r0, r5
 80137e8:	f000 f806 	bl	80137f8 <__swsetup_r>
 80137ec:	2800      	cmp	r0, #0
 80137ee:	d0d5      	beq.n	801379c <__swbuf_r+0x20>
 80137f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80137f4:	e7f4      	b.n	80137e0 <__swbuf_r+0x64>
	...

080137f8 <__swsetup_r>:
 80137f8:	b538      	push	{r3, r4, r5, lr}
 80137fa:	4b2a      	ldr	r3, [pc, #168]	; (80138a4 <__swsetup_r+0xac>)
 80137fc:	4605      	mov	r5, r0
 80137fe:	6818      	ldr	r0, [r3, #0]
 8013800:	460c      	mov	r4, r1
 8013802:	b118      	cbz	r0, 801380c <__swsetup_r+0x14>
 8013804:	6a03      	ldr	r3, [r0, #32]
 8013806:	b90b      	cbnz	r3, 801380c <__swsetup_r+0x14>
 8013808:	f7ff f992 	bl	8012b30 <__sinit>
 801380c:	89a3      	ldrh	r3, [r4, #12]
 801380e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013812:	0718      	lsls	r0, r3, #28
 8013814:	d422      	bmi.n	801385c <__swsetup_r+0x64>
 8013816:	06d9      	lsls	r1, r3, #27
 8013818:	d407      	bmi.n	801382a <__swsetup_r+0x32>
 801381a:	2309      	movs	r3, #9
 801381c:	602b      	str	r3, [r5, #0]
 801381e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013822:	81a3      	strh	r3, [r4, #12]
 8013824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013828:	e034      	b.n	8013894 <__swsetup_r+0x9c>
 801382a:	0758      	lsls	r0, r3, #29
 801382c:	d512      	bpl.n	8013854 <__swsetup_r+0x5c>
 801382e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013830:	b141      	cbz	r1, 8013844 <__swsetup_r+0x4c>
 8013832:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013836:	4299      	cmp	r1, r3
 8013838:	d002      	beq.n	8013840 <__swsetup_r+0x48>
 801383a:	4628      	mov	r0, r5
 801383c:	f7ff fb0a 	bl	8012e54 <_free_r>
 8013840:	2300      	movs	r3, #0
 8013842:	6363      	str	r3, [r4, #52]	; 0x34
 8013844:	89a3      	ldrh	r3, [r4, #12]
 8013846:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801384a:	81a3      	strh	r3, [r4, #12]
 801384c:	2300      	movs	r3, #0
 801384e:	6063      	str	r3, [r4, #4]
 8013850:	6923      	ldr	r3, [r4, #16]
 8013852:	6023      	str	r3, [r4, #0]
 8013854:	89a3      	ldrh	r3, [r4, #12]
 8013856:	f043 0308 	orr.w	r3, r3, #8
 801385a:	81a3      	strh	r3, [r4, #12]
 801385c:	6923      	ldr	r3, [r4, #16]
 801385e:	b94b      	cbnz	r3, 8013874 <__swsetup_r+0x7c>
 8013860:	89a3      	ldrh	r3, [r4, #12]
 8013862:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801386a:	d003      	beq.n	8013874 <__swsetup_r+0x7c>
 801386c:	4621      	mov	r1, r4
 801386e:	4628      	mov	r0, r5
 8013870:	f000 f857 	bl	8013922 <__smakebuf_r>
 8013874:	89a0      	ldrh	r0, [r4, #12]
 8013876:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801387a:	f010 0301 	ands.w	r3, r0, #1
 801387e:	d00a      	beq.n	8013896 <__swsetup_r+0x9e>
 8013880:	2300      	movs	r3, #0
 8013882:	60a3      	str	r3, [r4, #8]
 8013884:	6963      	ldr	r3, [r4, #20]
 8013886:	425b      	negs	r3, r3
 8013888:	61a3      	str	r3, [r4, #24]
 801388a:	6923      	ldr	r3, [r4, #16]
 801388c:	b943      	cbnz	r3, 80138a0 <__swsetup_r+0xa8>
 801388e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013892:	d1c4      	bne.n	801381e <__swsetup_r+0x26>
 8013894:	bd38      	pop	{r3, r4, r5, pc}
 8013896:	0781      	lsls	r1, r0, #30
 8013898:	bf58      	it	pl
 801389a:	6963      	ldrpl	r3, [r4, #20]
 801389c:	60a3      	str	r3, [r4, #8]
 801389e:	e7f4      	b.n	801388a <__swsetup_r+0x92>
 80138a0:	2000      	movs	r0, #0
 80138a2:	e7f7      	b.n	8013894 <__swsetup_r+0x9c>
 80138a4:	2400008c 	.word	0x2400008c

080138a8 <_sbrk_r>:
 80138a8:	b538      	push	{r3, r4, r5, lr}
 80138aa:	4d06      	ldr	r5, [pc, #24]	; (80138c4 <_sbrk_r+0x1c>)
 80138ac:	2300      	movs	r3, #0
 80138ae:	4604      	mov	r4, r0
 80138b0:	4608      	mov	r0, r1
 80138b2:	602b      	str	r3, [r5, #0]
 80138b4:	f7ed f8a8 	bl	8000a08 <_sbrk>
 80138b8:	1c43      	adds	r3, r0, #1
 80138ba:	d102      	bne.n	80138c2 <_sbrk_r+0x1a>
 80138bc:	682b      	ldr	r3, [r5, #0]
 80138be:	b103      	cbz	r3, 80138c2 <_sbrk_r+0x1a>
 80138c0:	6023      	str	r3, [r4, #0]
 80138c2:	bd38      	pop	{r3, r4, r5, pc}
 80138c4:	2400bf8c 	.word	0x2400bf8c

080138c8 <abort>:
 80138c8:	b508      	push	{r3, lr}
 80138ca:	2006      	movs	r0, #6
 80138cc:	f000 f88e 	bl	80139ec <raise>
 80138d0:	2001      	movs	r0, #1
 80138d2:	f7ed f83d 	bl	8000950 <_exit>

080138d6 <__swhatbuf_r>:
 80138d6:	b570      	push	{r4, r5, r6, lr}
 80138d8:	460c      	mov	r4, r1
 80138da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138de:	2900      	cmp	r1, #0
 80138e0:	b096      	sub	sp, #88	; 0x58
 80138e2:	4615      	mov	r5, r2
 80138e4:	461e      	mov	r6, r3
 80138e6:	da0d      	bge.n	8013904 <__swhatbuf_r+0x2e>
 80138e8:	89a3      	ldrh	r3, [r4, #12]
 80138ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80138ee:	f04f 0100 	mov.w	r1, #0
 80138f2:	bf0c      	ite	eq
 80138f4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80138f8:	2340      	movne	r3, #64	; 0x40
 80138fa:	2000      	movs	r0, #0
 80138fc:	6031      	str	r1, [r6, #0]
 80138fe:	602b      	str	r3, [r5, #0]
 8013900:	b016      	add	sp, #88	; 0x58
 8013902:	bd70      	pop	{r4, r5, r6, pc}
 8013904:	466a      	mov	r2, sp
 8013906:	f000 f879 	bl	80139fc <_fstat_r>
 801390a:	2800      	cmp	r0, #0
 801390c:	dbec      	blt.n	80138e8 <__swhatbuf_r+0x12>
 801390e:	9901      	ldr	r1, [sp, #4]
 8013910:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013914:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013918:	4259      	negs	r1, r3
 801391a:	4159      	adcs	r1, r3
 801391c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013920:	e7eb      	b.n	80138fa <__swhatbuf_r+0x24>

08013922 <__smakebuf_r>:
 8013922:	898b      	ldrh	r3, [r1, #12]
 8013924:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013926:	079d      	lsls	r5, r3, #30
 8013928:	4606      	mov	r6, r0
 801392a:	460c      	mov	r4, r1
 801392c:	d507      	bpl.n	801393e <__smakebuf_r+0x1c>
 801392e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013932:	6023      	str	r3, [r4, #0]
 8013934:	6123      	str	r3, [r4, #16]
 8013936:	2301      	movs	r3, #1
 8013938:	6163      	str	r3, [r4, #20]
 801393a:	b002      	add	sp, #8
 801393c:	bd70      	pop	{r4, r5, r6, pc}
 801393e:	ab01      	add	r3, sp, #4
 8013940:	466a      	mov	r2, sp
 8013942:	f7ff ffc8 	bl	80138d6 <__swhatbuf_r>
 8013946:	9900      	ldr	r1, [sp, #0]
 8013948:	4605      	mov	r5, r0
 801394a:	4630      	mov	r0, r6
 801394c:	f7ff faf6 	bl	8012f3c <_malloc_r>
 8013950:	b948      	cbnz	r0, 8013966 <__smakebuf_r+0x44>
 8013952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013956:	059a      	lsls	r2, r3, #22
 8013958:	d4ef      	bmi.n	801393a <__smakebuf_r+0x18>
 801395a:	f023 0303 	bic.w	r3, r3, #3
 801395e:	f043 0302 	orr.w	r3, r3, #2
 8013962:	81a3      	strh	r3, [r4, #12]
 8013964:	e7e3      	b.n	801392e <__smakebuf_r+0xc>
 8013966:	89a3      	ldrh	r3, [r4, #12]
 8013968:	6020      	str	r0, [r4, #0]
 801396a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801396e:	81a3      	strh	r3, [r4, #12]
 8013970:	9b00      	ldr	r3, [sp, #0]
 8013972:	6163      	str	r3, [r4, #20]
 8013974:	9b01      	ldr	r3, [sp, #4]
 8013976:	6120      	str	r0, [r4, #16]
 8013978:	b15b      	cbz	r3, 8013992 <__smakebuf_r+0x70>
 801397a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801397e:	4630      	mov	r0, r6
 8013980:	f000 f84e 	bl	8013a20 <_isatty_r>
 8013984:	b128      	cbz	r0, 8013992 <__smakebuf_r+0x70>
 8013986:	89a3      	ldrh	r3, [r4, #12]
 8013988:	f023 0303 	bic.w	r3, r3, #3
 801398c:	f043 0301 	orr.w	r3, r3, #1
 8013990:	81a3      	strh	r3, [r4, #12]
 8013992:	89a3      	ldrh	r3, [r4, #12]
 8013994:	431d      	orrs	r5, r3
 8013996:	81a5      	strh	r5, [r4, #12]
 8013998:	e7cf      	b.n	801393a <__smakebuf_r+0x18>

0801399a <_raise_r>:
 801399a:	291f      	cmp	r1, #31
 801399c:	b538      	push	{r3, r4, r5, lr}
 801399e:	4604      	mov	r4, r0
 80139a0:	460d      	mov	r5, r1
 80139a2:	d904      	bls.n	80139ae <_raise_r+0x14>
 80139a4:	2316      	movs	r3, #22
 80139a6:	6003      	str	r3, [r0, #0]
 80139a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80139ac:	bd38      	pop	{r3, r4, r5, pc}
 80139ae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80139b0:	b112      	cbz	r2, 80139b8 <_raise_r+0x1e>
 80139b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80139b6:	b94b      	cbnz	r3, 80139cc <_raise_r+0x32>
 80139b8:	4620      	mov	r0, r4
 80139ba:	f000 f853 	bl	8013a64 <_getpid_r>
 80139be:	462a      	mov	r2, r5
 80139c0:	4601      	mov	r1, r0
 80139c2:	4620      	mov	r0, r4
 80139c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80139c8:	f000 b83a 	b.w	8013a40 <_kill_r>
 80139cc:	2b01      	cmp	r3, #1
 80139ce:	d00a      	beq.n	80139e6 <_raise_r+0x4c>
 80139d0:	1c59      	adds	r1, r3, #1
 80139d2:	d103      	bne.n	80139dc <_raise_r+0x42>
 80139d4:	2316      	movs	r3, #22
 80139d6:	6003      	str	r3, [r0, #0]
 80139d8:	2001      	movs	r0, #1
 80139da:	e7e7      	b.n	80139ac <_raise_r+0x12>
 80139dc:	2400      	movs	r4, #0
 80139de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80139e2:	4628      	mov	r0, r5
 80139e4:	4798      	blx	r3
 80139e6:	2000      	movs	r0, #0
 80139e8:	e7e0      	b.n	80139ac <_raise_r+0x12>
	...

080139ec <raise>:
 80139ec:	4b02      	ldr	r3, [pc, #8]	; (80139f8 <raise+0xc>)
 80139ee:	4601      	mov	r1, r0
 80139f0:	6818      	ldr	r0, [r3, #0]
 80139f2:	f7ff bfd2 	b.w	801399a <_raise_r>
 80139f6:	bf00      	nop
 80139f8:	2400008c 	.word	0x2400008c

080139fc <_fstat_r>:
 80139fc:	b538      	push	{r3, r4, r5, lr}
 80139fe:	4d07      	ldr	r5, [pc, #28]	; (8013a1c <_fstat_r+0x20>)
 8013a00:	2300      	movs	r3, #0
 8013a02:	4604      	mov	r4, r0
 8013a04:	4608      	mov	r0, r1
 8013a06:	4611      	mov	r1, r2
 8013a08:	602b      	str	r3, [r5, #0]
 8013a0a:	f7ec ffd4 	bl	80009b6 <_fstat>
 8013a0e:	1c43      	adds	r3, r0, #1
 8013a10:	d102      	bne.n	8013a18 <_fstat_r+0x1c>
 8013a12:	682b      	ldr	r3, [r5, #0]
 8013a14:	b103      	cbz	r3, 8013a18 <_fstat_r+0x1c>
 8013a16:	6023      	str	r3, [r4, #0]
 8013a18:	bd38      	pop	{r3, r4, r5, pc}
 8013a1a:	bf00      	nop
 8013a1c:	2400bf8c 	.word	0x2400bf8c

08013a20 <_isatty_r>:
 8013a20:	b538      	push	{r3, r4, r5, lr}
 8013a22:	4d06      	ldr	r5, [pc, #24]	; (8013a3c <_isatty_r+0x1c>)
 8013a24:	2300      	movs	r3, #0
 8013a26:	4604      	mov	r4, r0
 8013a28:	4608      	mov	r0, r1
 8013a2a:	602b      	str	r3, [r5, #0]
 8013a2c:	f7ec ffd3 	bl	80009d6 <_isatty>
 8013a30:	1c43      	adds	r3, r0, #1
 8013a32:	d102      	bne.n	8013a3a <_isatty_r+0x1a>
 8013a34:	682b      	ldr	r3, [r5, #0]
 8013a36:	b103      	cbz	r3, 8013a3a <_isatty_r+0x1a>
 8013a38:	6023      	str	r3, [r4, #0]
 8013a3a:	bd38      	pop	{r3, r4, r5, pc}
 8013a3c:	2400bf8c 	.word	0x2400bf8c

08013a40 <_kill_r>:
 8013a40:	b538      	push	{r3, r4, r5, lr}
 8013a42:	4d07      	ldr	r5, [pc, #28]	; (8013a60 <_kill_r+0x20>)
 8013a44:	2300      	movs	r3, #0
 8013a46:	4604      	mov	r4, r0
 8013a48:	4608      	mov	r0, r1
 8013a4a:	4611      	mov	r1, r2
 8013a4c:	602b      	str	r3, [r5, #0]
 8013a4e:	f7ec ff6d 	bl	800092c <_kill>
 8013a52:	1c43      	adds	r3, r0, #1
 8013a54:	d102      	bne.n	8013a5c <_kill_r+0x1c>
 8013a56:	682b      	ldr	r3, [r5, #0]
 8013a58:	b103      	cbz	r3, 8013a5c <_kill_r+0x1c>
 8013a5a:	6023      	str	r3, [r4, #0]
 8013a5c:	bd38      	pop	{r3, r4, r5, pc}
 8013a5e:	bf00      	nop
 8013a60:	2400bf8c 	.word	0x2400bf8c

08013a64 <_getpid_r>:
 8013a64:	f7ec bf5a 	b.w	800091c <_getpid>

08013a68 <_init>:
 8013a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a6a:	bf00      	nop
 8013a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a6e:	bc08      	pop	{r3}
 8013a70:	469e      	mov	lr, r3
 8013a72:	4770      	bx	lr

08013a74 <_fini>:
 8013a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a76:	bf00      	nop
 8013a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a7a:	bc08      	pop	{r3}
 8013a7c:	469e      	mov	lr, r3
 8013a7e:	4770      	bx	lr
